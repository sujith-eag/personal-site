[{"content":"","date":"2024-10-23","id":0,"permalink":"/personal-site/docs/tools/hugo/hugo-1/","summary":"","tags":[],"title":"Hugo 1"},{"content":"","date":"2024-10-22","id":1,"permalink":"/personal-site/docs/tools/git-github/","summary":"","tags":[],"title":"Git Github"},{"content":"","date":"2024-10-22","id":2,"permalink":"/personal-site/docs/python/","summary":"","tags":[],"title":"Python"},{"content":"Bash - Bourne Again SHell\t(git Bash - for windows interaction with git )\nBash Ctrl + Alt + T # Launch terminal Ctrl + Shift + C # for copying from terminal Ctrl + Shift + V # for pasting in terminal clear # to clear the terminal\rThe grammar of a shell allows to combine existing tools into powerful pipelines and handle large volumes of data automatically.\tSequence of commands written in a \u0026lsquo;script\u0026rsquo;, improves the reproduciblity of workflows.\nTerminal Basics su - super user\tsudo - getting the super user permission\tapt - the installer\nsudo apt install update sudo apt upgrade\r$ is the prompt for typing, followed by a blinking text cursor.\t$ whoami\n--help can be passed to any command to see what option a command accepts\ncd --help ls --help mkdir --help\rhelp cd help echo # works\rIf there are long -- and short - versions of a command, use short when typing command in the terminal, use long in scripts when it is written once and read many times.\nman is manual for a command if it exists.\tman ls man mkdir\rspace and B used to travel in manual,\t/ is used to search for a term,\tN is used to move between the hits, N+Shift for moving backwards.\nman cd doesn\u0026rsquo;t exist as it is a built is function --help can be used.\nGeneral Syntax of a Shell command $ ls -F /\rListing of files \u0026amp; directories in Root directory /\t$ is the prompt\tls is the command\t-F is the option/flag/switches / is the argument\n\u0026lsquo;Command\u0026rsquo; doesn\u0026rsquo;t always require argument or option.\t\u0026lsquo;Command\u0026rsquo; can be called with more than one \u0026lsquo;options\u0026rsquo; \u0026amp; \u0026lsquo;arguments\u0026rsquo;.\t( \u0026lsquo;options\u0026rsquo; and \u0026lsquo;arguments\u0026rsquo; are referred to as \u0026lsquo;parameters\u0026rsquo;)\n\u0026lsquo;Options\u0026rsquo; change the behavior of a \u0026lsquo;command\u0026rsquo;\t\u0026lsquo;short options\u0026rsquo; start with single dash \u0026rsquo; - \u0026lsquo;, -r -a\t\u0026rsquo;long options\u0026rsquo; start with double dash \u0026lsquo;\u0026ndash;\u0026rsquo; --reverse --all\n\u0026lsquo;Arguments\u0026rsquo; tell the command what to operate on (files and directories)\nEach parts are separated by spaces, if space is omitted, the difference between command, option and argument will not be known to the terminal.\t( ls-F searches for a command called ls-F which doesn\u0026rsquo;t exist)\nCapital and Small are also important\tls -s displays size of listed files.\tls -S sorts the displayed files.\nNavigating Files and Directories Directory names in a path are separated by / in unix, \\ in windows\nTab completion When there is only one option, like Document or Download, hitting tab on D will show both Document/ Download. (Double tab will show if there are more than one)\tDoc + Tab will bring Documents\n~/Documents/Odin-Project/foundations/java-script/calculator/ Doc tab O tab f tab j tab cal tab\r. for opening everything in a project directory git add . to add all files in a directory to Git staging area In VS code, opening cd in project directory and typing code . opens project folder code in terminal launches VS code pwd Print Working Directory pwd print working directory, shows current working directory(shows where we are)\t/ indicates the root directory, /Users/sujith it is the slash before the user.\nRelative and Absolute Paths When \u0026lsquo;Relative paths\u0026rsquo; are used with commands ls and cd, it tries to find that location \u0026lsquo;from where we are\u0026rsquo; rather than from the root of the file system. So it can only look at files within that directory and the .. parent directory\nAbsolute paths can be specified by including its entire entire path from the root directory indicated by a leading slash /\tThis tells the computer to follow the path from the root of file system so it always refers to one directory.\n(Using pwd to see the route and typing the absolute path to wherever we want to go)\t~ tilde character at the start of a path mean the current users home directory\t( ~/data is equal to /Users/sujith/data useful for absolute path typing)\ncd change directory cd \u0026lt;name\u0026gt; Change directory(changes the shells current working directory)\t(can only move into directories like this, but not out of it with relative paths)\ncd ~ going to the home directory at once ( home/sujith)\ncd .. moves back to parent directory\t( .. is a special directory meaning \u0026ldquo;the directory containing this one\u0026rdquo; i.e parent directory)\t(. by itself means current directory)\ncd - the - in front moves to the previous directory we were in ,\tcd - again will bring us back ( it is switching between current and previous directories only )\n( cd / goes to root directory, cd ~ goes to home directory )\t( cd ../.. goes up by two level, parent of parent)\nls listing ls listing to check files and directories in the directory\tall these options/flags can be combined like ls -Fal -lF -aF\nflags for ls\t-l crates a list of things\t-h does something i couldn\u0026rsquo;t figure\t-a \u0026lsquo;show all\u0026rsquo; shows hidden directories with . also .. directory\t( there will be other directories which start with . like .bash_profile these contain shell config settings, these are hidden to prevent cluttering )\n-F gives an output separated with / marker to show what they are, (ones with no marker are files)\nls -R to list all nested sub directories within a directories\nLooking at other directories contents without moving out ls ~/Desktop/trial ls /User/sujith/Desktop/trial ls -F Desktop\r","date":"2024-10-22","id":3,"permalink":"/personal-site/docs/linux-terminal/terminal-1-basics/","summary":"\u003cp\u003eBash - \u003ccode\u003eBourne Again SHell\u003c/code\u003e\t\t\u003cbr /\u003e\n(git Bash - for windows interaction with git )\u003c/p\u003e\n\u003ch2 id=\"bash\"\u003eBash\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCtrl + Alt + T  \u003cspan class=\"c1\"\u003e# Launch terminal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCtrl + Shift + C  \u003cspan class=\"c1\"\u003e# for copying from terminal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCtrl + Shift + V  \u003cspan class=\"c1\"\u003e# for pasting in terminal\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eclear      \u003cspan class=\"c1\"\u003e# to clear the terminal\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThe grammar of a shell allows to combine existing tools into powerful pipelines and handle large volumes of data automatically.\t\u003cbr /\u003e\nSequence of commands written in a \u0026lsquo;script\u0026rsquo;, improves the reproduciblity of workflows.\u003c/p\u003e","tags":[],"title":"Terminal - 1 Basics"},{"content":"","date":"2024-10-23","id":4,"permalink":"/personal-site/docs/tools/hugo/hugo-2/","summary":"","tags":[],"title":"Hugo 2"},{"content":"","date":"2024-10-22","id":5,"permalink":"/personal-site/docs/tools/vscode/","summary":"","tags":[],"title":"Vscode"},{"content":"","date":"2024-10-22","id":6,"permalink":"/personal-site/docs/html-css/html/","summary":"","tags":[],"title":"HTML"},{"content":"","date":"2024-10-22","id":7,"permalink":"/personal-site/docs/java-script/","summary":"","tags":[],"title":"JavaScript"},{"content":"Creating Directories Open where a directory has to be added. mkdir [name] to \u0026lsquo;make directory\u0026rsquo; in the current directory. Using relative path without leading slash.\n-p for multiple directories mkdir -p creates a directory with nested sub-directories in a single operation. mkdir -p ../project/data ../project/results. ls -R to list all nested sub directories within a directories.\nTo make a directory 2016 which has data and that has 2 directory processed and raw\n# method one # method two mkdir 2016 mkdir 2016 mkdir 2016/data cd 2016 mkdir 2016/data/processed mkdir data mkdir 2016/data/raw cd data . mkdir raw processed # method three mkdir -p 2016/data/raw mkdir -p 2016/data/processed # `-p` is creating any intermediate directory mkdir north south pacific # will create 3 different directories.\rNaming Conventions Don\u0026rsquo;t use spaces as arguments need space separation in command line. Use _ or - instead of space. Don\u0026rsquo;t start with - as it will be considered as option/flag. Stick with 0-9, a-z . - _ as other symbols have different meaning. To refer to names with spaces or other special characters, surround the name in single quotes \u0026rsquo; \u0026lsquo;. Single Quotes - Enclosing characters in single quotes \u0026rsquo; \u0026rsquo; preserves the literal value of each character within the quotes.\nEscape Character - A non-quoted backslash \\ is the escape character. It preserves the literal value of the next character that follows, with exception of newline.\nCreate a text file Using nano editor nano text editor is used to create a txt file. nano draft.txt will open nano text editor, data can be typed and then saved(many more options) commands are accessed by holding down Ctr.\nnano can only work with plain character data, no tables or images. nano can do only this basic operation.\nProgrammers use Emacs or Vim. Graphical editors such as Gedit or VScode. On windows there are Notecode++. notepad can run like nano\ntouch command touch my_file.txt creates a blank text file. touch \u0026lt;name.txt\u0026gt; to make a file.\nrm for Removing a file rm my_file.txt file gets removed. rm -i will ask for confirmation before the deletion. rm works only on files, not on directories. rm thesis raises an error. rm -i thesis/quote.txt will work after confirmation.\nWe can remove a directory and all its contents by using the recursive -r rm -r thesis rm -r -i\nrm -i *.txt removing all .txt file in directory with permission needed for each.\nShell does not have any trash bin so any file deleted is actually deleted.\nMoving files and directories Renaming by moving a file to new name!! mv [old] [new] moves or renames a file or directory.\nWhile in directory behind the directory with file. $ mv trial/draft.txt trial/quotes.txt\rThe draft.txt file is moved to quotes.txt which is similar to renaming the file. While in the same directory $ mv draft.txt quotes.txt\rWhen it is moved to a a directory with same file name, it will delete the previous file silently. mv will not ask for confirmation by default. An additional option, mv -i mv --interactive will cause mv to request such confirmation.\nFile can be moved to directory also\n$ mv trial/quotes.txt` # this will move it from that directory to current one. $ mv sucrose.dat maltase.dat ../raw # moving two files to raw file in the parent directory\rCopying files and directories cp works similar to mv, but copies the file.\ncp [old] [new] # copies a file $ cp quotes.txt thesis/quotation.txt # copies file to another directory with different name.\rA directory and all its contents are copied by using recursive option -r (like backing up directory)\n$ cp -r thesis thesis_backup\r-r is used to copy the directory, if it is not included, the directory will be omitted.\nOperation with multiple files and directories Copying or moving several files can be done by giving multiple files,\nIf given more than one file names followed by a directory name(directory as last argument) cp copies the files to the named directory\n$ mkdir backup $ cd cretures/minotaur.dat creatures/unicorn.dat backup/ $ cd minotaur.dat unicorn.dat basilisk.dat #all three are file names, makes a error, this can be handled by using wildcards.\rWild Cards \u0026lsquo;wildcards\u0026rsquo; are special characters that can be used to represent unknown characters or sets of characters when navigating the Unix system.\nethane.pdb methane.pdb propane.pdb pentane.pdb * is a wild card which represents 0 or more characters. *.pdb represents every file that ends with .pdb *ethane.pdb represents ethane and methane. p*.pdb represents files that begin with p and has .pdb ? is also a wildcard, but represents exactly one character. ?ethane.pdb represents only methane.pdb\nWild cards can be used in combination with one another. ???ane.pde is any three characters followed by ---ane.pde\nls *t*ane.pdb # gives most of names ls *t?ne.* # gives octane pentane ls *t??ne.pdb # ethane methane ls ethane.* #only ethane\rWhen a shell sees a wildcard it expands the wildcard to create a list of matching filenames before running the preceding command.\n*.pdf in directory with *.pdb will throw error\nUsing wildcards for copying $ cp *dataset* backup/datasets # copy anything having dataset as name to datasets directory inside backups $ cp *calibration.txt backup/calibration # copying all calibration files $ cp 2015-11-* send_to_bob/all_november_files/ # copying just November files $ cp *-23-dataset* send_to_bob/all_datasets_created_on_23rd/ # just 23rd files\r","date":"2024-10-22","id":8,"permalink":"/personal-site/docs/linux-terminal/terminal-2-working-with-files/","summary":"\u003ch2 id=\"creating-directories\"\u003eCreating Directories\u003c/h2\u003e\n\u003cp\u003eOpen where a directory has to be added.   \u003cbr /\u003e\n\u003ccode\u003emkdir [name]\u003c/code\u003e  to \u0026lsquo;make directory\u0026rsquo; in the current directory.   \u003cbr /\u003e\nUsing relative path without leading slash.\u003c/p\u003e","tags":[],"title":"Terminal - 2 Working With Files"},{"content":"","date":"2024-10-23","id":9,"permalink":"/personal-site/docs/tools/hugo/hugo-3/","summary":"","tags":[],"title":"Hugo 3"},{"content":"","date":"2024-10-22","id":10,"permalink":"/personal-site/docs/tools/obsidian/","summary":"","tags":[],"title":"Obsidian"},{"content":"","date":"2024-10-22","id":11,"permalink":"/personal-site/docs/html-css/","summary":"","tags":[],"title":"HTML \u0026 CSS"},{"content":"Objective Linking commands with pipes and filters. Combining sequences of commands to get output. Redirecting commands output to a file.\nWord count wc gives word count of a file.\n$ wc cubane.pdb\rgives output (20 156 1158) which is \u0026rsquo;number of lines\u0026rsquo;, \u0026lsquo;words\u0026rsquo; and \u0026lsquo;characters\u0026rsquo; in a file. $ wc *.pdb\rreturns word count of all .pdb files individually and also total.\nwc -l # shows only the number of lines per file wc -m # shows number of characters only wc -w # shows number of words only\r$ wc -l which doesn\u0026rsquo;t have any filename, so it assumes the input will come from the command prompt so it will keep waiting for input without doing anything.\nCtrl + C can be used to come out of such mistakes.\nCapturing output from commands $ wc -l *.pdb \u0026gt; lengths.txt\rreads all .pbs lines in directory. The \u0026gt; symbol redirect\u0026rsquo;s the command\u0026rsquo;s output to a file called lengths.txt. It will create it if doesn\u0026rsquo;t exist or replaces if it does. so caution.\necho command to print strings.\ncat for concatenation. Joins together and prints all the contents of the file one after the other.\n$ cat lengths.txt\rDisadvantage of cat is it always dumps the whole file onto the screen. Using less is more safe approach in practice.\n$ less lengths.pbd\rThis displays only screen full of the file and stops. b and space can be used to go for next page, q for quit.\nsort Filtering output Will do alphanumerical sort by default\nsort -n # for numerical sort sort -r # sorts in reverse order\r$ sort -n lengths.txt # this does not change the file, just sends results to screen\rShifting sorted results to new file\n$ sort -n lengths.txt \u0026gt; sorted-lengths.txt\rhead to get first few lines in sorted file By default head and tail create the first 10 lines of its input. $ head -n 1 sorted-lengths.txt gives the first line of the file. head -n 20 would give the first 20 lines. tail -n 2 gives the last 2 lines. \u0026raquo; for appending values in file Redirecting results to the same file is not good, causes errors or deletes the file.\n$ sort -n lengths.txt \u0026gt; lengths.txt\r\u0026gt; creates and recreates the same file, \u0026gt;\u0026gt; appends the values sequentially again and again like append, so can be run multiple times to enter into a file.\n$ head -n 3 animal.csv \u0026gt; animals-subset.csv # creates the file for first value. $ tail -n 2 animals.csv \u0026gt;\u0026gt; animals-subsets.csv # appends the second value.\rpipes for passing output to another command $ sort -n lengths.txt | head -n 1\rThe | vector bar between the two commands is called the pipe. It tells the shell that we want to use the output of the command on the left as input to the command on the right.\nPiping removes the need for other files to hold values.\nwe can pass wc values directly to sort and then send resulting output to head.\n$ wc -l *.pdb | sort -n | head -n 1 gives the first element which is the shortest.\rFilters A filter is a program like wc and sort that transforms a stream of input into a stream output. All standard Unix tools work like this, they read from standard input, do something with what they have read and write to standard output. This programming model is called pipes and filters\nPipe construction cut command is used to remove or cut out certain section of each line in the file.\n$ cut -d , -f 2 animals.csv\rcut expects the lines to be separated into columns by a tab character, these are called delimiter. Here -d , is used as delimiter character.\n-f option specifies that we want to extract the second field (column).\n$ cut -d , -f 2 animals.csv | sort | uniq\rremoving the duplicates using uniq\nuniq -c option gives the count of the number of times a line occurs in its input.\n$ cd nart-pacific-gyre # move into directory $ wc -l *.txt # get the word count of all `txt` files. $ wc -l *.txt | sort -n | head -n 5 # checking the first five. $ wc -l *.txt | sort -n | tail -n 5 # checking the last five, can be reversed if needed.\r","date":"2024-10-22","id":12,"permalink":"/personal-site/docs/linux-terminal/terminal-3-pipes-filters/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003eObjective\u003c/strong\u003e\u003c/em\u003e  \u003cbr /\u003e\nLinking commands with pipes and filters.    \u003cbr /\u003e\nCombining sequences of commands to get output.  \u003cbr /\u003e\nRedirecting commands output to a file.\u003c/p\u003e","tags":[],"title":"Terminal - 3 Pipes Filters"},{"content":"Creating new project directory. Get all dependencies which were a lot. Run the local development server.\nnpm create thulite@latest -- --template doks npm install npm run dev\rUpdating the dependencies.\nnpm install @thulite/docs-core@latest npm install @thulite/docs-core@latest @thulite/images@latest @thulite/seo@latest\rProject structuring content/docs/ New files go in docs. Multiple sub-folders can be created inside docs.\nnpm run create docs/guides/faq.md\rcontent/ content files. assets/ scripts, images styles etc. static/ static assets, fonts favicon, PDF. Configuration files config/_default/hugo.toml Hugo/ site config. config/_default/module.toml Hugo mounts config. config/_default/params.toml The Doks + thulite integration.\nSidebar By default Doks will generate a sidebar based on the file system structure of documentation, using each file\u0026rsquo;s title property as the sidebar entry.\nInstead of using default navigation, use sidebar_\u0026lt;section\u0026gt; entries in config/_default/menues/menues.\u0026lt;language\u0026gt;.toml language is en if english. Make sure to use pageRef in stead of url and omit the trailing slash.\nmenues.toml\r[[sidebar_docs]] name= \u0026#34;Guides\u0026#34; pageRef=\u0026#34;/docs/guides\u0026#34; weight = 10 [[sidebar_docs]] name= \u0026#34;Reference\u0026#34; pageRef=\u0026#34;/docs/reference\u0026#34; weight = 20 [[sidebar_docs]] name= \u0026#34;Resources\u0026#34; pageRef=\u0026#34;/docs/resources\u0026#34; weight = 30\rOther child references below it will be generated automatically.\nSide bar collapse Sections can be collapsed by default by setting collapsed to true in front matter of a section\u0026rsquo;s _index.md\n_index.md\r--- sidebar: collapsed: true ---\rSidebar navigation is also available for other docs based sections created. by running command\nnpm run create -- --kind docs tutorials\rand add new tutorials section to config/_default/params.toml\nparams.toml\r[doks] sectionNav = [\u0026#34;docs\u0026#34;, \u0026#34;tutorials\u0026#34;]\ron this page side bar on the right This table of content section is automatically generated from ./config/_default/markup.toml\nmarkup.toml\r[tableOfContents] endLevel = 3 ordered = false startLevel = 2\rmain heading elements The left site top navigation can be defined in config/_default/menus/menus.\u0026lt;language\u0026gt;.toml\nmenus.toml\r[[main]] name = \u0026#34;Docs\u0026#34; url = \u0026#34;/docs/guides/example-guide/\u0026#34; weight = 10 [[main]] name = \u0026#34;Blog\u0026#34; url = \u0026#34;/blog/\u0026#34; weight = 30\rmain header social entries config/_default/menus/menus.\u0026lt;language\u0026gt;.toml\nmenus.toml\r[[social]] name = \u0026#34;Github\u0026#34; pre = ____ it was too long for icon url = \u0026#34;https://github...\u0026#34; weight = 30\rIcon can be gotten from tabler site\nFooter Footer entries in config/_default/menus/menus.\u0026lt;language\u0026gt;.toml\nmenus.toml\r[[footer]] name = \u0026#34;Privacy Policy\u0026#34; url = \u0026#34;/privacy/\u0026#34; weight = 10\r","date":"2024-10-23","id":13,"permalink":"/personal-site/docs/tools/hugo/doks-theme-1/","summary":"\u003cp\u003eCreating new project directory.         \u003cbr /\u003e\nGet all dependencies which were a lot.    \u003cbr /\u003e\nRun the local development server.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\" frame=\"none\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm create thulite@latest -- --template doks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enpm run dev\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eUpdating the dependencies.\u003c/p\u003e","tags":[],"title":"Doks Theme 1"},{"content":"","date":"2024-10-22","id":14,"permalink":"/personal-site/docs/tools/chrome/","summary":"","tags":[],"title":"Chrome"},{"content":"Objectives Writing a loop that applies to one or more commands separately to each file in a set of files. Trace the values taken by a loop variable during the execution of the loop. Explain the difference between variable\u0026rsquo;s name and its value. Explain why spaces and some punctuation characters should\u0026rsquo;t be used in the file name. Demonstrate how to see what commands have recently been executed. Run recently executed commands without retyping them.\nLoops Loops are programming constructs that allow us to repeat a command or set of commands for each item in a list.\n$ for filename is basilisk.dat minotaur.dat unicorn.dat \u0026gt; do \u0026gt; echo $filename \u0026gt; head -n 2 $filename | tail -n 1 \u0026gt; done\rfor indicates the start of for-loop. do indicates the start of job execution list. done indicates the end of a loop. $ is used to indicate it as a variable that has to be replaced by its value.\necho all 10 numbers using loop\n$ for number in 0 1 2 3 4 5 6 7 8 9 \u0026gt; do \u0026gt; echo $number \u0026gt; done\rWrong method\n$ for data in *.pdb \u0026gt; do \u0026gt; ls *.pdb \u0026gt; done # here all values are printed every time, not one at a time\rRight way, prints each one of the values individually.\n$ for data in *.pdb \u0026gt; do \u0026gt; ls $data \u0026gt; done\rPrints only cubane.pdb\n$ for filename in c* \u0026gt; do \u0026gt; ls $filename \u0026gt; done\rprints only cubane.pdb and octane.pdb\n$ for filename in *c* \u0026gt; do \u0026gt; ls $filename \u0026gt; done\rSaving to a file in a loop $ for alkanes in *.pdb \u0026gt; do \u0026gt; echo $alkanes \u0026gt; cat $alkanes \u0026gt;\u0026gt; alkanes.pdb \u0026gt; done\rprints all .pdb and appends all into alkanes.pdb using \u0026gt; would have only one value in the file.\nPiping $ for filename in *.dat \u0026gt; do \u0026gt; echo $filename \u0026gt; head -n 100 $filename | tail -n 20 \u0026gt; done\recho all .dat assuming each file has at least 100 lines, take the first 100 lines and take the last 20 lines from that. So gives lines from 81 to 100.\nwhat happens to the lines??\nSpaces in names $ for filename in \u0026#34;red dragon.dat\u0026#34; \u0026#34;purple unicorn.dat\u0026#34; \u0026gt; do \u0026gt; head -n 100 $filename | tail -n 20 \u0026gt; done\rEnclosing the file with \u0026quot; \u0026quot; around the filename but it should not be around $filename.\nCopying a file into multiple files $ cp *.dat original-*.dat\rTo create a new file with original- as prefix. But raises error as the last argument is not a directory and there are multiple files, When *.dat is expanded.\n$ for filename in *.dat \u0026gt; do \u0026gt; cp $filename original-$filename \u0026gt; done\rNow each of .dat file come one by one and in the cp there will be only two files, so will be copied into the other.\nScripting $ for datafile in NENE*A.txt NENE*B.txt; do bash goostat.sh $datafile stats-$datfile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datfile stats-$datfile; done\r$ for datafile in *.dat \u0026gt; do \u0026gt; echo \u0026#34;cat $datafile \u0026gt;\u0026gt; all.pdb\u0026#34; \u0026gt; done\rWithout the \u0026quot; \u0026quot; , each entry would have cat cat\nNested loop $ for species in cubane ethane methane \u0026gt; do \u0026gt; for temp in 25 30 37 40 \u0026gt; do \u0026gt; mkdir $species-$temp \u0026gt; done \u0026gt; done\r","date":"2024-10-22","id":15,"permalink":"/personal-site/docs/linux-terminal/terminal-4-loops-scripting/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003eObjectives\u003c/strong\u003e\u003c/em\u003e    \u003cbr /\u003e\nWriting a loop that applies to one or more commands separately to each file in a set of files. \u003cbr /\u003e\nTrace the values taken by a loop variable during the execution of the loop. \u003cbr /\u003e\nExplain the difference between variable\u0026rsquo;s name and its value. \u003cbr /\u003e\nExplain why spaces and some punctuation characters should\u0026rsquo;t be used in the file name. \u003cbr /\u003e\nDemonstrate how to see what commands have recently been executed. \u003cbr /\u003e\nRun recently executed commands without retyping them.\u003c/p\u003e","tags":[],"title":"Terminal - 4 Loops Scripting"},{"content":"","date":"2024-10-22","id":16,"permalink":"/personal-site/docs/linux-terminal/","summary":"Reference points of Linux Bash scripting","tags":[],"title":"Linux Bash Terminal"},{"content":"Usual code block with usual triple block quote language can also be indicated.\nCodeblocks to Write code Frames and titles Code block in a window-like frame looking like a terminal with a tag of file name using toml {title=\u0026quot;..\u0026quot;}\ncount.js\rjs {title=\u0026#34;count.js\u0026#34;} // then code follows below For bash using the {title=\u0026quot;\u0026quot;} makes a label full length, it can be removed by adding {frame=\u0026quot;none\u0026quot;}\nafter triple quote bash {frame=\u0026#34;none\u0026#34;}\rLine numbers 32js { lineNos=true lineNoStart=32 } 33 34and some more\rLine Highlight js { hl_lines=2 } highlights the second line, doesn\u0026rsquo;t have to be numbered.\nFor multiple lines in different places.\n199js { linenos=true, hl_lines=[2, \u0026#34;4-5\u0026#34;], linenostart=199 } 200# 201# 202# 203# 204# 205#\rthere is small and capital letters??\nCustom fonts Default is jost font created by indestructible type for all text.\nCustom font can be set up in CSS file\nSystem fonts Easier and loads faster by using system fonts, can be added to assets/scss/common/_variables-custom.scss\r// $font-family-sans-serif: $font-family-sans-serif: system-ui, -apple-system, \u0026#34;Segoe UI\u0026#34;, Roboto .......etc\rShortcodes Supports hugo type shortcodes also\nCallout Are useful for displaying secondary information alongside a page\u0026rsquo;s main content. They can be of type note, tip, caution, danger.\nWrap content, similar to html tags, the two {{}} are extra.\n\u0026lt; callout \u0026gt; \u0026lt; /callout \u0026gt; \u0026lt; callout note \u0026gt; This is a note callout. \u0026lt; /callout \u0026gt;\rThis is a note callout. These call outs get called out even within a code block so ive removed all {{}} from all callouts below. Also the images get called so there also removed\nNote callout \u0026lt; callout context=\u0026#39;note\u0026#39; title=\u0026#34;Note\u0026#34; icon=\u0026#34;outline/info-circle\u0026#34; \u0026gt; This is a note callout. blue can put a code block here also, makes a block note. \u0026lt; /callout \u0026gt;\rThis is a note callout. its white if i add context = note.\n\u0026lt; callout tip \u0026gt; \u0026lt; /callout\u0026gt; but just this gets tip callout but i cant put title like shown in above code.\ncan put a code block here also, makes a block note\rCutsom callout titles \u0026lt; callout context=\u0026#39;tip\u0026#39; title=\u0026#34;Did you know?\u0026#34; icon=\u0026#34;outline/rocket\u0026#34; \u0026gt;\rThis is a note callout but like a question. and purple\radding link and stuff, any markdown format\r\u0026lt; /callout \u0026gt;\rDid you know?\nThis is a note callout but like a question. and purple (i removed the context = tip so its blue) adding context= is makig every type white\nadding link and stuff, any markdown format\n\u0026lt; callout context=\u0026#39;tip\u0026#39; title=\u0026#34;Did you know?\u0026#34; icon=\u0026#34;outline/rocket\u0026#34; \u0026gt;\rThis is a note callout but like a question. and purple\radding link and stuff, any markdown format\r\u0026lt; /callout \u0026gt;\rThere are caution in kind of orange, danger type in reddish\nDetails / kind of dropdown details is a html element??\n\u0026lt; details \u0026#34;SomethingTitleHere\u0026#34; \u0026gt; Something to show \u0026lt; /details \u0026gt;\rSomethingTitleHere\rSomething to show Starting in an open state\n\u0026lt; details \u0026#34;SomethingTitleHere\u0026#34; open \u0026gt; Something to show, the open is boolian that shows the content \u0026lt; /details \u0026gt;\rSomethingTitleHere\rSomething to show, the open is boolian that shows the content Tabs and tab Tabbed interface, one tab with options to choose like the yaml | toml | json to display respective code block or other thing using tabs for overall box and and tab for each individual section within it. tabs must have a unique identifier like an id each tab should have a label to display to the user yaml toml\n\u0026lt; tabs \u0026#34;create-new-site\u0026#34; \u0026gt; \u0026lt; tab \u0026#34;yaml\u0026#34; \u0026gt; a code block for this \u0026lt; /tab \u0026gt; \u0026lt; tab \u0026#34;toml\u0026#34; \u0026gt; a code block for toml \u0026lt; /tab \u0026gt; \u0026lt; /tabs \u0026gt;\ryaml\rtoml\ra code block for this\ra code block for toml\rWhen a tab is selected, it is remembered across the page\nLink cards / wide card link To prominently link to different pages. with a box and arrow, with a title and short discription. Takes up whole horizontal space. href has the link target sets where to open\u0026hellip; similar to anchor tag.\n\u0026lt; link-card title= \u0026#34;Next page/ show case / whatever the name\u0026#34; description= \u0026#34; something below it\u0026#34; href= \u0026#34;/refLink/\u0026#34; target=\u0026#34;_blank\u0026#34; \u0026gt;\rNext page/ show case / whatever the name\rsomething below it\n\u0026lt; link-card\ttitle= \u0026#34;show case\u0026#34; href= \u0026#34;/refLink/\u0026#34; \u0026gt;\rshow case\rCard grid / putting two link box in a row card-grid becomes the wrapper where many link-card can be placed.\n# all {{}} are removed around \u0026lt;\u0026gt; \u0026lt; card-grid \u0026gt; \u0026lt; link-card\ttitle= \u0026#34;show case\u0026#34; href= \u0026#34;/refLink/\u0026#34; \u0026gt; \u0026lt; link-card\ttitle= \u0026#34;show case\u0026#34; href= \u0026#34;/refLink/\u0026#34; \u0026gt; \u0026lt; /card-grid \u0026gt;\rshow case\rshow case\rImages shortcodes \u0026lt; `img` \u0026gt;, \u0026lt; `picture` \u0026gt;, \u0026lt; `figure` \u0026gt;\rpicture is used to display page resource image\n\u0026lt; `picture` src=\u0026#34;vincent.jpg\u0026#34; alt=\u0026#34;bird image flying\u0026#34; \u0026gt;\rfigure is used to display image from asset directory.\n\u0026lt; `figure` src=\u0026#34;images/vincent.jpg\u0026#34; alt=\u0026#34;bird image flying\u0026#34; caption=\u0026#34;under text\u0026#34; \u0026gt;\rVideo {{ \u0026lt; video \u0026gt; }} shortcode\n\u0026lt; video src=\u0026#34;robin(540p)\u0026#34; autoplay=\u0026#34;true\u0026#34; muted=\u0026#34;true\u0026#34;\u0026gt;\rfrom Page resource Adding a monochrome monogram / logo which changes with light and dark modes. SVG using {{ \u0026lt; inline-svg \u0026gt; }} which gets embedded into the html\n\u0026lt; inline-svg src=\u0026#34;logo-netlify-lightmode.svg\u0026#34; width=\u0026#34;64px\u0026#34; height=\u0026#34;57px\u0026#34; class=\u0026#34;svg-inline- svg-monochrome\u0026#34;\u0026gt;\rfrom assets directory \u0026lt; inline-svg src=\u0026#34;svgs/logos/logo-netlify-lightmode.svg\u0026#34; width=\u0026#34;64px\u0026#34; height=\u0026#34;57px\u0026#34; class=\u0026#34;svg-inline-cutsom svg-lightmode\u0026#34;\u0026gt;\rTabler icons Tabler Icons site, this icons provided by copying its name from this site\n\u0026lt; inline-svg \u0026#34;outline/coffee\u0026#34; \u0026gt; \u0026lt; inline-svg src=\u0026#34;outline/hand-love-you\u0026#34; sroke-width=\u0026#39;1\u0026#39; stroke=\u0026#34;#ee52b7\u0026#34; height=\u0026#34;3rem\u0026#34; width=\u0026#34;3rem\u0026#34; class=\u0026#34;svg-inline-custom\u0026#34; \u0026gt;\r","date":"2024-10-23","id":17,"permalink":"/personal-site/docs/tools/hugo/doks-theme-2/","summary":"\u003cp\u003eUsual code block with usual triple block quote language can also be indicated.\u003c/p\u003e\n\u003ch2 id=\"codeblocks-to-write-code\"\u003eCodeblocks to Write code\u003c/h2\u003e\n\u003ch3 id=\"frames-and-titles\"\u003eFrames and titles\u003c/h3\u003e\n\u003cp\u003eCode block in a window-like frame looking like a terminal with a tag of file name\nusing \u003ccode\u003etoml {title=\u0026quot;..\u0026quot;}\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Doks Theme 2"},{"content":"","date":"2024-10-22","id":18,"permalink":"/personal-site/docs/tools/hugo/","summary":"","tags":[],"title":"Hugo"},{"content":"","date":"2024-10-22","id":19,"permalink":"/personal-site/docs/html-css/css/","summary":"","tags":[],"title":"CSS"},{"content":"","date":"2024-10-22","id":20,"permalink":"/personal-site/docs/tools/","summary":"","tags":[],"title":"Tools \u0026 Accesories"},{"content":"Objective Shell script that runs a command or a series of commands for a fixed set of files. Run a shell script from the command line. Using a shell script that operates on a set of fines defines by the user on the command line. Creating a pipeline that included shell scripts.\nShell Script We are going to take the commands we have repeat frequently and save them in files so that we can re-run all those operations again later by typing a single command. So Shell Scripts are actually small programs.\n$ cd alkanes $ nano middle.sh # creates a file that will contain the command to be run. head -n 15 octane.pdb | tail -n 5 # is typed into the file, saved and closed.\rThis collects the lines 11-15 of the file octane.pdb\nOnce the file is saved in the directory, we can ask the shell(bash) to execute it. bash [filename] runs the commands saved in a file.\n$ bash middle.sh\rTo make the script more versatile we can remove octane and replace it with $1. Which means the first file name(or other argument) on the command line.\nhead -n 15 \u0026#34;$1\u0026#34; | tail -n 5\rIn case filename happens to contain space, $1 is put in \u0026quot;\u0026quot; quotes. Now we can provide different arguments to the script.\n$ bash middle.sh octane.pdb $ bash middle.sh pentane.pdb\rThe text editors ms word, libreoffice are not just basic text editors, the files are .docx. The files also contain also contain formatting information about fonts, headings etc. Commands like head expect only character to be provided so it is better to save script files using plain text editor as plain text.\nTo make sure the numbers for head and tail can be altered by arguments, they can also be taken as $1 $2 $3 in middle.sh.\nhead -n \u0026#34;$2\u0026#34; \u0026#34;$1\u0026#34; | tail -n \u0026#34;$3\u0026#34; $ bash middle.sh pentane.pdb 15 5` # now 15 and 5 are arguments for head and tail $ bash middle.sh pentane.pdb 20 5\rComments To make sure middle.sh is understandable to others on what it does we can add comments which starts with # character and runs to the end of the line which is ignored.\n# Select lines from the middle of a file. # Usage: bash middle.sh filename end_line num_lines. head -n \u0026#34;$2\u0026#34; \u0026#34;$1\u0026#34; | tail -n \u0026#34;$3\u0026#34;\r$@ To process many types of files $ wc -l *.pdb | sort -n\rUsed to sort based on number of lines in the .pdb files, but it only sorts .pdb files and sort -n only sorts numerically.\nWe can use $1 $2 but we might not know how many files there are. Instead we can use $@ which means All of the command-line arguments to the shell script. We should also put it in double quotes to handle spaces in argument \u0026quot;$@\u0026quot;\n$ nano sorted.sh # sort files by their length. # Usage: bash sorted.sh one_or_more_filenames wc -l \u0026#34;$@\u0026#34; | sort -n $ bash sorted.sh *.pdb ../creatures/*.dat For sorting unique Script to find unique species in scv files where species is the second data field. This script accepts any number of file names as a command line arguments. Loops over all files\nfor file in $@ do echo \u0026#34;Unique species in $file:\u0026#34; # Extract species names cut -d , -f 2 $file | sort | uniq done\r","date":"2024-10-22","id":21,"permalink":"/personal-site/docs/linux-terminal/terminal-5-shell-scripting/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003eObjective\u003c/strong\u003e\u003c/em\u003e     \u003cbr /\u003e\nShell script that runs a command or a series of commands for a fixed set of files.    \u003cbr /\u003e\nRun a shell script from the command line.   \u003cbr /\u003e\nUsing a shell script that operates on a set of fines defines by the user on the command line.   \u003cbr /\u003e\nCreating a pipeline that included shell scripts.\u003c/p\u003e","tags":[],"title":"Terminal - 5 Shell Scripting"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap.\nRead How to announce product updates and features ","date":"2023-09-07","id":22,"permalink":"/personal-site/blog/first-blog-post/","summary":"Nothing important to announce, just figuring out things.","tags":[],"title":"First Blog Post"},{"content":"","date":"2023-09-07","id":23,"permalink":"/personal-site/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2024-10-23","id":24,"permalink":"/personal-site/docs/tools/hugo/doks-theme-3/","summary":"","tags":[],"title":"Doks Theme 3"},{"content":"Overview Use grep to select lines from text files that match simple patterns. Use find to find files and directories whose names match simple patterns. Use the output of one command as the command-line argument to another command. Understanding \u0026rsquo;text\u0026rsquo; \u0026amp; \u0026lsquo;binary\u0026rsquo; files, and why many common tools don\u0026rsquo;t handle the latter well.\ngrep grep is short form of \u0026lsquo;global/regular expression/print\u0026rsquo;. A common sequence of operations in Unix text editors. grep finds and prints lines in files that match a pattern.\n$ grep not haiku.txt # gets all lines with `not` in it, doesn\u0026#39;t have to be just this word.\rSearching for a phrase\n$ grep \u0026#34;is not\u0026#34; haiku.txt $ grep \u0026#34;not\u0026#34; haiku.txt # using \u0026#34; \u0026#34; for single word also like for double word makes it easier.\r-w option will limit matches to the word boundaries.\n$ grep -w \u0026#34;The\u0026#34; haiku.txt # nothing else like `Thesis` will be result.\r-n numbers the results with the line numbers.\n$ grep -n \u0026#34;it\u0026#34; haiku.txt $ grep -n -w \u0026#34;the\u0026#34; haiku.txt # combining options.\r-i makes the search case sensitive, the, The, THE\n$ grep -n -w -i \u0026#34;the\u0026#34; haiku.txt\r-v inverts the search, getting all lines without THE\n$ grep -v -n -w \u0026#34;the\u0026#34; haiku.txt\r-r searches recursively through all the files in the directory\n$ grep -r \u0026#34;Yesterday\u0026#34;\rWildcards in grep searches The technical term for these are regular expressions which is the re in grep.\nFinding the lines with words having o in second position.\n$ grep -E \u0026#34;^.o\u0026#34; haiku.txt\r^ in the pattern anchors the match to the start of the line. the . matches a single character (just like ? in the shell), o matches the o using -E allows using the pattern without being interpreted, like if it had *\nso ^.o is ^ from beginning, . after any single character, o and o\u0026hellip;. so o in second place.\nfind While grep finds lines in files find command finds themselves.\n$ find . finds and lists all the files and directories under the current directory.\nFinding and filtering using the options, -type d means \u0026rsquo;things that are directories\u0026rsquo;. So lists only directories. -type f lists all the files only under the current directory and its directories.\n$ find . -type d $ find . -type f\rFinding by name using -name $ find . -name *.txt # this finds files by only in current directory because,\rthe * got expanded before execution of command so what actually got executed was,\n$ find . -name numbers.txt\rSo only that got listed. Putting it in quotes will solve this issue.\n$ find . -name \u0026#34;*.txt\u0026#34;\rnow find will get all .txt files in all directories\nls vs find ls lists everything it can, while find searches for things with certain properties.\nDoing the word count for all the files under the directories by using $()\n$ wc -l $(find . -name \u0026#34;*.txt\u0026#34;)\r$([command]) inserts a command\u0026rsquo;s output in place. So the shell first executes what is inside the ( ) and does rest later.\nwc -l $(find . -name \u0026#34;*.dat\u0026#34;) | sort -n\rFind all .dat files under and in the directory, get word counts for all those files, sort them numerically. ","date":"2024-10-22","id":25,"permalink":"/personal-site/docs/linux-terminal/terminal-6-searching-wildcards/","summary":"\u003cp\u003e\u003cem\u003e\u003cstrong\u003eOverview\u003c/strong\u003e\u003c/em\u003e      \u003cbr /\u003e\nUse \u003ccode\u003egrep\u003c/code\u003e to select lines from text files that match simple patterns.          \u003cbr /\u003e\nUse \u003ccode\u003efind\u003c/code\u003e to find files and directories whose names match simple patterns.     \u003cbr /\u003e\nUse the output of one command as the command-line argument to another command.  \u003cbr /\u003e\nUnderstanding \u0026rsquo;text\u0026rsquo; \u0026amp; \u0026lsquo;binary\u0026rsquo; files, and why many common tools don\u0026rsquo;t handle the latter well.\u003c/p\u003e","tags":[],"title":"Terminal - 6 Searching Wildcards"},{"content":"","date":"2023-09-07","id":26,"permalink":"/personal-site/docs/","summary":"","tags":[],"title":"All Notes Articles"},{"content":"","date":"2024-10-07","id":27,"permalink":"/personal-site/","summary":"","tags":[],"title":"Sujith's Library"},{"content":"Surprised!! Why are you even here?? ","date":"2023-09-07","id":28,"permalink":"/personal-site/privacy/","summary":"\u003ch1 id=\"surprised\"\u003eSurprised!!\u003c/h1\u003e\n\u003ch2 id=\"why-are-you-even-here\"\u003eWhy are you even here??\u003c/h2\u003e","tags":[],"title":"Privacy Policy"},{"content":"","date":"0001-01-01","id":29,"permalink":"/personal-site/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":30,"permalink":"/personal-site/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":31,"permalink":"/personal-site/tags/","summary":"","tags":[],"title":"Tags"}]