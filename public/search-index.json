[{"content":"","date":"2024-12-17","id":0,"permalink":"/personal-site/docs/python/1data-types/primitive-types/","summary":"","tags":[],"title":"Primitive Types"},{"content":"Variables and Simple Data Types Better to think of variables as labels to values or referencing a certain value rather than a storage container. Variables can contain letters, numbers and _ as names. Number cannot be used in the beginning, space is not allowed.\n(Traceback is a record of where the interpreter ran into trouble when trying to execute the code.)\nPython Keywords Each of the following keywords has a specific meaning, you\u0026rsquo;ll see an error if you try to use any of them as a variable name.\nFalse await else import pass None break except in raise True class finally is return and continue for lambda try as def from nonlocal while assert del global not with async elif if or yield\rPython Built-in Functions You won\u0026rsquo;t get an error if you use one of the following readily available built-in functions as a variable name, but you\u0026rsquo;ll override the behavior of that function:\nabs() complex() hash() min() slice() aiter() delattr() help() next() sorted() all() dict() hex() object() staticmethod() any() dir() id() oct() str() anext() divmod() input() open() sum() ascii() enumerate() int() ord() super() bin() eval() isinstance() pow() tuple() bool() exec() issubclass() print() type() breakpoint() filter() iter() property() vars() bytearray() float() len() range() zip() bytes() format() list() repr() __import__() callable() frozenset() locals() reversed() chr() getattr() map() round() classmethod() globals() max() set() compile() hasattr() memoryview() setattr()\rMultiple assignments Number of variables should match number of values.\nx, y, z = 0, 1, 2\nConstants No built in constant type, so using all caps MAX_CONNECTION= 5000\n# \u0026gt;\u0026gt;\u0026gt; import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren\u0026#39;t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you\u0026#39;re Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it\u0026#39;s a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let\u0026#39;s do more of those!\r","date":"2024-12-17","id":1,"permalink":"/personal-site/docs/python/1data-types/primitive-types/variables/","summary":"\u003ch2 id=\"variables-and-simple-data-types\"\u003eVariables and Simple Data Types\u003c/h2\u003e\n\u003cp\u003eBetter to think of variables as labels to values or referencing a certain value rather than a storage container.\nVariables can contain letters, numbers and \u003ccode\u003e_\u003c/code\u003e as names.\nNumber cannot be used in the beginning, space is not allowed.\u003c/p\u003e","tags":[],"title":"Variables"},{"content":"","date":"2024-10-22","id":2,"permalink":"/personal-site/docs/python/","summary":"","tags":[],"title":"Python"},{"content":"Int x = 1 y = 2 z = x + y print(z)\rMaking it interactive with input()\nx = input (\u0026#34;whats x? \u0026#34;) y = input (\u0026#34;whats y? \u0026#34;) z = x + y print (z)\rAny input from keyboard is treated as a string. For input 2 and 2, output will be 22 as + is concatenating both numbers because they are treated as strings.\nint isn\u0026rsquo;t just a data type but also a function which can convert 2 from str type to int type. int() can be used to correct by converting them to integers.\nx = int(input (\u0026#34;whats x? \u0026#34;)) y = int(input (\u0026#34;whats y? \u0026#34;)) print(x+y)\rArgument moves from inner function, becomes input to outer function\nprint ( int( input(\u0026#34;whats x? \u0026#34;)) + int(input(\u0026#34;whats y? \u0026#34;)))\rOne line but very complicated and clever for its own good.\nFloat 4.1 is a float float - is any number with a decimal point\nwhen two numbers are divided, even if the result is a whole number, program always gives a float (2.0). any operation b/w float and int will be a float. large numbers can be made more readable by using _ , (1_00_00_000) python will only print the digits. Round number to a nearest digit\nround(number[, ndigits]) # [] code in square brackets means optional\rround means just one number, but if more is needed then it can be specified.\nRounding to a nearest number\nx = float (input (\u0026#34;whats x? \u0026#34;)) y = float (input(\u0026#34;whats y? \u0026#34;)) z = round ( x + y ) print (z) print ( f\u0026#34; {z:,} \u0026#34; ) # creating a f-string argument and then applying {z:,} makes the number have comma # there isnt an upper bound on how large an int can be but float can get cut off into finite digits z = round(x / y, 2) # 2 in the argument of z allows rounding to nearest 2 decimals z = x/y print ( f\u0026#34;{z:.2f}\u0026#34; ) # by converting it into an f-strinf, format string i can round the result decimal to 2\rArithmetic Operators It always better to use () for suggesting order of operations.\n% reminder / modulo operator // quotient == != \u0026lt;= \u0026gt;= ** exponent\r% is modulo operator which allows taking the reminder after dividing a number. 3**2 is representing exponents.\n","date":"2024-12-17","id":3,"permalink":"/personal-site/docs/python/1data-types/primitive-types/int-float/","summary":"\u003ch2 id=\"int\"\u003eInt\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ez\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eMaking it interactive with \u003ccode\u003einput()\u003c/code\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003einput\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;whats x? \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003einput\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;whats y? \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ez\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ez\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eAny input from keyboard is treated as a string.\nFor input 2 and 2, output will be 22 as + is concatenating both numbers because they are treated as strings.\u003c/p\u003e","tags":[],"title":"int \u0026 float"},{"content":"String str is a series/sequence of characters, Anything inside a \u0026quot; \u0026quot; or ' ' is considered a string in python.\nThis allows for using quotes inside apostrophes within a string \u0026quot; ' ' \u0026quot; A single character is indistinguishable from a string of length 1 in python.\nAvoiding syntax error with strings A Syntax error occurs when Python doesn\u0026rsquo;t recognize a section of your program as valid Python code. If you use an apostrophe within single quotes, you\u0026rsquo;ll produce an error. This happens because Python interprets everything between the first single quote and the apostrophe as a string. It then tries to interpret the rest of the text as Python code, which causes errors.\nTo use actual \u0026quot; \u0026quot; quotation marks inside. (outside and inside can be different to work).\nprint(\u0026#34;hello,\u0026#39;friend\u0026#39;\u0026#34;) print(\u0026#39;hello, \u0026#34;friend\u0026#34;\u0026#39;) print(\u0026#34;hello, \\\u0026#34;frined\\\u0026#34;\u0026#34;)\rEscaping \\ represents an escape character, as its only used with multiple characters. We can also use \\' the back slash indicates that this quote has to be taken as a symbol, not as end of a string.\n\u0026#39;Chennai\u0026#39; \u0026#34;Hitchhiker\u0026#39;s Guide to the Galaxy\u0026#34; \u0026#39;\u0026#39;\u0026#39; He said his favorite book is \u0026#34;Hitchhiker\u0026#39;s guide to the Galaxy\u0026#34; \u0026#39;\u0026#39;\u0026#39;\rf-strings f-string or format string to run format the string in a different way. By putting {} for the variable and f before \u0026quot;\u0026quot; to say its a f-string, format string. To insert variables into a string, place letter f immediately before quotation marks, then python formats the string by replacing the name of variable in {} with its values\nname = input(\u0026#34;whats the name? \u0026#34;) print(f\u0026#34;hello, {name}\u0026#34;) # using variables in strings (using f-string, format strings) full_name = f\u0026#34;{first} {last}\u0026#34; print( f\u0026#34;Hello, {full.title()} !\u0026#34; )\r","date":"2024-12-17","id":4,"permalink":"/personal-site/docs/python/1data-types/primitive-types/string/","summary":"\u003cp\u003eString \u003ccode\u003estr\u003c/code\u003e is a series/sequence of characters,\nAnything inside a \u003ccode\u003e\u0026quot; \u0026quot;\u003c/code\u003e or \u003ccode\u003e' '\u003c/code\u003e is considered a string in python.\u003c/p\u003e","tags":[],"title":"String"},{"content":"Basic String manipulation Combining two strings / Concatenation \u0026ldquo;+\u0026rdquo; \u0026ldquo;+\u0026rdquo; concatenates the two strings like a text, its just one argument\nname = input (\u0026#34;wht is \u0026#34;) print(\u0026#34;hello \u0026#34;+ name) s = \u0026#34;hello\u0026#34; t = s + \u0026#34;, there\u0026#34;\r\u0026quot; , \u0026quot; creates two arguments. The default parameters of print function adds a space between arguments.\nprint(\u0026#34;hello\u0026#34;, name)\rsep=' ' is the space between the arguments and end=\u0026quot;\\n\u0026quot; is a new line at the end.\nprint(\u0026#34;hello\u0026#34;, name, sep=\u0026#34;\u0026#34;, end=\u0026#34;\\n\\n\\n\u0026#34;)\rThis has no space and 3 extra lines.\nAdding White Space White space refers to non printing characters. Adding white space to strings with tabs or newlines \\t to add tab to the text. \\n to add a new line in a string\nprint( \u0026#34;\\tpython\u0026#34;)\rpython\r\\n \\t tells python to move to new line and start with tab space.\nprint( \u0026#34;Languages:\\nPython\\nJava\\nJava Sricpt\u0026#34; )\rPython\rJava\rJava Sricpt\rprint(\u0026#34;Continue on the\u0026#34;, end = \u0026#34; \u0026#34; ) # no new line print(\u0026#34;same line\u0026#34;, end= \u0026#34;.\\n\u0026#34;) print(\u0026#34;Next line.\u0026#34;)\rContinue on the same line.\rNext line.\rGetting to individual characters str is a sequence or list of characters. Positions are 0, 1, 2, . .n-1 for string of length n. -5, -4, -3, -2, -1 to count backwards.\nS = \u0026#34;hello\u0026#34; S[1] = \u0026#34;e\u0026#34; S[-1] = \u0026#34;o\u0026#34; S[-2] = \u0026#34;l\u0026#34;\rs = \u0026#34;hello\u0026#34; t = \u0026#34;there\u0026#34; s+t = \u0026#34;hellothere\u0026#34; len(s) # returns length of s\rExtracting Sub-strings and Slices Slice is a segment of a string.\ns = \u0026#34;hello\u0026#34; s[1:4] # is \u0026#34;ell\u0026#34; as slice stops before the last number s[:j] # starts from 0 and ends at j-1 s[i:] # i onwards till the end\rModifying strings Strings are Immutable values, We cannot update a string in place.\nThey cannot be changed directly without creating another value.\ns = \u0026#34;hello\u0026#34; # to change it to \u0026#34;help\u0026#34; s[3] = \u0026#34;p\u0026#34; # will cause error # instead, use slices and cocatination s = \u0026#34;hello\u0026#34; s = s[0:3] + \u0026#34;p!\u0026#34; s = \u0026#34;help!\u0026#34;\rRemoving a letter from index and adding to new string Using += (reverse of =+ as in int)\nmerged = \u0026#34;\u0026#34; word1 = \u0026#34;abcdef\u0026#34; merged += word1[0] merged += word1[1] # merged = \u0026#34;ab\u0026#34;\rMaking a list of individual strings from a string word1 = \u0026#34;abcdef\u0026#34; ind = list(word1) print(ind) # [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;]\rJoining a list of strings Recombining a list of strings using a separator\nseperator.join(list of strings) columns = [\u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;] # has list of strings joiningstring = \u0026#34;,\u0026#34; # this will be the seperator csline = joiningstring.join(columns) # \u0026#34;,\u0026#34;.join(columns) date = \u0026#34;16\u0026#34; month = \u0026#34;08\u0026#34; year = \u0026#34;2016\u0026#34; # the seperator can be directly given as in \u0026#34;_\u0026#34; today = \u0026#34;_\u0026#34;.join( [date, month, year]) Using of set to have unique entries Set creates a list of only unique characters, no repeats.\nword1 = \u0026#34;abababab\u0026#34; ind = set(word1) print(ind) # {\u0026#39;b\u0026#39;, \u0026#39;a\u0026#39;} returns a dict? # set doesnt provide indexing!! or any order # make a list and pass or pass str directly, gives same result\r","date":"2024-12-17","id":5,"permalink":"/personal-site/docs/python/1data-types/primitive-types/string-manipulation/","summary":"\u003ch2 id=\"basic-string-manipulation\"\u003eBasic String manipulation\u003c/h2\u003e\n\u003ch4 id=\"combining-two-strings--concatenation-\"\u003eCombining two strings / Concatenation \u0026ldquo;+\u0026rdquo;\u003c/h4\u003e\n\u003cp\u003e\u0026ldquo;+\u0026rdquo; concatenates the two strings like a text, its just one argument\u003c/p\u003e","tags":[],"title":"String Manipulation"},{"content":"String Methods Method is a function that is built into a function used to perform actions on a piece of data. They are followed by a () parenthesis, as they may need additional data to work. (need to check documentation for more)\nChanging Case using upper, lower, swapcase, title, capitalize Cleaning rstrip, lstrip, strip, removeprefix, removesuffix Searching for text find, index Search and replace replace Splitting strings using split Resizing strings center, ljust, rjust checking the nature of string characters isalpha, isnumeric\nChanging case title will capitalize each words first letter\nvariable.title() print(variable.title())\r. after the variable tells python to act title() method on it.\nvariable.upper() variable.lower() variable.swapcase() lower() method is very useful while storing user input data. swapcase turns upper to lower, lower to upper\nTo adjust the miss typed spacing in a string and capitalization\nname = name.capitalize() # to capitalize first letter name = name.title() # to create title format name = name.title().strip() name = name.strip() # to remove spaces on left and right\rEverything is in one line\nname = input(\u0026#34;whats your name? \u0026#34;).title().strip() print(f\u0026#34;hello, {name}\u0026#34;+ \u0026#34;sss\u0026#34;, name, sep=\u0026#39; \u0026#39;, end=\u0026#34;\\n\u0026#34;) name = input(\u0026#34;please type in your name, \u0026#34;).strip().title()\rStripping white space / Removing Prefix When comparing two values, having one extra white space might mean not equal to another similar value. So it is better to handle white space before storing data. To remove white space permanently it is better to associate it with a variable name.\nvariable.rstrip() variable.lstrip() variable.strip()\r# removing Prefixes url = \u0026#39;https://nostarch.com\u0026#39; url.removeprefix(\u0026#39;https://\u0026#39;) # within the parenthesis() enter the prefix to be removed from the original string url.removesuffix(\u0026#39;.com\u0026#39;)\rSearching for text Returns first position in s where \u0026lsquo;pattern\u0026rsquo; occurs, returns -1 if not found\ns.find(pattern) s.find(pattern, start, end)\rSpecifying starting and ending position searches in that slice not the whole file. Searching for \u0026ldquo;pattern\u0026rdquo; in slice s[start:end]\nSimilar to find, but raises ValueError when pattern not found\ns.index(pattern) s.index(pattern, start, end)\rSearching and replace Returns a copy of s where fromstr is replaced by tostr Copy of s because strings are immutable, cannot be changed in place.\ns.replace(fromstr,tostr) s.replace(fromstr, tostr, n)\rReplaces at most n copies and returns a copy of the string s.\nSplitting a string Split methods in strings which splits string to many sub strings, each part can be assigned a variable so only one can be called. .split(\u0026quot; \u0026quot;) argument says divide the name at single space.\nfirst, last = name.split(\u0026#34; \u0026#34;) print(f\u0026#34;hey, {first}\u0026#34;, \u0026#34;How are you\u0026#34;, end=\u0026#34;\\n\u0026#34;, sep=\u0026#34;,\u0026#34;) print(\u0026#34;hey,\u0026#34;, first, emote = input(\u0026#34;how are you? \u0026#34;) )\rExported spreadsheet becomes CSV \u0026ldquo;comma separated value\u0026rdquo; text file. each column separated by a comma, s.split() takes an argument for where to split the string (a separator string) and will return a list of strings\ncolumns = s.split(\u0026#34;,\u0026#34;) # splits wherever , is found columns = s.split(\u0026#34; : \u0026#34;, n) # to make at most n chunks\rcsline = \u0026#34;6,7,8\u0026#34; csvline.split(\u0026#34;,\u0026#34;) # [\u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;] csvline.split(\u0026#34;,\u0026#34; ,1) # [\u0026#39;6\u0026#39;, \u0026#39;7,8\u0026#39;] csline =\u0026#34;6#?7#?8\u0026#34; csline.split(\u0026#34;#?\u0026#34;) # [\u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;] # the seperator string has to be uniform\rResizing strings Will return a string of length n, with string s at center. Rest of the place will be blank or it can be filled with some characters.\ns.center(n) s.centre(n, \u0026#34;*\u0026#34;) # rest are filled with * s.ljust(n) # left justify the srting s s.ljust(n, \u0026#34;*\u0026#34;) s.rjust(n) # right justify the string s s.rjust(n, \u0026#34;*\u0026#34;)\rChecking nature of characters in a string s.isalpha() # to check if all are alphabetical s.isnumeric() # to check if all are numbers\r","date":"2024-12-17","id":6,"permalink":"/personal-site/docs/python/1data-types/primitive-types/string-methods/","summary":"\u003ch2 id=\"string-methods\"\u003eString Methods\u003c/h2\u003e\n\u003cp\u003eMethod is a function that is built into a function used to perform actions on a piece of data.\nThey are followed by a \u003ccode\u003e()\u003c/code\u003e parenthesis, as they may need additional data to work.\n(need to check documentation for more)\u003c/p\u003e","tags":[],"title":"String Methods"},{"content":"","date":"2024-12-17","id":7,"permalink":"/personal-site/docs/python/1data-types/complex-types/","summary":"","tags":[],"title":"Complex Types"},{"content":"Lists (Linked Lists) Lists are collection of items in a particular order, it allows storing information in one place. Better to make their name plural as they contain more than one item. Printing a list returns even [] and ,'','',\nThe values are scattered in memory, not in one particular place or sequence. Even the elements can be of different kind.\nTo identify the position, each element is liked to the subsequent element with logic. The size isn\u0026rsquo;t fixed so it is flexible.\nTo index or reach an element seq[i], We have to go through all the elements as there is no specific place. So cost is proportional to i itself (not constant time)\nInserting or deleting (Plumbing) an element is easy, as just the links of few have to be changed.\nCost of Operations Exchanging of two elements in a list it is linear time a array is constant time\ndeletion or insertion of elements is linear time in arrays is constant time in lists\nAccessing Lists Lists are sequence of values\nfactors = [ 1,2,3,4,10] names [\u0026#34;anand\u0026#34;, \u0026#39;charles\u0026#39;]\rIt can also be made of mixed types, this is allowed.\nmixed = [ 3, True, \u0026#34;Yellow\u0026#34;]\rLists are ordered collection, they can be accessed by telling it\u0026rsquo;s position or index of the item.\nprint(cycles[0].title()) # index possitions starts at 0, not 1 # last item in the list can be accessed by asking [-1] item of a list # [-2] [-3] also work in getting values from the end\rIt also has positions similar to str, so position and slices can be extracted\nfactors[3] = 10 mixed[0:2] = [3, True] len(factors) = 5\rIn a string a character is indistinguishable from a slice of one\nh = \u0026#34;hello\u0026#34; h[0] == h [0:1] == \u0026#34;h\u0026#34; # this is not true with lists factors = [ 1,2,3,4,10] factors[1] == 1 # gives a value factors[0:1] == [1] # gives a list # both are not same\rUsing individual values from a list using fstring\nmessage = f\u0026#34;my firt cycle was a {cycles[0].title()}.\u0026#34; print(message) or print (f\u0026#34;my firt cycle was a {cycles[0].title()}.\u0026#34;)\rNested Lists # Lists can contain other lists nested = [ [2, [37]], 4, [\u0026#34;hello\u0026#34;] ] nested[0] is [2, [37]] nested[1] is 4 nested[2][0][3] is \u0026#34;l\u0026#34; #2nd possition, in 1st place, 3rd value nested[0][1:2] is [[37]] # slice gives a list\rUpdating Lists / Mutable # Unlike strings, lists can be updated in place nested = [ [2, [37]] , 4, [\u0026#34;hello\u0026#34;] ] nested[1] = 7 nested = [ [2, [37]] , 7, [\u0026#34;hello\u0026#34;] ] nested[0][1][0] = 19 nested = [ [2, [19]] , 4, [\u0026#34;hello\u0026#34;] ]\rMutable vs Immutable x = 5 y = x x = 7 y == 5 # true, because y did not change\rx and y are not pointing to the same value. When \u0026lsquo;x\u0026rsquo; was assigned to \u0026lsquo;y\u0026rsquo; a fresh copy was made with the value of 5. This happens whenever immutable values are changed, like int, float, bool, string. Updating one value does not affect the other value because a fresh copy was made, not pointing to that value.\nFor mutable values like lists, assignment does not make a fresh copy\nlist1 = [1,3,5,7] list2 = list1 list1[2] = 4 # then list2 also changes\rlist1 and list2 are two names for the same list, there is no fresh copy\nCopying Lists list2 = list1 # doesnt make a new one list2 = list1[:] # makes a new list,\rSo changes to list2 doesn\u0026rsquo;t affect list1, both are disjoint. Omitting both end points is called a full slice. Slice creates a new list from old list\nl[:k] is l[0:k] l[k:] is l[k:len(l)] l[:] is l[0:len(l)]\rDigression on equality list1 and list2 are two separate lists with same value. list2 and list3 are same list with 2 different names.\nx == y checks if x and y have same value x is y checks if x and y point to the same object list1 = [1,3,5,7] list2 = [1,3,5,7] list3 = list2 list1 == list2 # True list2 == list3 # True list1 is list2 # False list2 is list3 # True\rConcatenation list1 = [1,3,5,7] list2 = [4,5,6,8] list3 = list1 + list2 list3 = [1,3,5,7,4,5,6,8] Concatination \u0026#39;+\u0026#39; always produces a new list list1 = [1,3,5,7] list2 = list1 # pointing to same object list1 = list1 + [9] # made a new list list1 = [1,3,5,7,9] list2 = [1,3,5,7] # not pointing to same object anymore\rIndex Error Index Error while working with lists, trying to print the 4th item in a list with 3 items.\nprint(bikes[3]) # [3] is 4th item\rtrying to print from a empty list. for the last item [-1] can be used.\n","date":"2024-12-17","id":8,"permalink":"/personal-site/docs/python/1data-types/complex-types/lists/","summary":"\u003ch2 id=\"lists-linked-lists\"\u003eLists (Linked Lists)\u003c/h2\u003e\n\u003cp\u003eLists are collection of items in a particular order, it allows storing information in one place.\nBetter to make their name plural as they contain more than one item.\nPrinting a list returns even \u003ccode\u003e[]\u003c/code\u003e and \u003ccode\u003e,'','',\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Lists"},{"content":"Simple statistics with List of numbers\ndigits = [1, 4, 9, 16, 25, 36, 49] min(digits) max(digits) sum(digits)\rrange range from 0 to len(l)\nrange(i, j) # produces sequence i, i+1, ..., j-1 range(j) # is like slice(:j) automatically starts from 0, till j-1 range() has a third argument which is increment, default will be +1 Range with certain pattern/sequence of increment like AP\nrange(i,j,k) # where k is increment of each element # i, i+k, i+2k..., i+nk Reverse counting by making k negative\nrange(i, j, -1) # i has to be larger than j, i\u0026gt;j Range and list\nrange(0, len(l)) # produces correct range of valid indices\rrange(0,10) is not a list like [0, 1...,9], but by using list() type to convert range() to a list.\nlist(range(0,5)) == [0,1,2,3,4]\rRange, skipping numbers\neven = list(range(2, 11, 2)) # starts from 2, adds 2 to the value and stops at 11 print (even) # [2, 4, 6, 8, 10]\rlist.append() / list.extend() / list.insert() Adding elements to a list in place can be done by \u0026ldquo;append\u0026rdquo;, doesn\u0026rsquo;t make a new list.\nlist.append(v) # takes a single value as argument and extends the list list1.extend(list2) # takes a list as an argument and extends the list # similar to list1 = list1 + list2\rlist1 is an object, append() is a function that updates the object\nlist1.append(x)\rlist1 = [1,3,5,6] list2 = list1 list1 = list1.append(22) list2 = [1,3,5,6,22] list1 = [1,3,5,6,22] # old list got updated\rCan also assign values to a slice in a list\nlist1 = [1,3,5,6] list2 = list1 list1[2:] = [7,8] list1 = list2 = [1,3,7,8] # same list got updated Expanding and Shrinking\nlist1 = [1,3,7,8] list1[2:] = [9,10,11,12] # produces [1,3,9,10,11,12] # 7,8 got removed, and extended list[0:3] = [7] # produces [7,11,12] # but needs careful implimentation\rInserting elements at any position using insert() method, specifying the index and value.\nmotorcycles.insert(0, \u0026#39;ducati\u0026#39;) # other values are shifted to the right\rRemoving Values Removes the FIRST Occurrence of x, not all. Value error if no x exists.\nlist.remove(x) List membership/ checking if a value exists in list. returns True if value of x is found in the list.\nx in l Safely removing x after checking\nif x in list: list.remove(x)\rRemoving all occurrences of x from a list using while loop. Loops till there is l in list\nwhile x in list: list.remove(x)\rRemoving an item by value by using remove() method\nexpensive = \u0026#39;ducati\u0026#39; motorcycles.remove(\u0026#39;ducati\u0026#39;) motorcycles.remove(expensive) print(f\u0026#34;\\nA {expensive.title()} is too expensive for me.\u0026#34;)\rremove() method deletes only first occurrence of the specified value, loop can be used to remove all instances.\nUsing the del statement, by giving the index of a value\ndel motorcycle[0] # to remove the first item\rpop pop() method can be used to retain a value after it is deleted to see it.\nThe pop() method removes the last item in a list, but it lets you work with that item after removing it. bikes = motorcycles.pop() The last value of motorcycles is popped and moved to bikes, so even after removing we have access to that value. Popping elements from any position by including the index first_owned = motorcycles.pop(0)\nTo get the x and y position of an alien, so you can draw an explosion at that position. In a web application, you might want to remove a user from a list of active members and then add that user to a list of inactive members.\nOther functions l.reverse() l.sort() l.index(x) l.rindex(x)\rbetter to check documentation\nSorting Sorting a List permanently with the sort() function, sorting them alphabetically.\ncars.sort() cars.sort(reverse=True) # reverse sorting\rSorting a list temporarily with sorted() function. sorted() function lets you display your list in a particular order but doesn\u0026rsquo;t affect the actual order of the list.\ncars = [\u0026#39;bmw\u0026#39;, \u0026#39;audi\u0026#39;, \u0026#39;toyota\u0026#39;, \u0026#39;subaru\u0026#39;] print(sorted(cars)) # values will be sorted print(cars) # the values will be in same order\rPrinting in reverse order. it doesn\u0026rsquo;t sort backward alphabetically, it just reverses the order of the list changes the order permanently.\ncars.reverse()\rFinding the Length of a List using len() function\nlen(cars) # 4\r","date":"2024-12-17","id":9,"permalink":"/personal-site/docs/python/1data-types/complex-types/list-methods/","summary":"\u003cp\u003eSimple statistics with List of numbers\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003edigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e36\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e49\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"range\"\u003erange\u003c/h2\u003e\n\u003cp\u003erange from 0 to \u003ccode\u003elen(l)\u003c/code\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# produces sequence i, i+1, ..., j-1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e     \u003cspan class=\"c1\"\u003e# is like slice(:j) automatically starts from 0, till j-1  \u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003erange()\u003c/code\u003e has a third argument which is increment, default will be +1  \u003c/p\u003e","tags":[],"title":"List Methods"},{"content":"Operations on lists for x in l: x = f(x) def applylist(f,l): for x in l: x = f(x)\rmap( ) Built in function to apply something to all the elements of l. map(f, l) applies f to each element of l (entire list) output of map(f, l) is not a list but a sequence like range(i, j) and dict.keys( )\nSo for i in map(f, l): can be used for iterating it can be made into a list by using list() as list(map(f, l))\nfilter( ) filter(p, l) checks p property for each element of l, output will be a sub-list of values that satisfy p.\nSelecting a sub-list in a list using filter( )\nprimelist = [] for i in numberlist: if isprime(i): # checking if i is prime primelist.append(i) # appending if True return(primelist)\rIn general, def select(property, l): sublist = [] for x in l: if property(x): sublist.append(x) return(sublist) # property is a function that returns True or False for each element Combining map() and filter() # sum of squares of even numbers from 0 to 99 def square(x): return( x*x ) def is_even(x): return(x%2 == 0) list ( map( square, filter (is_even, range(100 ))))\rFilter even numbers from 0 to 100\rapply square to these numbers\rmade into a list\rsum can be made using the list\rList comprehension Pythagorean triple: x^2 + y^2 = z^2 All Pythagorean triples (x, y, z) with values below n\n{(x, y, z) | 1\u0026lt;= x, y, z \u0026lt;=n , x^2 + y^2 = z^2} in x, y, z (such that) x, y, z lie b/w 1 and n, and x^2 + y^2 = z^2. In set theory, this is called \u0026ldquo;set comprehension\u0026rdquo; building a new set from existing sets, this can be extended to lists\n# square of even numbers below 100 [square(x) for i in range(100) if is_even(x)] map generator filter\rthis is how a sub-list is made without using the words map or filter.\nPythagorean triples with x,y,z below 100\n[ (x,y,z) for x in range(100) for y in range (100) for z in range (100) if x*x + y*y = z*z] #Order of x,y,z is like a nested loop, so the generator can be for x in range(100): for y in range(100): for z in range(100): # this will produce copies (3,4,5) and (4,3,5) and values with 0 which isnt a triangle # Change the generator such that later generator depends on the earlier ones print ([ (x,y,z) for x in range(1,100) # x starts from 1 for y in range(x,100) # y is not less than x for z in range(y,100) # z is not less than y if x*x + y*y == z*z ] )\r(x, y, z) is mapping for x, y, z are generators if ___ is filter\noutput\r[(3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25), (8, 15, 17), (9, 12, 15), (9, 40, 41), (10, 24, 26), (11, 60, 61), (12, 16, 20), (12, 35, 37), (13, 84, 85), (14, 48, 50), (15, 20, 25), (15, 36, 39), (16, 30, 34), (16, 63, 65), (18, 24, 30), (18, 80, 82), (20, 21, 29), (20, 48, 52), (21, 28, 35), (21, 72, 75), (24, 32, 40), (24, 45, 51), (24, 70, 74), (25, 60, 65), (27, 36, 45), (28, 45, 53), (30, 40, 50), (30, 72, 78), (32, 60, 68), (33, 44, 55), (33, 56, 65), (35, 84, 91), (36, 48, 60), (36, 77, 85), (39, 52, 65), (39, 80, 89), (40, 42, 58), (40, 75, 85), (42, 56, 70), (45, 60, 75), (48, 55, 73), (48, 64, 80), (51, 68, 85), (54, 72, 90), (57, 76, 95), (60, 63, 87), (65, 72, 97)]\rInitializing a matrix Shortcuts to make n x n matrix\n# 1st r = [[0] * n for _ in range(n)] # 2nd for _ in range(0,n): r.append([0]*n)\rmatrix of 4 x 3, 4 rows 3 columns\nl = [ [0 for i in range(3)] for j in range(4) ] # the outer (for) is for each row, the inner for is something that is done #output l = [ [0,0,0], [0,0,0], [0,0,0], [0,0,0] ]\rWrong method because, each first index got changed as each row is a same list (zerolist)\nzerolist = [0 for i in range(3)] l = [ zerolist for j in range(4)] l[1][1] = 7 l = [0,7,0],[0,7,0],[0,7,0],[0,7,0]\r","date":"2024-12-17","id":10,"permalink":"/personal-site/docs/python/1data-types/complex-types/list-operators/","summary":"\u003ch2 id=\"operations-on-lists\"\u003eOperations on lists\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eapplylist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003el\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"map-\"\u003e\u003ccode\u003emap( )\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eBuilt in function to apply something to all the elements of \u003ccode\u003el\u003c/code\u003e.\n\u003ccode\u003emap(f, l)\u003c/code\u003e applies \u003ccode\u003ef\u003c/code\u003e to each element of \u003ccode\u003el\u003c/code\u003e (entire list)\noutput of \u003ccode\u003emap(f, l)\u003c/code\u003e is not a list but a sequence like \u003ccode\u003erange(i, j)\u003c/code\u003e and \u003ccode\u003edict.keys( )\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"List Operators"},{"content":"Arrays They are a single block of memory, continuous without any gap in between. Elements are of same type, present in a sequence. The size of an array is also fixed in advance.\n(Random Access) Accessing/Indexing seq[i] is constant time for any i, takes same time for any element in any place. Having the address and jumping to that possition.\nInserting between two elements, seq[i] and seq[i+1] is expensive. Removing/contraction is also expensive because all elements are indexed, to create a new index in the middle or remove the rest of the elements have to be changed also.\nPython lists behave more like arrays than lists\rUnderlying interpretation maps the lists an array\rassign a block when you create a list\rDouble the size if the list overflow the array\rKeep track of the last position of the list in the array\rl.append() and l.pop() are constant time, amortised - O(1) constant time\rInsertion/deletion require time O(n)\rnumpy array implementation Arrays are more useful for representing matrices (to represent graphs) In list notation, these are nested lists [ [0,1], [1,0] ]\n# list comprehension zeromatrix = [ [ 0 for i in range(3)] for j in range(3) ] # This is the way of making matrix using lists, no direct way\rThe Numpy library provides arrays as a basic type\nInport numpy as np zeromatrix = np.zero(shape = (3,3)) # can create an array from any sequence type newarray = np.array( [ [0,1], [1,0]]) # arange is the equivalent of range for lists row2 = np.arange(5) # can operate on a matrix as a whole C = 3*A + B C = np.matmu(A,B) # matmu is matrix multiplication\r","date":"2024-12-17","id":11,"permalink":"/personal-site/docs/python/1data-types/complex-types/arrays/","summary":"\u003ch2 id=\"arrays\"\u003eArrays\u003c/h2\u003e\n\u003cp\u003eThey are a single block of memory, continuous without any gap in between.\nElements are of same type, present in a sequence.\nThe size of an array is also fixed in advance.\u003c/p\u003e","tags":[],"title":"Arrays"},{"content":"tuple( ) can be a string of values It behaves like a list or string, can extract values.\nUsed as simultaneous assignments\n(age, name, primes) = ( 23, \u0026quot;Kamal\u0026quot;, [2, 3, 5, 7] ) can assign a \u0026ldquo;tuple\u0026rdquo; of values to a name (similar to a list of values)\npoint = (3.5, 4.8) date = (16,7,2023)\nValues in position can be extracted, and slices also xcoordinate = point[0] monthyear = date[1: ]\nBut tuples are immutable (the values cannot be changed in place) date[1] = 8 will be an error.\n","date":"2024-12-17","id":12,"permalink":"/personal-site/docs/python/1data-types/complex-types/tuples/","summary":"\u003cp\u003e\u003ccode\u003etuple( )\u003c/code\u003e\ncan be a string of values\nIt behaves like a list or string, can extract values.\u003c/p\u003e\n\u003cp\u003eUsed as simultaneous assignments\u003cbr\u003e\n\u003ccode\u003e(age, name, primes) = ( 23, \u0026quot;Kamal\u0026quot;, [2, 3, 5, 7] )\u003c/code\u003e\n \n can assign a \u0026ldquo;tuple\u0026rdquo; of values to a name (similar to a list of values)\u003cbr\u003e\n \u003ccode\u003epoint = (3.5,  4.8)\u003c/code\u003e\n\u003ccode\u003edate = (16,7,2023)\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Tuples"},{"content":"Dictionary is a collection of key-value pairs. each key is connected to a value, and key can be used to access a value. It is wrapped in {} , key connected to value by : , and each key-value pair is separated by , a = {\u0026quot;colour\u0026quot; : \u0026quot;green\u0026quot;, \u0026quot;points\u0026quot; : 5 }\nDictionary A list l = [13, 24, 54, 77, 33]\rValues are associated to positions {0,1,2,3,4}, so 0,1,2,3,4 are keys which can be used to access corresponding values. But no specific key can be defined other than these, which are auto assigned.\ntest1 = {} test1 [\u0026#34;dhawan\u0026#34;] = 84 test1 [\u0026#34;Pujara\u0026#34;] = 16\rDictionaries, allows keys other than range(0,n),\tKey could be any immutable values (int, float, bool, string, tuple), it cannot be (list, dict), they can be updated in place like lists. (called dictionaries in python, associative array in other languages)\nEmpty dictionary is {}, not [] which is a list, test1 = () is empty tuple\nAdding new key-value pairs. To add a new key-value pair, give the name of the dict folowed by new key in [] along with new value.\na[\u0026#34;x\u0026#34;] = 0 a[\u0026#34;y\u0026#34;] = 25 a = {\u0026#34;colour\u0026#34;:\u0026#34;green\u0026#34;, \u0026#34;points\u0026#34;:5, \u0026#34;x\u0026#34;:0, \u0026#34;y\u0026#34;:25} # starting with an empty dictionary and then adding each new item to it a = {}\rNested dictionaries\n# there can be multiple keys for a given value score = {} score[\u0026#34;Test1\u0026#34;] = {} score[\u0026#34;Test2\u0026#34;] = {} score[\u0026#34;Test1\u0026#34;][\u0026#34;Dhawan\u0026#34;] = 84 score[\u0026#34;Test1\u0026#34;][\u0026#34;Kohli\u0026#34;] = 200 score[\u0026#34;Test2\u0026#34;][\u0026#34;Dhawan\u0026#34;] = 50 print(score) # simplified score = { \u0026#34;Test1\u0026#34;: { \u0026#34;Dhawan\u0026#34;:84, \u0026#34;Kohli\u0026#34;:200}, \u0026#34;Test2\u0026#34;:{ \u0026#34;Dhawan\u0026#34;: 50 } }\rUsing get() to Access Value\nget() method can be used to set a default value if the requested key doesn\u0026rsquo;t exist. It requires a key as first argument, a second optional argument if key doesn\u0026rsquo;t exist.\nIf there is a chance that the value you might be asking doesn\u0026rsquo;t exist, use get() Even if second value is left blank, \u0026ldquo;None\u0026rdquo; will be returned, indicating absence of value\npoint = a.get(\u0026#39;points\u0026#39;, \u0026#39;No point value assigned\u0026#39;) Looping through a Dictionary items() Looping through all key-value pairs We can loop through all the dict key-value pairs through its keys or values. using for loop for dict, create two variables to store keys and values. with dict name followed by method items()\nuser = { k:v, k1:v1 } for key, value in user.items() user_0 = { \u0026#34;username\u0026#34;: \u0026#34;efron\u0026#34;, \u0026#34;first\u0026#34;: \u0026#34;enric\u0026#34;, \u0026#34;Last\u0026#34;: \u0026#34;fermi\u0026#34; } for key, value in user_0.items(): print(f\u0026#34;\\nKey: {key}\u0026#34;) print(f\u0026#34;Value: {value}\u0026#34;)\rfav_lang = { \u0026#34;jen\u0026#34;: \u0026#34;Python\u0026#34;, \u0026#34;sarah\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;edward\u0026#34;:\u0026#34;rust\u0026#34;, \u0026#34;phil\u0026#34;: \u0026#34;python\u0026#34;} for name, lang in fav_lang.items(): print(f\u0026#34;{name}\u0026#39;s favorite language is {lang}.\u0026#34;)\rkeys() Looping through all keys for name in fav_lang.keys(): is same as for name in fav_lang: because looping through keys is default when for is applied to a dict.\nfav_lang = { \u0026#34;jen\u0026#34;: \u0026#34;Python\u0026#34;, \u0026#34;sarah\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;edward\u0026#34;:\u0026#34;rust\u0026#34;, \u0026#34;phil\u0026#34;: \u0026#34;python\u0026#34;} for name in fav_lang: # for name in fav_lang.keys(): does same print(f\u0026#34;{name} took our survey.\u0026#34;)\rfav_lang = { \u0026#34;jen\u0026#34;: \u0026#34;Python\u0026#34;, \u0026#34;sarah\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;edward\u0026#34;:\u0026#34;rust\u0026#34;, \u0026#34;phil\u0026#34;: \u0026#34;python\u0026#34;} friends = [\u0026#34;phil\u0026#34;, \u0026#34;jen\u0026#34;] for name in fav_lang: print(f\u0026#34;Hi, {name}\u0026#34;) if name in friends: lang = fav_lang[name] # print(f\u0026#34;{name}, I see you love {fav_lang[name]}\u0026#34;) print(f\u0026#34;{name}, I see you love {lang}\u0026#34; )\rLooping through keys in a particular order Getting all the keys sorted by passing list to sorted.\nfor name in sorted(fav_lang.keys()): Looping through values in dict \u0026raquo;\u0026gt; for lang in fav_lang.values():\nfav_lang = { \u0026#34;jen\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;sarah\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;edward\u0026#34;:\u0026#34;rust\u0026#34;, \u0026#34;phil\u0026#34;: \u0026#34;python\u0026#34;} print(\u0026#34;The following languages have been mentioned\u0026#34;) for lang in fav_lang.values(): print(lang)\rset() is a collection in which each item must be unique, wrapping set() around a collection of values, python takes the unique items and forms a set.\nfav_lang = { \u0026#34;jen\u0026#34;: \u0026#34;python\u0026#34;, \u0026#34;sarah\u0026#34;: \u0026#34;C\u0026#34;, \u0026#34;edward\u0026#34;: \u0026#34;rust\u0026#34;, \u0026#34;phil\u0026#34;: \u0026#34;python\u0026#34;} print(\u0026#34;The following languages have been mentioned\u0026#34;) for lang in set(fav_lang.values()): print(lang) # wrapping set() around fav_lang.values() to get only uniqu values\rNesting Nesting is storing multiple dictionaries in a list, or list of items in dictionary, or dicts in dict.\nali_0 = {} ali_1 = {} ali_2 = {} alie = [ali_0, ali_1, ali_2] for ali in alie: print(ali) # will print each dictionary Making a empty list and populating it Using range() to create a fleet of 30 aliens\naliens = [] for ali in range(30): new_alien = {\u0026#34;colour\u0026#34;:\u0026#34;green\u0026#34;, \u0026#34;points\u0026#34;: \u0026#34;5\u0026#34;, \u0026#34;speed\u0026#34;:\u0026#34;slow\u0026#34; } aliens.append(new_alien)\rMaking 3 alien in the list change color, speed and points. Looping through only 3 and then changing all values for the keys\nfor a in aliens[:3]: if a[\u0026#34;colour\u0026#34;] == \u0026#34;green\u0026#34;: a[\u0026#34;colour\u0026#34;] = \u0026#34;yellow\u0026#34; a[\u0026#34;speed\u0026#34;] = \u0026#34;medium\u0026#34; a[\u0026#34;points\u0026#34;] = 10 # to make any yellow aliens to red, elif a[\u0026#34;colour\u0026#34;] == \u0026#34;yelow\u0026#34;: a[\u0026#34;colour\u0026#34;] = \u0026#34;red\u0026#34; a[\u0026#34;speed\u0026#34;] = \u0026#34;fast\u0026#34; a[\u0026#34;points\u0026#34;] = 15 for ali in aliens: print(ali)\rA list in a dictionary Pizza order\npizza = { \u0026#34;crust\u0026#34;:\u0026#34;thick\u0026#34;, \u0026#34;toppings\u0026#34;: [\u0026#34;mushroom\u0026#34;, \u0026#34;extra cheese\u0026#34;] } print(f\u0026#34;You have ordered a {pizza[\u0026#39;crust\u0026#39;]} crust pizza. \\nWith the following toppings \u0026#34; ) for top in pizza[\u0026#34;toppings\u0026#34;]: print(f\u0026#34;\\t{top}\u0026#34;) # print(top) would have worked but adding tab with \\t needs f string\rFavorite language\nfav_lang = { \u0026#39;jen\u0026#39;: [\u0026#39;python\u0026#39;, \u0026#39;rust\u0026#39;], \u0026#39;sarah\u0026#39;: [\u0026#39;c\u0026#39;], \u0026#39;edward\u0026#39;: [\u0026#39;rust\u0026#39;, \u0026#39;go\u0026#39;], \u0026#39;phil\u0026#39;: [\u0026#39;python\u0026#39;, \u0026#39;haskell\u0026#39;], } # i just divided getting the value for name in fav_lang: print(f\u0026#34;{name}\u0026#39;s favorite languages are:\u0026#34;) for lang in fav_lang[name]: # i used fav_lang.values, but it is a list there are no values or keys print(f\u0026#34;\\t{lang}\u0026#34;) # it could have been just at a time process for name, lang in fav_lang.items(): print(f\u0026#34;{name}\u0026#39;s favorite values are:\u0026#34;) for l in lang: print(f\u0026#34;\\t{l}\u0026#34;)\rRefining the singular plural grammar issue fav_lang = { \u0026#39;jen\u0026#39;: [\u0026#39;python\u0026#39;, \u0026#39;rust\u0026#39;], \u0026#39;sarah\u0026#39;: [\u0026#39;c\u0026#39;], \u0026#39;edward\u0026#39;: [\u0026#39;rust\u0026#39;, \u0026#39;go\u0026#39;], \u0026#39;phil\u0026#39;: [\u0026#39;python\u0026#39;, \u0026#39;haskell\u0026#39;], } for name, lang in fav_lang.items(): if len(lang) == 1: print( f\u0026#34;{name.title()}\u0026#39;s favorite language is:\u0026#34;) print(f\u0026#34;\\t{lang[0].title()}\u0026#34;) else: print(f\u0026#34;{name.title()}\u0026#39;s favorite languages are:\u0026#34;) for l in lang: print(f\u0026#34;\\t{l.title()}\u0026#34;)\rA dictionary in dictionary users = { \u0026#39;aeinstein\u0026#39;: {\u0026#39;first\u0026#39;: \u0026#39;albert\u0026#39;, \u0026#39;last\u0026#39;: \u0026#39;einstein\u0026#39;, \u0026#39;location\u0026#39;: \u0026#39;princeton\u0026#39;,} , \u0026#39;mcurie\u0026#39;: {\u0026#39;first\u0026#39;: \u0026#39;marie\u0026#39;, \u0026#39;last\u0026#39;: \u0026#39;curie\u0026#39;, \u0026#39;location\u0026#39;: \u0026#39;paris\u0026#39;,} , } for user, data in users.items(): print ( f\u0026#34;\\nUsername: {user}\u0026#34;) print ( f\u0026#34;\\tFull Name: {data[\u0026#39;first\u0026#39;].title()} {data[\u0026#39;last\u0026#39;].title()}\u0026#34;) print ( f\u0026#34;\\tLocation: {data[\u0026#39;location\u0026#39;].title()}\u0026#34;) # just another way for user, data in users.items(): print ( f\u0026#34;\\nUsername: {user}\u0026#34;) full_name = f\u0026#34;{data[\u0026#34;first\u0026#34;].title()} {data[\u0026#39;last\u0026#39;].title()}\u0026#34; location = f\u0026#34;{data[\u0026#39;location\u0026#39;].title()}\u0026#34; print(f\u0026#34;\\tFull Name: {full_name}\\n\\tLocation: {location}\u0026#34;)\rCS50 Associates a value with another value, like words and meanings in a dictionary. having multiple lists [] isn\u0026rsquo;t practical.\nstudents = { } # empty dictionary keys : values # : is the separator\rlist[] have numbers to index into them, but dict{} allows the actual words to be used as Indies to get their values. To get Draco values, we can use Draco as the key\nstudents = { \u0026#34;Harry\u0026#34; : \u0026#34;Gryffindor\u0026#34;, \u0026#34;Hermione\u0026#34; : \u0026#34;gryffindor\u0026#34;, \u0026#34;Draco\u0026#34; : \u0026#34;Slytherin\u0026#34; } print(students[\u0026#34;Hermione\u0026#34;]) print(students[\u0026#34;Draco\u0026#34;]) for student in students: print(student) # by default the dic{} only the keys are read so only names are displayed for student in students: print(student, students[student], sep=\u0026#34;, \u0026#34;) # students[student] is using the name as key to get the associated value\rList of Dict Keyword \u0026ldquo;None\u0026rdquo; with capital N, which represents absence of value, All dict{} are given same key words but different values, by design keys are standardized to find things easily.\nstudents = [ {\u0026#34;name\u0026#34;: \u0026#34;Hermione\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;patronus\u0026#34;:\u0026#34;Otter\u0026#34; }, {\u0026#34;name\u0026#34;: \u0026#34;Harry\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;patronus\u0026#34;: \u0026#34;Stag\u0026#34; }, {\u0026#34;name\u0026#34;: \u0026#34;Ron\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Gryffindor\u0026#34;, \u0026#34;patronus\u0026#34;: \u0026#34;Terrier\u0026#34; }, {\u0026#34;name\u0026#34;: \u0026#34;Draco\u0026#34;, \u0026#34;house\u0026#34;: \u0026#34;Slytherin\u0026#34;, \u0026#34;patronus\u0026#34;: None} ] for student in students: print(student[\u0026#34;name\u0026#34;], student[\u0026#34;house\u0026#34;], student[\u0026#34;patronus\u0026#34;], sep=\u0026#34;, \u0026#34;) # using print(students[\u0026#34;name\u0026#34;]) will give a str, but it must be int # \u0026#34;for\u0026#34; will get first value which is dict{} 0, to student # print(student[\u0026#34;name\u0026#34;]) will get the value of key word \u0026#34;name\u0026#34;\rProcessing a Dictionary Extracting keys using d.keys() It returns sequence of keys in dictionary d ( in random order). d.key is not a list, it is similar to range. To make a list of keys, list(d.keys())\nfor k in d.keys(): # some process d[k] # d.keys() will not be in any perticular order for k in sorted(d.keys()): # returns in predictible order # process d[k] sorted(l) # returns a sorted copy of l, so doesnt modify l l.sort() # sorts l in place\rExtracting Values from dictionary\nd.values() # is a sequence of values in d total = 0 for s in test1.values(): total = total + s\rTesting if value is in dict uising \u0026ldquo;in\u0026rdquo; function. Assigning to an unknown key inserts an entry or updates if key already exists.\nd = {} d[0] = 7 # then d == {0:7} l = [] l[0] = 7 # causes IndexError\rCourse Implementing a dictionary A dictionary is implimented as a hash table an array plus a hash function The underlying storage is an array given an offset i, find A[i] in constant time keys have to be mapped to {0,1,. . ., n-1} given an key k, convert it to an offset i Hash function h: S--\u0026gt; X maps a set of values S to a small range of integers X = {0,1,..,n-1} typically |X|\u0026lt;\u0026lt;|S|, so there will be collisions, h(s) = h(s\u0026#39;), s != s\u0026#39; a good hash function will minimize collisions SHA-256 is an industry standatd hashing function whose range is 256 bits use to hash large files ","date":"2024-12-17","id":13,"permalink":"/personal-site/docs/python/1data-types/complex-types/dictinaries/","summary":"\u003cp\u003eDictionary is a collection of key-value pairs. each key is connected to a value, and key can be used to access a value.\nIt is wrapped in \u003ccode\u003e{}\u003c/code\u003e ,  key connected to value by \u003ccode\u003e:\u003c/code\u003e , and each key-value pair is separated by \u003ccode\u003e,\u003c/code\u003e\n\u003ccode\u003ea = {\u0026quot;colour\u0026quot; : \u0026quot;green\u0026quot;, \u0026quot;points\u0026quot; : 5 }\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Dictinaries"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap.\nRead How to announce product updates and features ","date":"2023-09-07","id":14,"permalink":"/personal-site/blog/first-blog-post/","summary":"Nothing important to announce, just figuring out things.","tags":[],"title":"First Blog Post"},{"content":"","date":"2023-09-07","id":15,"permalink":"/personal-site/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Introduction to C Language C is a powerful, procedural programming language that provides a straightforward and efficient way to write system-level software. It is a lower-level language than modern high-level languages, allowing direct access to memory and hardware, and is known for its efficiency and flexibility.\nProcedural Language: C is procedural, meaning that the program is typically divided into functions that can be called in sequence. The language does not emphasize objects or data structures like object-oriented programming languages (e.g., C++ or Java).\nLow-Level Access: C allows direct manipulation of memory and hardware, making it ideal for system-level programming but requiring careful management to avoid issues like buffer overflows and pointer errors.\nBasic Characteristics of C No built-in I/O statements: C does not have built-in input/output functions like high-level languages. All input and output operations need to be explicitly handled by the functions provided by libraries (such as printf(), scanf()).\nNo file access methods: File manipulation must be done manually using file handling functions like fopen(), fclose(), fread(), and fwrite().\nControl Flow Constructs: C provides simple, single-threaded control flow mechanisms such as: Tests: Conditional statements (if, else, switch) Loops: Iteration structures (for, while, do-while) Grouping/Sub-grouping: Blocks of code enclosed in {} to group statements\nC does not have built-in support for: Multi-programming (running multiple programs simultaneously) Parallel operations Synchronization Co-routines (functions that can be paused and resumed)\nMemory Management in C Dynamic Memory Allocation: C provides the functions malloc() and free() to manually allocate and deallocate memory on the heap during runtime.\nmalloc(size_t size): Allocates a block of memory of the specified size and returns a pointer to the first byte of this memory block. free(void *ptr): Frees previously allocated memory, making it available for reuse. The heap refers to the region of memory managed dynamically during the execution of a program. It is separate from the stack (used for function call management) and static memory.\nMemory Leaks: If memory allocated via malloc() is not freed with free(), it leads to memory leaks. Over time, if this happens repeatedly, the program may run out of available memory, causing crashes or slowdowns.\nMemory Fragmentation: Continuous allocation and deallocation of memory blocks can cause the heap to become fragmented, making it harder to find contiguous blocks of memory. This requires garbage collection or memory management techniques to clean up fragmented areas.\nGarbage Collection in C C does not have automatic garbage collection like higher-level languages (e.g., Java or Python). The programmer is responsible for managing memory allocation and deallocation. Poor memory management leads to memory leaks or fragmented memory.\nWhile C does not provide automatic garbage collection, developers can use tools or libraries to check for memory leaks or to help with memory management.\nLint Checking Lint: A static code analysis tool that examines C source code to identify potential errors or areas of concern without executing the program. It can catch a variety of issues, such as:\nPossible typos or misuses of variables Unused variables or functions Suspicious expressions Possible memory allocation failures Lint vs Compiler: Linting is separate from the compiler. While the compiler checks for syntax and types, linting looks for logical or potential runtime problems in code. Using both linting tools and a compiler helps ensure more robust and error-free code.\n","date":"2024-12-18","id":16,"permalink":"/personal-site/docs/c/chapter-0-introduction-to-c-language/","summary":"\u003ch3 id=\"introduction-to-c-language\"\u003e\u003cstrong\u003eIntroduction to C Language\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eC is a powerful, procedural programming language that provides a straightforward and efficient way to write system-level software.\nIt is a lower-level language than modern high-level languages, allowing direct access to memory and hardware, and is known for its efficiency and flexibility.\u003c/p\u003e","tags":[],"title":"Chapter 0 - Introduction to C language"},{"content":"","date":"2024-12-18","id":17,"permalink":"/personal-site/docs/c/","summary":"","tags":[],"title":"C Language"},{"content":"Python and C Comparison Python C Whitespace is essential Whitespace is ignored Very object-oriented Not object-oriented at all Data structures like list, dict struct, pointers Auto memory management Manual memory management High-level language Low-level language Similarities Between Python and C Arithmetic Operators: +, -, *, /, %\nComparison Operators: \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;=, !=\nVariable Naming Rules:\nCase matters (e.g., myVar is different from myvar). Can use letters, numbers, and underscores in variable names, but they cannot start with a number. Control Flow:\nWhile Loops: Both languages have while loops and support the break and continue statements.\ni = 0 while i \u0026lt; 5: if i == 3: break print(i) i += 1\rint i = 0; while (i \u0026lt; 5) { if (i == 3) { break; } printf(\u0026#34;%d\\n\u0026#34;, i); i++; }\rConstants: Both Python and C allow defining constants. While Python has a convention for constants (uppercase variable names), C uses #define or const to define constants.\nMAX_VALUE = 100\r#define MAX_VALUE 100\rData Types: Integers and Floats: Both languages support integer and floating-point types. In C, the int and float types exist, while in Python, all numbers are represented as int or float (and Python\u0026rsquo;s float is equivalent to C\u0026rsquo;s double).\nCharacters: C has char for single characters, while Python uses strings, but a single character in Python is a string of length 1.\nKey Differences Between Python and C Boolean Operators:\nIn Python, and, not, or are used for boolean operations. In C, \u0026amp;\u0026amp; (and), ! (not), || (or) are used.\na = True b = False if a and b: print(\u0026#34;Both are true\u0026#34;)\rint a = 1, b = 0; if (a \u0026amp;\u0026amp; b) { printf(\u0026#34;Both are true\\n\u0026#34;); }\rFor Loops: Python has a for..in loop for iterating over elements of a list or other iterable objects.\nfor i in range(5): print(i)\rC does not have a for..in loop. Instead, you need to specify a loop variable, condition, and update manually:\nfor (int i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;%d\\n\u0026#34;, i); }\rBoolean Values: Python has predefined constants True and False as boolean values. In C, there are no predefined True or False values; typically, 1 is used for true and 0 for false.\nif True: print(\u0026#34;True\u0026#34;)\rif (1) { printf(\u0026#34;True\\n\u0026#34;); }\rNone vs NULL:\nNone in Python is a special object that represents the absence of a value. It is its own type. NULL in C is a null pointer constant, typically represented as 0 or ((void*)0). It represents a pointer that does not point to any memory address. x = None if x is None: print(\u0026#34;x is None\u0026#34;)\rint* x = NULL; if (x == NULL) { printf(\u0026#34;x is NULL\\n\u0026#34;); }\rStrings and Character Arrays: - Strings in Python are immutable and can be treated as objects with many built-in methods. - C strings are arrays of characters, terminated by a null character ('\\0'). String manipulation in C is less intuitive and requires careful handling of memory.\ns = \u0026#34;Hello\u0026#34; print(s.upper())\rchar s[] = \u0026#34;Hello\u0026#34;; printf(\u0026#34;%s\\n\u0026#34;, strupr(s)); // Requires external string manipulation functions like `strupr()` Data Structures: Python comes with built-in data structures like list and dict, which are high-level and flexible. In C, you must manually define data structures using struct, and dynamic data structures often require the use of pointers for manipulation.\nmy_list = [1, 2, 3] my_dict = {\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;}\rstruct Point { int x; int y; }; struct Point p = {1, 2};\rMemory Management:\nPython has automatic memory management with garbage collection, meaning memory is allocated and freed automatically. C requires manual memory management using functions like malloc() for allocation and free() for deallocation.\na = [1, 2, 3] # Memory management handled by Python\rint* arr = (int*) malloc(3 * sizeof(int)); // Manual allocation free(arr); // Manual deallocation No double in Python: Python uses float for both single-precision and double-precision floating-point numbers, while C has both float (single precision) and double (double precision) types.\na = 3.14159 # Python float (equivalent to C\u0026#39;s double)\rdouble a = 3.14159; // C double ","date":"2024-12-18","id":18,"permalink":"/personal-site/docs/c/chapter-0-introduction-using-python-part-1/","summary":"\u003ch2 id=\"python-and-c-comparison\"\u003e\u003cstrong\u003ePython and C Comparison\u003c/strong\u003e\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003cstrong\u003ePython\u003c/strong\u003e\u003c/th\u003e\n          \u003cth\u003e\u003cstrong\u003eC\u003c/strong\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eWhitespace is essential\u003c/td\u003e\n          \u003ctd\u003eWhitespace is ignored\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eVery object-oriented\u003c/td\u003e\n          \u003ctd\u003eNot object-oriented at all\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eData structures like \u003ccode\u003elist\u003c/code\u003e, \u003ccode\u003edict\u003c/code\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ccode\u003estruct\u003c/code\u003e, pointers\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAuto memory management\u003c/td\u003e\n          \u003ctd\u003eManual memory management\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eHigh-level language\u003c/td\u003e\n          \u003ctd\u003eLow-level language\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch3 id=\"similarities-between-python-and-c\"\u003e\u003cstrong\u003eSimilarities Between Python and C\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eArithmetic Operators\u003c/strong\u003e:   \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Chapter 0 - Introduction using Python (Part 1)"},{"content":"Comparing Python and C Code Printing Output in Python vs. C print(\u0026#39;Hello world\u0026#39;) print(\u0026#39;Answer\u0026#39;, 42) print(\u0026#39;Name\u0026#39;, \u0026#39;Sarah\u0026#39;) print(\u0026#39;x\u0026#39;, 3.5, \u0026#39;i\u0026#39;, 10) # A comment\r#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello world\\n\u0026#34;); printf(\u0026#34;Answer %d\\n\u0026#34;, 42); printf(\u0026#34;Name %s\\n\u0026#34;, \u0026#34;Sarah\u0026#34;); printf(\u0026#34;x %.1f i %d\\n\u0026#34;, 3.5, 100); } /* A comment */ // Another comment Output (for both Python and C)\nHello world Answer 42 Name Sarah x 3.5 i 100\r#include \u0026lt;stdio.h\u0026gt;: Read as \u0026ldquo;Pound include standard I O\u0026rdquo; This tells the C compiler to include the standard input/output library, allowing the use of printf() and other I/O functions.\nEvery C program must have a main() function, where execution starts. int main() specifies the return type as int, indicating the program’s exit status (usually 0 for success).\nprintf(\u0026quot;Hello world\\n\u0026quot;) Prints text to the screen. \\n adds a newline, moving the cursor to the next line. There cannot be single quotes used in a string, '' means a single characters and \u0026quot;\u0026quot; are character array (not a string).\nIn C, format codes (like %d, %s, %f) are used inside the string to indicate where values should be inserted. %d is used for integers, %s for strings, and %.1f for floating-point numbers with one decimal precision.\nprintf(\u0026quot;Answer %d\\n\u0026quot;, 42); The %d is replaced with the integer 42.\nprintf(\u0026quot;x %.1f i %d\\n\u0026quot;, 3.5, 100); %.1f prints 3.5 with one decimal, and %d prints 100.\nprintf(\u0026quot;Name %s\\n\u0026quot;, \u0026quot;Sarah\u0026quot;); %s finds the string (character array) which will have to have a proper terminating \\0 character at the end.\nNumber Input print(\u0026#39;Enter US Floor\u0026#39;) usf = int(input()) euf = usf - 1 print(\u0026#39;EU Floor\u0026#39;, euf)\r#include \u0026lt;stdio.h\u0026gt; int main() { int usf, euf; printf(\u0026#34;Enter US Floor\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;usf); euf = usf - 1; printf(\u0026#34;EU Floor %d\\n\u0026#34;, euf); }\rOutput\nEnter US Floor 2 EU Floor 1\rint usf, euf; declares two integer variables, usf and euf.\nscanf() Function:\nIn C, scanf(\u0026quot;%d\u0026quot;, \u0026amp;usf) works similarly to Python’s input().\nThe %d format specifier tells scanf to expect an integer. The \u0026amp; symbol means \u0026ldquo;pass the address of usf\u0026rdquo; allowing scanf to directly modify usf by storing the input value in its memory location (this is called call by reference). Without the \u0026amp;, it would be call by value, and scanf would not update the variable correctly.\nCall by reference and call by value In python int(input()) comes back as a function return so it is easy to assign it to usf.\nIn C without \u0026amp; on parameter it becomes call by value, where value of usf is given to scanf. \u0026amp;usf says to give the value coming from the scanf to the address of the usf variable instead of the value of usf, so the data can be stored.\nSo \u0026amp; is the way C to call by reference for int and floats.\nString Input print(\u0026#39;Enter name\u0026#39;) name = input() print(\u0026#39;Hello\u0026#39;, name)\r#include \u0026lt;stdio.h\u0026gt; int main() { char name[100]; printf(\u0026#34;Enter name\\n\u0026#34;); scanf(\u0026#34;%100s\u0026#34;, name); printf(\u0026#34;Hello %s\\n\u0026#34;, name); }\rOutput\nEnter name Sarah Hello Sarah\rDeclaring Character Arrays in C:\nIn C, char name[100]; defines an array to hold up to 100 characters (no strings in C, just arrays of characters). This array has a fixed size and cannot dynamically grow like Python strings.\nIn Python, strings are objects and have dynamic sizes.\nUsing scanf for String Input:\nscanf(\u0026quot;%100s\u0026quot;, name); reads up to 100 characters into the name array. %100s format specifier limits the input to 100 characters.\nIn C, arrays are passed by reference, so there’s no need for \u0026amp; with name. Simply passing the array variable provides the address of the first element.\nIn C character array size has to be predefinesd, which can lead to buffer overflow issues if not managed carefully.\nReading a Full Line of Input print(\u0026#39;Enter line\u0026#39;) line = input() print(\u0026#39;Line:\u0026#39;, line)\r#include \u0026lt;stdio.h\u0026gt; int main() { char line[1000]; printf(\u0026#34;Enter line\\n\u0026#34;); scanf(\u0026#34;%[^\\n]1000s\u0026#34;, line); printf(\u0026#34;Line: %s\\n\u0026#34;, line); }\rOutput\nEnter line Hello world - have a nice day Line: Hello world - have a nice day\rReading Until Newline:\nchar line[1000] Pre-defining a character array with space for 1000 characters. scanf(\u0026quot;%[^\\n]1000s\u0026quot;, line); reads all characters until a newline (\\n) is encountered. The ^[\\n] format specifier is a regular expression that means \u0026ldquo;match any character except a newline.\u0026rdquo; This allows to capture a full line of input (or up to 1000 characters).\nUsing fgets for Reading Input #include \u0026lt;stdio.h\u0026gt; int main() { char line[1000]; printf(\u0026#34;Enter line\\n\u0026#34;); fgets(line, 1000, stdin); printf(\u0026#34;Line: %s\\n\u0026#34;, line); }\rfgets() for Safer Input: fgets(line, 1000, stdin); reads up to 1000 characters from the standard input (stdin) and stores them in the line array. fgets can read a file, the third parameter is a file handle, (there are 3 predefined file handles like stdin)\nUnlike scanf, fgets does not stop at whitespace, so it can read the entire line, including spaces. fgets is generally safer than scanf because it limits the number of characters to avoid buffer overflows.\nC’s standard I/O library works with three standard file streams:\n1. stdin for input 2. stdout for output 3. stderr for error messages\nRead a File hand = open(\u0026#39;romeo.txt\u0026#39;) for line in hand: print(line.strip())\r#include \u0026lt;stdio.h\u0026gt; int main() { char line[1000]; FILE *hand; hand = fopen(\u0026#34;romeo.txt\u0026#34;, \u0026#34;r\u0026#34;); while( fgets(line, 1000, hand) != NULL ) { printf(\u0026#34;%s\u0026#34;, line); } }\rFile Handling in C:\nFILE is a type defined in stdio.h.\nFILE *hand; declares a pointer to a FILE object, which is used to handle file operations. fopen(\u0026quot;romeo.txt\u0026quot;, \u0026quot;r\u0026quot;); opens the file in read mode (\u0026quot;r\u0026quot;). fgets(line, 1000, hand); reads a line from the file into the line array. It reads up to 1000 characters or until it encounters a newline. The while loop continues until fgets returns NULL, which indicates the end of the file (EOF). Key Differences:\nPython’s open() function is simpler and automatically handles file objects, while C requires you to manage the file pointer manually. In C, fgets() is used to read lines, while Python uses a loop directly over the file object. Counted Loop for i in range(5): print(i)\r#include \u0026lt;stdio.h\u0026gt; int main() { int i; for (i = 0; i \u0026lt; 5; i++) { printf(\u0026#34;%d\\n\u0026#34;, i); } }\rOutput:\n0 1 2 3 4\rC For Loop: The syntax in C is similar to Python but requires explicit initialization, condition, and increment.\nfor (i = 0; i \u0026lt; 5; i++) initializes i to 0, continues while i is less than 5, and increments i by 1 on each iteration. Python uses range(5) to generate numbers, while C requires manual control over the loop variables.\nMax / Min maxval = None minval = None while True: line = input() line = line.strip() if line == \u0026#34;done\u0026#34;: break ival = int(line) if (maxval is None or ival \u0026gt; maxval): maxval = ival if (minval is None or ival \u0026lt; minval): minval = ival print(\u0026#39;Maximum\u0026#39;, maxval) print(\u0026#39;Minimum\u0026#39;, minval)\rInput:\n5, 2, 9, done\rOutput:\nMaximum 9 Minimum 2\r#include \u0026lt;stdio.h\u0026gt; int main() { int first = 1; int val, maxval, minval; while(scanf(\u0026#34;%d\u0026#34;, \u0026amp;val) != EOF) { if (first || val \u0026gt; maxval) maxval = val; if (first || val \u0026lt; minval) minval = val; first = 0; } printf(\u0026#34;Maximum %d\\n\u0026#34;, maxval); printf(\u0026#34;Minimum %d\\n\u0026#34;, minval); }\rInput:\n5, 2, 9 (EOF)\rOutput:\nMaximum 9 Minimum 2\rIn Python, maxval and minval are initially None, and values are updated based on comparisons. In C, the first flag ensures that the maxval and minval are initialized on the first iteration.\nscanf(\u0026quot;%d\u0026quot;, \u0026amp;val) is used to read integers from the user, updating the val variable.\nGuessing Game while True: try: line = input() except: # if we get to EOF break line = line.strip() guess = int(line) if guess == 42: print(\u0026#39;Nice work\u0026#39;) elif guess \u0026lt; 42: print(\u0026#39;Too low - guess again\u0026#39;) else: print(\u0026#39;Too high - guess again\u0026#39;) #include \u0026lt;stdio.h\u0026gt; int main() { int guess; while(scanf(\u0026#34;%d\u0026#34;, \u0026amp;guess) != EOF) { if (guess == 42) { printf(\u0026#34;Nice work!\\n\u0026#34;); break; } else if (guess \u0026lt; 42) { printf(\u0026#34;Too low - guess again\\n\u0026#34;); } else { printf(\u0026#34;Too high - guess again\\n\u0026#34;); } } }\rPython uses a try-except block to handle EOF or input errors, while C uses scanf to read input and checks for EOF.\nIn C, the code must use curly braces {} for each block of statements within if, else if, and else.\nIn python, if elif and else is True multi-way if. {} is needed in C if there are more than one statement.\nIn C, if else if else is not a true multi-way if, it checks the if, when not true it will go to else, within the else there are two more if else nested inside so not part of a single block of code.\nThe indentation is done in a way that it looks like a multi-way if but it is not and the indentation doesn\u0026rsquo;t represent the nesting.\nFunctions (Call by Value) def mymult(a, b): c = a * b return c retval = mymult(6, 7) print(\u0026#39;Answer:\u0026#39;, retval)\r#include \u0026lt;stdio.h\u0026gt; int main() { int mymult(int, int); // function declaration int retval; retval = mymult(6, 7); printf(\u0026#34;Answer: %d\\n\u0026#34;, retval); } int mymult(int a, int b) { // function definition int c = a * b; return c; }\rFunction Definition and Declaration in C:\nint mymult(int, int); declares the function signature, specifying it takes two int parameters and returns an int. The function body in C needs to explicitly declare types for the parameters, unlike Python where types are inferred. C is statically typed, requiring explicit type declarations for variables and function parameters.\n","date":"2024-12-18","id":19,"permalink":"/personal-site/docs/c/chapter-0-introduction-using-python-part-2/","summary":"\u003ch2 id=\"comparing-python-and-c-code\"\u003eComparing Python and C Code\u003c/h2\u003e\n\u003ch3 id=\"printing-output-in-python-vs-c\"\u003e\u003cstrong\u003ePrinting Output in Python vs. C\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Hello world\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Answer\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Name\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Sarah\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;i\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# A comment\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Answer %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Name %s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Sarah\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;x %.1f i %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cm\"\u003e/* A comment */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Another comment\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003eOutput\u003c/strong\u003e (for both Python and C)\u003c/p\u003e","tags":[],"title":"Chapter 0 - Introduction using Python (Part 2)"},{"content":"The C Programming Language by Kernighan and Ritchie\nChapter 1-4 - Mostly syntax, Arrays, Strings (Character arrays) Chapter 5 - Pointers and Arrays Chapter 6 - Structures Chapter 7-8 - Detailed C features\nCharacter Arrays We must carefully understand the \u0026lsquo;size\u0026rsquo; of the character array and not exceed it. In C nothing is \u0026lsquo;auto extended\u0026rsquo;.\nx = \u0026#34;\u0026#34; for i in range(1000): x += \u0026#34;*\u0026#34; print (x)\rThis will not cause any problem as memory allocation is flexible.\n#include \u0026lt;stdio.h\u0026gt; int main() { char x[10]; int i; for( i=0; i\u0026lt;1000; i++) x[i] = \u0026#39;*\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, x); } $ a.out Segmentation falult: 11\rThe size of the string has been exceeded. This is the reason why C is not used to write programs.\n\u0026ldquo;Buffer Overrun Errors\u0026rdquo; 90% all security holes are due to C code\nString / Character Constants In C single quotes '' are a character and double quotes \u0026quot;\u0026quot; are a character array (neither are string) with a 0 character at the end of it. A \u0026quot;\u0026quot; with one character in it is actually 2 bytes.\nA Character is a byte - a short(8-bit) integer.\n#include \u0026lt;stdio.h\u0026gt; int main() { char x[3] = \u0026#34;Hi\u0026#34;; char y[3] = { \u0026#39;H\u0026#39;, \u0026#39;i\u0026#39;}; printf(\u0026#34;x %s\\n, x\u0026#34;); printf(\u0026#34;y %s\\n, y\u0026#34;); printf(\u0026#34;%s\\n\u0026#34;, \u0026#34;Hi\u0026#34;); printf(\u0026#34;%c%c\\n\u0026#34;, \u0026#39;H\u0026#39;, \u0026#39;i\u0026#39;); }\r$ a.out\rx Hi\ry Hi\rHi\rHi\rCharacter Sets The C char type is just a number (8-bits long) usually ASCII. Modern characters include multi-byte sequences using Unicode and UTF-8\n#include \u0026lt;stdio.h\u0026gt; int main() { print(\u0026#34;%c %d\\n\u0026#34;, \u0026#39;A\u0026#39;, \u0026#39;A\u0026#39;); }\r$ a.out\rA 65\rA character is more similar to an int than to a string.\nTerminating a String #include \u0026lt;stdio.h\u0026gt; int main() { char x[6]; x[0] = \u0026#39;H\u0026#39;; x[1] = \u0026#39;e\u0026#39;; x[2] = \u0026#39;l\u0026#39;; x[3] = \u0026#39;l\u0026#39;; x[4] = \u0026#39;o\u0026#39;; x[5] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, x); x[2] = \u0026#39;L\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, x); x[3] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, x); }\r$ a.out\rHello\rHeLlo\rHeL\rThere are no strings, they are \u0026ldquo;arrays of characters\u0026rdquo;, there is no length. The size of the \u0026ldquo;string\u0026rdquo; stored in C array is not the length of the array. C Uses a special character \\0 that marks the string end by convention. So character arrays need to allocate extra byte to store the line end character.\nTerminating a string is very important to think before creating a new string and scanning through a string, if something is appended to a \u0026ldquo;character array\u0026rdquo; then the end character has to be moved.\nString length In C string \u0026ldquo;length\u0026rdquo; must be computed in a loop that scans for a zero character. There the strlen() function in string.h computes string length.\nx = \u0026#39;Hello\u0026#39; print(x, len(x)) # Hello 5 in python x is an object and len is an attribute of that object.\n#include \u0026lt;stdio.h\u0026gt; int main() { char x[] = \u0026#34;Hello\u0026#34;; int py_len(); printf(\u0026#34;%s %d\\n\u0026#34;, x, py_len(x)); } int py_len(self) char self(); { int i; for(i=0; self[i]; i++); /* when string gets over it turns false */ return i; } // a.out // Hello 5 Reverse a String in place in C Exercise 1-19 in K\u0026amp;R\n#include \u0026lt;stdio.h\u0026gt; int main() { char x[]= \u0026#34;Hello\u0026#34;; char reverse(); printf(\u0026#34;%s \u0026#34; ) }\rChapter 1 1.1 Getting started int main() {} printf() \\n is the only way of adding a new line. \\t for tab, \\b for backspace, \\\u0026quot; for double quotes, \\\\ for back slash itself.\n1.2 Variables and Arithmetic Comments Declaring variables (when there is an error a Diagnostic message containing type and list of variables will be shown.) Int and float have size difference. 16bit signed number, 32 bit quantity with 7 significant bits.\nOther basic data types,\nint\rfloat char - character, a single byte, short - short integer, long - long integer,\rdouble - double-precision floating point\rassignment operator to assign values = terminating statements using ;\n#include \u0026lt;stdio.h\u0026gt; /* Print Farenheit-Celsius table for f =0, 20, ..., 300 */ int main() { int lower, upper, step; float fahr, celsius; lower = 0; // lower limit of the temperature upper = 300; // uppr limit step = 20; // step size fahr = lower; while (fahr \u0026lt;= upper) { celsius = (5.0/9.0) * (fahr-32.0); printf(\u0026#34;%4.0f %6.1f\\n\u0026#34;, fahr, celsius); fahr = fahr + step; } }\rwhile loop while (fahr\u0026lt;= upper) {...} Indentation and white space is for readability, any position is permissible.\nUsing (5.0/9.0) instead of 5/9 to prevent truncating of numbers and additional numbers are discarded. i.e 5/9 will be 0 which means everything will be zero.\nprintf() is a general purpose format conversion function. It is not part of C, but the standard library. printf(\u0026quot;%4.0f %6.1f\\n\u0026quot;, fahr, celsius); %4.0f states that a floating point number is to be printed in a space at least four character wide, with no digits after the decimal point. %6.1f describes a floating point number in 6 character space, with one digit after the decimal.\nParts of a specification may be omitted, %6f at least six characters wide. %.2f requests two place after the decimal place, but width is not constrained. %f says print the number as a floating point number.\nprintf also recognizes %d for decimal integer, %o for octal, %x for hexadecimal, %c for character, %s for character string and %% for % itself.\nEach % constraint in first argument should pair with its corresponding second, third arguments, they must line up properly by number and type.\nIf you have to input numbers, then consider function scanf which reads input instead of writing output like printf\n1.3 The For Statement #include \u0026lt;stdio.h\u0026gt; main() { int fahr; for (fahr = 0; fahr \u0026lt;=300; fahr = fahr + 20) printf(\u0026#34;%4d %6.1f\\n\u0026#34;, fahr, (5.0/9.0)*(fahr-32)); }\rfirst part is done once, second part is the condition that is checked each iteration, and last is re-initialization step.\nwhile and for loops are in-determinant loops structure because they must be read closely to make sure they are properly constructed and not unintentionally a \u0026ldquo;infinite loop\u0026rdquo;.\nfor loop in python and foreach in PHP are determinant loops. They iterate over all of the elements in a collection which is not finite.\n1.4 Symbolic Constants To avoid magic numbers like 300, 20 which are buried inside the code which might not convey any information while reading as to what they are. With #define construction, at the beginning of the program a symbolic name or symbolic constant to be a particular string of characters. The compiler will replace the unquoted occurrences of the name by corresponding string.\n#include \u0026lt;stdio.h\u0026gt; #define LOWER 0 #define UPPER 300 #define STEP 20 main() { int fahr; for (fahr = LOWER; fahr \u0026lt;= UPPER; fahr = fahr+STEP) printf(\u0026#34;%4d %6.1f\\n\u0026#34;, fahr, (5.0/9.0)*(fahr-32)); }\rThe LOWER, UPPER, STEP are constants so they do not appear in declarations. To separate them from lower case variable names they are made Fully upper. There are no ; after the definition because the whole line after the define will be copied, so to avoid too many semicolons in the for.\n1.5 Collection of Useful Programs Family of related programs for doing simple operations in character data.\ngetchar() and putchar() which are provided by the library.\nFile Copying\n#include \u0026lt;stdio.h\u0026gt; main() /* copy input to output*/ { int c; c = getchar(); while (c != EOF) { putchar(c); c = getchar(); } }\rFor the end of file is, the common convention is -1 when the program has run out of input. The symbolic name EOF is a symbolic name. (The EOF is defined in stdio.h so should never be defined in code.)\n#include \u0026lt;stdio.h\u0026gt; main() { int c; while ( (c=getchar()) !=EOF ) putchar(c); }\rThe program gets a character, assigns it to c and tests whether the character was the end of file signal. If it was not, the body of the while is executed, printing the character. When end input is reached, while terminates.\nCharacter Counting\n#include \u0026lt;stdio.h\u0026gt; main() { long nc; nc = 0; while (getchar() != EOF) ++nc; printf(\u0026#34;%ld\\n\u0026#34;, nc); }\r++nc means increment by one. also --nc similar to nc = nc + 1 Prefix operators ++nc and postfix operators nc++ both increment but have different values in expressions. %ld signals that corresponding argument is a long integer.\nTo cope with even bigger numbers double(double length float) can be used.\n#include \u0026lt;stdio.h\u0026gt; main() { double nc; for (nc = 0; getchar() != EOF; ++nc) ; printf(\u0026#34;%.0f\\n, nc\u0026#34;); }\r; in the middle is an empty statement to show there is nothing in the body of for loop. but grammatically it should have a body.\n%.0f suppresses printing of the non-existent fraction part.\nLine Counting Input lines are assumed to be terminated by the newline character \\n\n#include \u0026lt;stdio.h\u0026gt; main() { int c, nl; nl = 0; while ( (c = getchar()) != EOF) if (c == \u0026#39;\\n\u0026#39;) ++nl; printf(\u0026#34;%d\\n\u0026#34;, nl); }\rIf statement inside the while controls the increment if line is found. Any character written between a '' to produce a value equal to numerical value of the character. 'A' is 65\n'\\n' is a single character and is equivalent to a single integer, on the other hand \u0026quot;\\n\u0026quot; is a character string which happens only one character.\nWord Counting A loose definition of word that does not contain blank, tab or newline.\n#include \u0026lt;stdio.h\u0026gt; #define YES 1 #define NO 0 main() { /* count lines, words, characters in input*/ int c, nl, nw, nc, inword; inword = NO; nl = nw = nc = 0; while ( (c=getchar()) != EOF ) { ++nc; if (c == \u0026#39;\\n\u0026#39;) ++nl; if (c == \u0026#39; \u0026#39; || c == \u0026#39;\\n\u0026#39; || c == \u0026#39;\\t\u0026#39;) inword = NO; else if ( inword == NO ) { inword = YES; ++nw; } } printf(\u0026#34;%d %d %d\\n\u0026#34;, nl, nw, nc); }\rThe variable inword records if the program is in a word or not, initially \u0026rsquo;not in a word\u0026rsquo; .\nThe else is an alternative action to be done if the condition part of if is false.\nif (epression)\rstatement-1\relse\rstatement-2\rOne and only one of the two statements associated with if-else is done, not both.\n1.6 Arrays The number of elements in an array declaration must be constant at compile time, and the size of the array cannot be adjusted using an array declaration while program is running.\nThis leads to security flaws referred to as \u0026ldquo;buffer overflow\u0026rdquo; where a program reads mode data than it can fit into an array where it may overwrite the data or compromise the application.\n#include \u0026lt;stdio.h\u0026gt; main() /*count digits, white space and other*/ { int c, i, nwhite, nother; int ndigit[10]; nwhite = nother = 0; for (i=0; i\u0026lt;10; ++i) ndigit[i] = 0; while ( (c = getchar()) != EOF ) if (c \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; c\u0026lt;= \u0026#39;9\u0026#39;) ++ndigit[c-\u0026#39;0\u0026#39;]; else if ( c == \u0026#39;\u0026#39; || c == \u0026#39;\\n\u0026#39; || c == \u0026#39;\\t\u0026#39;) ++nwhite; else ++nother; printf(\u0026#34;digits =\u0026#34;); for (i=0; i\u0026lt;10; ++i) printf(\u0026#34; %d\u0026#34;, ndigit[i]); printf(\u0026#34;\\nwhite space = %d, other = %d\\n\u0026#34;, nwhite, nother); }\rint ndigit[10]; is an array of 10 integers. if (c \u0026gt;= '0' \u0026amp;\u0026amp; c\u0026lt;= '9') checks if the character in c is a digit. If it is, then c-'0' is the digit.\nBy definition, arithmetic involving char and int converts everything to int before proceeding. so c-'0' is an integer expression.\n1.7 Functions In C, a function is equivalent to a subroutine or function, Encapsulate in a back box.\n#include \u0026lt;stdio.h\u0026gt; main() { int i; for (i = 0; i\u0026lt;10; ++i) printf(\u0026#34;%d %d %d\\n\u0026#34;, i, power(2,i), power(-3,i)); } power(x, n) /* raise x to nth power; n\u0026gt;0 */ int x, n; { int i, p; p = 1; for (i = 1; i\u0026lt;=n; ++i) p = p * x; return (p); }\rEach function has the same form:\nname (argument list, if any) argument declarations, if any declarations statements\r1.8 Arguments - Call by Value In C, function arguments are passed by value. This means the function is given the value of it\u0026rsquo;s arguments in temporary variables (on a stack) rather than on their address. Passing \u0026lsquo;by value\u0026rsquo; has become the norm after C as it doesn\u0026rsquo;t allow the called code to mess with the arguments and create side effects.\nThe call stack that made it possible to pass by value also made it possible for the function to call itself recursively.\nIn python, simple variables like integers and strings are passed by value while Structured data like Dict and list are passed by reference.\npower(x, n) int x, n; { int i, p; for (p = 1; n\u0026gt;0; --n) p = p*x; return (p); }\rThe argument n is used as a temporary variable which counts down till it becomes 0. So no need of i.\n1.9 Character Arrays #include \u0026lt;stdio.h\u0026gt; #define MAXLINE 1000 /* max input line size*/ main() /* find longest line */ { int len; /* current line length */ int max; /* Max length seen so far */ char line[MAXLINE]; /* current input line */ char save[MAXLINE]; /* longest line, saved */ max = 0; while ((len = get_line(line, MAXLINE)) \u0026gt; 0 ) if (len \u0026gt; max) { max = len; copy(line, save); } if (max \u0026gt; 0) /* there was a line */ printf(\u0026#34;%s\u0026#34;, save); } get_line(s, lim) /* get line into s, return length */ char s[]; int lim; { int c, i; for (i=0; i\u0026lt;lim-1 \u0026amp;\u0026amp; (c=getchar()) != EOF \u0026amp;\u0026amp; c!=\u0026#39;\\n\u0026#39;; ++i ) s[i] = c; if (c == \u0026#39;\\n\u0026#39;) { s[i] = c; ++i; } s[i] = \u0026#39;/0\u0026#39;; return(i); } copy(s1, s2) /* copy s1 to s2; assume s2 big enough */ char s1[], s2[]; { int i; i = 0; while ((s2[i] = s1[i]) != \u0026#39;\\0\u0026#39; ) ++i; }\r1.10 Scope; External Variable The variables in main(line, save) are private or local to main as they are declared within main. No other functions have direct access to them. The variable in a routine comes to life only if the function is called and disappears when the function exists.\nGlobal variables which are declared outside can be accessed by any function. They retain their value as they do not disappear.\nThe variable must also be declared in each function that wants to access it. this maybe done wither by explicit extern declaration or implicitly by context.\n#include \u0026lt;stdio.h\u0026gt; #define MAXLINE 1000 /* max input line size*/ char line[MAXLINE]; /* current input line */ char save[MAXLINE]; /* longest line, saved */ int max; /* Max length seen so far */ main() /* find longest line */ { int len; /* current line length */ extern int max; extern char save[];\tmax = 0; while ((len = get_line()) \u0026gt; 0 ) if (len \u0026gt; max) { max = len; copy(); } if (max \u0026gt; 0) /* there was a line */ printf(\u0026#34;%s\u0026#34;, save); } get_line() /* get line into s, return length */ { int c, i; extern char line[]; for (i=0; i\u0026lt;MAXLINE-1 \u0026amp;\u0026amp; (c=getchar()) != EOF \u0026amp;\u0026amp; c!=\u0026#39;\\n\u0026#39;; ++i ) line[i] = c; if (c == \u0026#39;\\n\u0026#39;) { line[i] = c; ++i; } line[i] = \u0026#39;\\0\u0026#39;; return(i); } copy() /* copy s1 to s2; assume s2 big enough */ { int i; extern char line[], save[]; i = 0; while ((save[i] = line[i]) != \u0026#39;\\0\u0026#39; ) ++i; }\rThe external variables are there even when you don\u0026rsquo;t want them.\n","date":"2024-12-18","id":20,"permalink":"/personal-site/docs/c/chapter-1-basic-syntax/","summary":"\u003cp\u003eThe C Programming Language by Kernighan and Ritchie\u003c/p\u003e\n\u003cp\u003eChapter 1-4 - Mostly syntax, Arrays, Strings (Character arrays)\nChapter 5 - Pointers and Arrays\nChapter 6 - Structures\nChapter 7-8 - Detailed C features\u003c/p\u003e","tags":[],"title":"Chapter 1 - Basic Syntax"},{"content":"Section 2.2 - Data types and storage allocation - Character, integer, short, long. Section 2.7 - Type conversion Section 2.9 - Bit-wise Logical operations\nChapter 2 - Types, Operators and Expressions Declaration lists the variables being used, along with their type and perhaps their initial value. Operators specify what is to be done to them. Expressions combine Variables and constants to produce new values.\nThere are signed and unsigned forms of all integer types.\n2.1 Variable names Naming conventions\u0026hellip; lower case for variable names and all upper case for symbolic constants. Significant characters of a name (31), Uniqueness for\n2.2 Data types and sizes char, int, float, double\nQualifiers that can be applied to these basic types are, short, long here int can be omitted also.\nshort int sh; long int sh;\rQualifiers signed, unsigned can be used for char or any integer.\nunsigned char numbers are positive or zero, between 0 and 255, signed char has values b/w -128 127. long double specifies extended-precision floating point.\n2.3 Constants Integer constant long constants with terminal l unsigned constants with terminal u\nsuffixes, ul - unsigned double, f - float, l - long double\nLeading 0 in an integer constant meas octal, decimal 31 can be written as 037 leading 0x means hexadecimal 31 becomes 0x1f\nA Character constant is an integer, 0 is 48 in ASCII these participate in numeric operations just as any other integers, although they are mostly used in comparison with other characters.\nEscape sequences which looks like 2 character but is only one. \\n \\v \\0\nA constant expression involves only constants and are evaluated during compilation time rather than runtime.\n#define MAXLINE 1000 char line[MAXLINE+1]; #define LEAP 1 int days[31+28+LEAP+31];\rstring constant/literal is sequence of zero or more characters surrounded by double quotes \u0026quot;\u0026quot;. Technically it is an array of characters. The strings internal representation has a null character \\0 at the end. So the physical storage is one one more than number of characters.\nstrlen and other string functions are declared in the standard header \u0026lt;string.h\u0026gt;. It returns length of character string excluding \\0\nint strlen(char s[]) { int i; while (s[i] != \u0026#39;\\0\u0026#39;) ++i; return i; }\r'x' \u0026quot;x\u0026quot; are not the same. One is a an integer representing x, and other is array of characters containing x and \\0\nenumeration constant is a list of constant integer values. The first name in enum has value 0, next 1 so on. Unless explicit values are specified. If not all values are specified, unspecified values continue the progression from the last specified.\nenum boolean (NO, YES); enum escapes (BELL = \u0026#39;\\a\u0026#39;, BACKSPACE = \u0026#39;\\b\u0026#39;, TAB = \u0026#39;\\t\u0026#39;); enum months ( JAN = 1, FEB, MAR, APR, MAY); /* FEB = 2, MAR = 3 etc*/\rNames of enum have to be distinct but values need not be. This can be an alternative to #define\n2.4 Declarations All variables must be declared before use, certain declarations can be made implicitly by content.\nint lower, upper, step; char c, line[1000];\rCan be done individually which allows for adding comments.\nA variable can also be initialized during its declaration.\nchar esc = \u0026#39;\\\\\u0026#39;; int i = 0; int limit = MAXLINE+1; float eps = 1.0e-5;\rThe initializer must be a constant expression as initialization is done only once before the program execution. An explicitly initialized automatic variable is initialized each time the function or block it is in is entered; the initializer may be an expression.\nThe qualifier const can be applied to the declaration of any variable to specify the value will not change. It can be used with any arguments. const double e = 2.7182818; const char msg[] = \u0026quot;warning: \u0026quot;; int strlen (const char[]);\nThe result is implementation defined if an attempt is made to change a const\n2.5 Arithmetic Operators + - * / %\nif ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || year % 400 == 0) printf(\u0026#34;%d is a leap year\\n\u0026#34;, year); else printf(\u0026#34;%d is not a leap year\\n\u0026#34;, year);\r% cannot be applied to float or double.\n2.6 Relational and Logical Operators Relational operators \u0026gt; \u0026gt;= \u0026lt; \u0026lt;=\nEquality operators == != These have lower precedence than arithmetic operators.\n\u0026amp;\u0026amp; || is evaluated left to right\nfor (i=0; i \u0026lt; lim-1 \u0026amp;\u0026amp; ( c=getchar()) != \u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; c != EOF; ++i ) s[i] = c;\rBefore reading a new character it is necessary to check that there is room to store it in the array s, so the test i \u0026lt; lim-1 must be made first. If failed, must go to read another character.\n2.7 Type Conversion When an operator has operands of different types, they are converted to a common type according to a small number of rules. Converting int to float that happens automatically as there is no loss in information f + i.\nWhere information might loose info, like long to short, or float to int may draw a warning but are not illegal.\nIn arithmetic operator like + * which take two operands, if they are of different type the lower type is promoted to higher type.\nString to numeric equivalent\nint atoi(char s[]) { int i, n; n = 0; for (i=0; s[i] \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; s[i] \u0026lt;= \u0026#39;9\u0026#39;; ++i) n = 10 * n + (s[i]-\u0026#39;0\u0026#39;); return n; }\rs[i] - '0' gives the numeric value of the character stored in s[i]\n2.8 Increment and Decrement Operators ++ adds one, -- subtracts one. Both can be used as prefix or suffix, both does the job but prefix increments before its values is used, while suffix increments after the value has been used. x = n++ x = ++n\n/* squeeze: delete all c from s */ void squeeze(char s[], int c) { int i, j; for (i = j = 0; s[i] != \u0026#39;\\0\u0026#39;; i++) if (s[i] != c) s[j++] = s[i]; s[j] = \u0026#39;\\0\u0026#39;; }\rEach time a non-c occurs, it is copied into the current j position, and only then is j incremented to be ready for the next character. This is equivalent to\nif (s[i] != c) { s[j] = s[i]; j++; }\ralso\nif (c == \u0026#39;\\n\u0026#39;) { s[i] = c; ++i; }\rIn more compact way\nif ( c == \u0026#39;\\n\u0026#39;) { s[i++] = c; }\rTo concatenate a string to end of another string.\nvoid strcat(char s[], char t[]) { int i, j; i = j = 0; while ( s[i] != \u0026#39;\\0\u0026#39; ) /* find end of s */ i++; while ( (s[i++] = t[j++] ) != \u0026#39;\\0\u0026#39; ) ; }\rAs each member is copied from t to s, the postfix ++ is applied to both to make sure they are in position for the next pass through the loop.\ns[i++] = t[j++] i will be in right position!!\nThe check of != '\\0' is odd !!!\n2.9 Bitwise Operators \u0026amp; | ^ \u0026lt;\u0026lt; \u0026gt;\u0026gt; ~\r2.10 Assignment Operators and Expressions i = i + 2 is i += 2 Here += is the assignment operator.\nMost binary operators have a corresponding assignment operator op= where op is one of + - * / % \u0026lt;\u0026lt; \u0026gt;\u0026gt; \u0026amp; ^ |\nx *= y + 1 is x = x * (y + 1)\nAssignment statement has a value and can occur in expression; while ((c=getchar()) != EOF)\n2.11 Conditional Expressions To get Z as max(a, b)\nif (a \u0026gt; b) z = a; else z = b;\rThe alternate is using ternary operator ? :\nz = (a \u0026gt; b) ? a : b;\rIf (a \u0026gt; b) is true, then z = a, otherwise z = b\nexpr1 ? expr2 : expr3 If 1 is true then 2 is evaluated, if false then 3 is evaluated.\nTo print n elements from an array, 10 per line, with each separated by one blank line including the terminating newline.\nfor (i = 0; i \u0026lt; n; i++) printf( \u0026#34;%6d%c\u0026#34;, a[i], (i%10==9 || i==n-1) ? \u0026#39;\\n\u0026#39; : \u0026#39; \u0026#39; );\r2.12 Precedence and Order of Evaluation Left to right and Right to left associativity.\nWriting code that depends on order of evaluation is a bad programming practice as the order might change depending on the compiler and machine run on.\n","date":"2024-12-18","id":21,"permalink":"/personal-site/docs/c/chapter-2-types-operators-expressions/","summary":"\u003cp\u003eSection 2.2 - Data types and storage allocation - Character, integer, short, long.\nSection 2.7 - Type conversion\nSection 2.9 - Bit-wise Logical operations\u003c/p\u003e","tags":[],"title":"Chapter 2 - Types, Operators, Expressions"},{"content":"Section 3.1 - Semicolon across languages C, JAVA, PHP use ; as terminator for every statement. Python, JavaScript, Shell script use ; as separator, : is terminator.\nSection 3.3 - else if across languages In python elif is a real keyword, while in C, else if is just bad indentation.\nSection 3.4 - Never use the switch statement In exceedingly a rare situation, we might use a \u0026ldquo;jump table\u0026rdquo; where a small integer was used to look up an address \u0026ldquo;Where to go next\u0026rdquo;. This could save a few repeating \u0026ldquo;else if\u0026rdquo; evaluation when computers were slow.\nSection 3.5 - Using comma In C, , is like light version of ; We use it when we are already using a semicolon for something but need two or more statements. for ( i = 0, j = strlen(s)-1; i\u0026lt; j; i++, j++)\nSection 3.5 - Excessive Succinctness / brevity\nwhile ( (c = getchar()) == \u0026#39; \u0026#39; || c == \u0026#39;\\n\u0026#39; || c == \u0026#39;\\t\u0026#39;) ;\rHere Value is accessed, stored in a variable c, compared to see if it is ' ', also compared to see if it is \\n or \\t. All the work has been done in the loop termination test. There is nothing to do in the body of the loop so just a ;\nChapter 3 - Control Flow The control flow statements of a language specify the order in which computations are done.\n3.1 Statements and Blocks An expression followed by a semicolon ; becomes a statement. ; is the statement terminator.\n{} braces are used to group declarations and statements together into a compound statement or block so they are syntactically equal to single statement.\nBecause of this, space and line ends do not matter to C and C-like languages. It is used just to communicate our intent to humans.\n3.2 If-Else if (expression) statement1; else statement2;\rif tests the numeric value of the expression, its true if the value is non zero.\nTo avoid moving a else statement to the inner if\nif (n\u0026gt;0) if (a\u0026gt;b) z = a; else z = b;\rTo avoid this, braces can be used to separate it\nif (n\u0026gt;0) { if (a\u0026gt;b) z = a; } else z = b;\rThe indentation is good to see but compiler doesn\u0026rsquo;t go with that so better to separate using braces.\n3.3 Else-If if (expression) statement else if (expression) statement else statement\rBinary search To find x in a sorted array v with increasing order. Returns position of number in array\nint binarysearch (int x, int v[], int n) { int low, high, mid; low = 0; high = n-1; while ( low \u0026lt;= high) { mid = (low + high)/2; if (x \u0026lt; v[mid]) high = mid +1; else if (x \u0026gt; v[mid]) low = mid + 1; else /* match found */ return mid; } return -1 /* No match */ }\r3.4 Switch switch (expression) { case const_expr: statements case const_expr: statements default: statements }\rThe switch statement is a multi-way decision that tests whether an expression matches one of a number of constatnt integer values, and branches accordingly.\nThe execution starts from the case that matches. default executes if nothing matches, its optional like the else. break causes an immediate exit from the switch.\nIf there is no explicit break, or return the execution falls through to the next level.\nfall through can be used by attaching multiple cases to a single action. which should be used sparingly. Its best defensive programming to add break to each case and include default.\n3.5 Loops - While and For while (expression) statement\rif expression evaluation gives non-zero value, the statement is evaluated. This continues till the expression evaluates to zero.\nfor (expr1; expre2; expre3) statement for (i=0; i\u0026lt;10; i++) statement\rThis is equivalent to\nexpre1; while (expre2) { statement expre3; }\rAny three part can be omitted but the semicolon must remain. Dropping the second one makes it forever true so break and return can be used.\nIt is better to use while when there is no re-initialization and increment.\nwhile ( (c = getchar()) == \u0026#39; \u0026#39; || c ==\u0026#39;\\n\u0026#39; || c == \u0026#39;\\t\u0026#39; ) ; /* Skip white space characters*/\rfor loop is preferable when there is a simple initialization and increment. It keeps the loop control visible at the top of the loop.\nfor ( i = 0; i\u0026lt;n; i++) ...\rShell sort Far apart elements are compared rather than adjacent ones as in simple interchange sort.\nvoid shellsort (int v[], int n) { int gap, i, j, temp; for (gap = n/2; gap \u0026gt; 0; gap /= 2) for (i = gap; i \u0026lt; n; i++) for (j = i-gap; j \u0026gt;= 0 \u0026amp;\u0026amp; v[j] \u0026gt; v[j+gap]; j -= gap) { temp = v[j]; v[j] = v[j+gap]; v[j+gap] = temp; } }\rUsing , to put multiple expressions which are evaluated left to right. The type and value of the result are the type and value of the right operand.\nvoid reverse(char s[]) { int c, i, j; for (i=0, j = strlen(s)-1; i \u0026lt; j; i++, j--) { c = s[i]; s[i] = s[j]; s[j] = c; } }\r3.6 Loops - Do-While do-while tests at the bottom, after making each pass through the loop of the body; the body is always executed at least once.\ndo statement while (expression);\r3.7 Breaks and Continue break gives a way to exit the loops early without the tests at the top or bottom.\nremoving trailing blanks, tabs, newlines\nint trim(char s[]) { int n; for ( n = strlen(s)-1; n \u0026gt;= 0; n--) if ( s[n] != \u0026#39; \u0026#39; \u0026amp;\u0026amp; s[n] != \u0026#39;/t\u0026#39; \u0026amp;\u0026amp; s[n] != \u0026#39;\\n\u0026#39;) break; s[n+1] = \u0026#39;\\0\u0026#39;; return n; }\rstrlen returns the length of the string. The for loop starts at the end and scans backwards looking for the first character that is not a blank or tab or newline.\ncontinue causes next iteration of the enclosing loop to begin. It doesn\u0026rsquo;t apply to switch.\nfor (i = 0; i \u0026lt; n; i++) if (a[i] \u0026lt; 0) /* skips negative values */ continue; ... /* do positive elements */\r3.8 Goto and Labels goto is used sometime to break out of multiple deeply nested loops at once. break only exists from the inner most loop. ( goto is never used, exceptions, throw catch is preferred )\nfor ( ... ) for ( ... ) { ... if (disaster) goto error; } ... error: /* clean up the mess */\rA label has same form as a variable name and is followed by a colon. It can be attached to any statement in the same function as the goto. The scope of the label is the entire function.\n","date":"2024-12-18","id":22,"permalink":"/personal-site/docs/c/chapter-3-control-flow/","summary":"\u003cp\u003e\u003cstrong\u003eSection 3.1 - Semicolon across languages\u003c/strong\u003e\nC, JAVA, PHP use \u003ccode\u003e;\u003c/code\u003e as terminator for every statement.\nPython, JavaScript, Shell script use \u003ccode\u003e;\u003c/code\u003e as separator, \u003ccode\u003e:\u003c/code\u003e is terminator.\u003c/p\u003e","tags":[],"title":"Chapter 3 - Control Flow"},{"content":"Section 4.1 - Automatic variables, parameters and stack Stack - last in first out implementation Call by value says within a function, parameter can be changed but doesn\u0026rsquo;t affect the variable in main. Parameters are \u0026ldquo;isolated\u0026rdquo; within the function. This is accomplished using stack. stack frames were used to the variables of function and removed when it is exited.\nSection 4.3 - Why arrays pass by reference A string in python passed as argument to function acts like a cal by value, not changing things outside of function.\ndef zap(y): print (\u0026#39;Y start zap:\u0026#39;, y) y = \u0026#39;CHANGED\u0026#39; print ( \u0026#39;Y end zap:\u0026#39;, y) x = \u0026#39;ORIGINAL\u0026#39; print(\u0026#39;X before zap:\u0026#39;, x) zap(x) print(\u0026#39;X after zap:\u0026#39;, x) # X before zap: ORIGINAL # Y start zap: ORIGINAL # Y end zap: CHANGED # X after zap: ORIGINAL\rThis happens as value Y was a pointer to it, when it changed in zap it did not affect the pointer of X in main.\nIn C, string is a character array, where array passes by reference. Similar code as above will result in\n// X before zap: ORIGINAL // Y start zap: ORIGINAL // Y end zap: CHANGED // X after zap: CHANGED The array \u0026rsquo;location\u0026rsquo; is passed by \u0026lsquo;value\u0026rsquo; ( a copy made into the stack frame of location) but no copy is made of the data in the array. (so it is pass by location) Since function knows where the data is, it can change the data.\nSection 4.7 - Register variables Register variables are from assembly language which was necessary for performance. There is no way to get the \u0026ldquo;memory address\u0026rdquo; of a variable declared as register. Likely completely ignored in modern compilers. register int x; register char c;\nSection 4.10 - Recursion When a function calls itself it is called \u0026ldquo;recursion\u0026rdquo; Used for writing good code in special situations like parsing expressions like (5 * 2) + ( (6 + 5) * 9) or traversing tree like structures. Uses call stack which can be inefficient as new stack frames get added to the stack with variables and automatic variables.\nSection 4.11 - Pre-processor - Compiler architecture There has been many evolution in language, library, hardware and operating system. C always operates in an environment, even though the language has changed\nThe Pre-processor allowed for adjusting to these changes without breaking backwards compatibility. It is not a compiler, it is a C source code to C source code translator. It expands the include files, also many # sign.\n#include \u0026lt;stdio.h\u0026gt; #ifdef USE_LONG #define INT_32 long #else #define INT_32 int #endif\rChapter 4 - Function and Program Structure Functions break large computing tasks into smaller ones and enables others to build upon what others have done instead of starting over from scratch.\n4.1 Basics of Functions Each function definition has the form\nreturn-type function-name (argument-declarations) { declarations and statements }\rIf the return type is omitted, int is assumed.\nCommunication between the function is through arguments and and values returned by the functions, and through external variables. Function can be in any order and in multiple files.\nreturn expression, the expression will be converted to the return-type if necessary. Control returns to the caller even when there is no expression.\nCompiling and Running cc command compiles the mentioned file or files. cc main.c getline.c strindex.c , this compiles the source files into object files main.o getline.o strindex.o and loads them all into an executable file called a.out\n4.2 Functions Returning Non-integers If a name which has not been previously declared occurs in an expression and followed by a left parenthesis, it is declared by context to be a function name. while (get_line(line, MAXLINE) \u0026gt; 0)\nA type has to be declared to a function as to what it returns, void type was invented to show a function which returns nothing.\nTo convert a string to a double precision floating point number using atof, it should be preceded by the type of it. double atof (char s[]) {} double sum, atof (char s[]) multiple declarations. Second, the calling routine must know that atof returns a non-int value by declaring atof explicitly.\nIf the function takes arguments, declare them; If it takes no arguments, use void\nint atoi (char s[]) { double atof(char s[]); return (int) atof(s); }\rHere the the return of atof which is a double is converted to int and returned from atoi\n4.3 External Variables Internal which describes the arguments and automatic variables defined inside functions. External variables are globally accessible, they provide an alternative to function arguments and returned values for communicating data between functions. Any function can access this by referring to its name.\nC does not allow functions to be defined inside other functions, so functions are always external. Any function may access an eternal variable by referring to it by name.\nIf a large number of variables have to be shared between functions, then external variables are more convenient than a long argument lists.\nExternal variables are also more useful because of their greater scope and lifetime. Automatic variables are internal to a function which come into existence when the function is entered and disappears when it is left.\n4.4 Scope Rules The scope of a name is the part of the program over which the name is defined. For an automatic variable declared at the beginning of a function, the scope is the function in which the name is declared. Variables of the same name in different functions are unrelated. Same is true for the arguments of a function.\nIf an external variable is to be referred before it is defined, or if it is defined in a different source file from the one where it is being used, then an extern declaration is mandatory.\nA declaration announces the property of a variable (primarily its type, size); A definition also cases storage to be set aside.\nint sp; double val[MAXVAL];\rappear outside any function, they define the external variables int and val, causes storage to be set aside, and also serve as the declarations for the rest of the source file.\nextern int sp; extern double val[];\rdeclare for the rest of the source file that sp is an int and val is a double array (size to be determined and allocated elsewhere) but they do not create the variables or reserve storage for them.\nThere must be only one definition of an external variable among all files that make up the source program; other files must contain extern declaration to access it. There maybe a extern declaration within the file having the definition. Any initialization of an external variable goes only with the definition. Array size must be specified with the definition, but are optional with extern declaration.\n// in file 1: extern int sp; extern double val[]; void push (double f) { ... } double pop(void) { ... } // in file 2: int sp = 0; double val[MAXVAL];\rSince extern declaration lies outside the function in file one, they apply to all functions; one set of declarations suffice for all file one.\n4.5 Header Files It is probably best to have one header file that contains everything that is to be shared between any two parts of the program like definitions and declarations; So that there will be only one copy to get and keep right as the program evolves.\nThese common material are placed in a header file calc.h which will be included as necessary in other files.\n// calc.h #define NUMBER \u0026#39;0\u0026#39; void push(double); double pop(void); int getop(char[]); int getch(void); void ungetch(int);\r// main.c #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h? #include \u0026#34;calc.h\u0026#34; #define MAXOP 100 main() { ... }\r4.6 Static Variables The static declaration, applied to an external variable or function, limits the scope of that object to the rest of the source file being compiled only. So it provides a way to hide names which must be external but yet should not be visible to users of other files.\nstatic char buf[BUFSIZE]; static int bufp = 0; int getch(void) { ... } void ungetch(int c) { ... }\rNo other routines will be able to access buf bufp and those names will not conflict with the same names in other files of the same program.\nFunctions are global, visible to any part of the entire program. If a function is declared static, its name is invisible outside the file in which is declared.\nInternal static variables are local to a particular function just as automatic variables, but they remain in existence rather than coming and going each time the function is activated. This means that the internal static variables provide private, permanent storage within a single function.\n4.7 Register Variables register variables are to be placed in the machine registers which may result in faster programs. Which means register declaration advises the compiler that the variable will be heavily used. But compilers are free to ignore the advice.\nregister int x; register char c;\rregister variables can only be applied to automatic variables and parameters of a function.\nf(register unsigned m, register long n) { register int i; ... }\rDue to hardware imitation, only few variables in each function may be kept in registers and only certain types are allowed. It is not possible to take address of a register variable, regardless of it is placed in a register or not.\n4.8 Block Structure Function cannot be defined within a function but a variable can be defined in a block-structured fashion within a function. variables declared in this way hide any identically named variable in outer block, and remain in existence until the matching right brace.\nif (n\u0026gt;0) { int i; /* declaring a new i */ for ( i = 0; i\u0026lt;n; i++) ... }\rAutomatic variables and formal parameters also hide eternal variables and functions of the same name. Better to avoid using same names which conceal names in outer scope to avoid confusion.\n4.9 Initialization In the absence of explicit initialization, external and static variables are guaranteed to be initialized to zero; automatic and register variables have undefined (garbage) initial values.\nScalar variables, may be initialized when they are defined, by following the name with an equal sign and an expression.\nint x = 1; char squota = \u0026#39;\\\u0026#39;\u0026#39;; long day = 100L * 60L * 60L * 24L // milliseconds in a day external and static variables, the initializer must be a constant expression; the initialization is done once, conceptually before the program begins execution.\nautomatic and register variables, the initializer is not restricted to being a constant; it can even be a previously defined value, even function calls.\nInitializing a array of int, supplying initializer less than specified length adds zero, supplying more causes errors. There is no way to initialize an element in the middle of an array without supplying all preceding values. int days[] = {31, 28, 31, ...}\nCharacter arrays are a special case of initialization; a string may be used instead of the braces and commas notation. char pattern = \u0026quot;ould\u0026quot;; char patter[] = { 'o', 'u', 'l', 'd', '\\0' };\n4.10 Recursion A function may call itself directly or indirectly. When a function calls itself recursively, each invocation gets a fresh set of all the sutomatic variables independent of the previous set.\nQuick sort using the middle of array for partitioning.\nvoid qsort(int v[], int left, int right) { int i, last; void swap(int v[], int i, int j); if (left \u0026gt;= right) return; /* Less than 2 elements, do nothing */ swap(v, left, (left + right)/2 ); last = left; for ( i = left + 1; i \u0026lt;= right; i++) if (v[i] \u0026lt; v[left]) swap(v, ++last, i); swap(v, left, last); qsort(v, left, last-1); qsort(v, last+1, right); } void swap (int v[], int i, int j) { int temp; temp = v[i]; v[i] = v[j]; v[j] = temp; }\rThe standard library includes a version of qsort that can sort objects of any type.\n4.11 The C Preprocessor Preprocessor is a separate first step in compilation. examples, #include to include the contents of a file during compilation, #define to replace a token by an arbitrary sequence of characters.\n4.11.1 File Inclusion #include \u0026quot;filename\u0026quot; or #include \u0026lt;filename\u0026gt; is replaced by the contents of the file name.\nIf the file name is quoted, searching for the file typically begins where the source program was found; if it is not there, or file name has \u0026lt;\u0026gt;, searching follows an implementation defined rule to find the file. An included file may itself contain #include lines.\n4.11.2 Macro Substitution #define name replacement text subsequent occurrences of the token name will be replaced by the replacement text.\n4.11.3 Conditional Inclusion Controlling pre-processing itself with conditional statements that are evaluated during pre-processing.\n#if !defined(HDR) #define HDR #endif\r#if SYSTEM == SYSV #define HDR \u0026#34;sysv.h\u0026#34; #elif SYSTEM == BSD #define HDR \u0026#34;basd.h\u0026#34; #elif SYSTEM == MSDOS #define HDR \u0026#34;msdos.h\u0026#34; #else #define HDR \u0026#34;default.h\u0026#34; #endif #include HDR\r#ifdef #ifndef\n","date":"2024-12-18","id":23,"permalink":"/personal-site/docs/c/chapter-4-function-program-structure/","summary":"\u003cp\u003e\u003cstrong\u003eSection 4.1 - Automatic variables, parameters and stack\u003c/strong\u003e\nStack - last in first out implementation\nCall by value says within a function, parameter can be changed but doesn\u0026rsquo;t affect the variable in main. Parameters are \u0026ldquo;isolated\u0026rdquo; within the function. This is accomplished using stack.\nstack frames were used to the variables of function and removed when it is exited.\u003c/p\u003e","tags":[],"title":"Chapter 4 - Function, Program Structure"},{"content":"Section 5.1 - Pointers Pointers are where we move \u0026ldquo;below abstraction\u0026rdquo;, where C can replace assembly language.\n#include \u0026lt;stdio.h\u0026gt; int main() { int x, y; int* px; x = 42; px = \u0026amp;x; y = *px; printf( \u0026#34;%d %p %d\\n\u0026#34;, x, px, y); } // 42 0x16f5b31ec 42 int* integer of type pointer \u0026amp;x to get the address of x *px a look up operator or de-reference operator to get the value in location.\nSection 5.2 - Call by Reference / Call by value Pointers give the ability to call by reference.\nSection 5.4 - Pointer arithmetic A pointer to a integer is different than a pointer to a character. The addresses are of the same size, but If one is added to character, one added. If one is added to an integer, it adds four. as integers take four characters.\nSo it is a pointer to a thing with a type that is pointed to. So type is important.\n#include \u0026lt;stdio.h\u0026gt; int main() { char ca[10], *cp; int ia[10], *ip; cp = ca + 1; ip = ia + 1; printf( \u0026#34;ca %p cp %p\\n\u0026#34;, ca, cp); printf( \u0026#34;ia %p ip %p\\n\u0026#34;, ia, ip); }\rSection 5.6 - Pointers are not integers Treating pointers as integer almost works. Addresses are positive numbers that start from zero.\nVoid Pointer - provided a way to return a \u0026ldquo;generic\u0026rdquo; address of memory without choosing the type of the data that would be stored in the memory. void * alloc() int *val = (int *) alloc(42)\nBuffer overflow The most major security threat, A string has no length, but no run time length so excess is stored it keeps on storing beyond its limit into other part of the program, overflowing. Do not use gets() for input\nSection 5.7, 5.10 to 5.12 skim\nChapter 5 - Pointers and Arrays A pointer is a variable that contains the address of a variable. Pointers and Arrays are closely related.\nThe type void * (pointer to void) replaces char * as the proper type for a generic pointer.\n5.1 Pointers and Addresses A pointer is a group of cells (often two or four) that can hold an address. In memory, any byte can be a char, a pair of one-byte cells are short and four adjacent bytes form a long.\n$ is the Unary operator that gives the address of an object, so p = \u0026amp;c; assigns the address of c to variable p, and p is said to \u0026lsquo;point to\u0026rsquo; c.\nThe \u0026amp; operator applies only to objects in memory like variables and array elements. Not to expressions (x+1) \u0026amp;3, constants or register variables.\n* is the in-direction or de-referencing operator; * treats its operand as the ultimate target, and accesses that address to fetch the contents. (When applied to a pointer, it accesses the object the pointer points to) y = *p\nx and y are integers and ip is a pointer to int.\nint x = 1, y = 2, z[10]; int *ip; // pointer to int ip = \u0026amp;x; // now points to x y = *ip; // y is now 1, i.e y = x *ip = 0; // x = 0 ip = \u0026amp;z[0]; // ip now points to z[0] int The declaration int *ip; is an mnemonic, meaning *ip is an int\ndouble *dp, atof(char *); *dp and atof(s) have values of double, and the argument of of atof is a pointer to char.\nEvery pointer points to a specific datatype; A pointer points to a particular kind of object. (exception, a pointer to void is used to hold any type of pointer but cannot be de-referenced itself)\nIf ip points to (address of) integer x , then *ip can occur in any context where x could.\n*ip = *ip + 10; // increment x by 10 // incrementing the value by 1, different methods y = *ip + 1; *ip += 1; ++*ip; (*ip)++\rSince unary operators like * ++ associate right to left, the () needed to increment what ip points to instead of ip itself. (removing the * would increment the position of pointer by one bit)\nSince pointers are variables, they can be used without de-referencing. Suppose iq is another pointer to int iq = ip copies the content of ip to iq, making it point to whatever ip was pointing to.\n(\u0026amp;x gets address of x, ip has just address, *ip gets the object from address/value)\n5.2 Pointers and Function Arguments Pointer arguments allow a function to access and change objects in the function that called it.\nCall by Value C passes arguments to functions by value, so the called function cannot alter the variable in the calling function.\nvoid swap(int x, int y) // wrong { int temp; temp = x; x = y; y = temp; }\rFunction swaps the copies of a and b, cannot affect the arguments a and b in the routine that called it.\nBy passing Pointers to the values, it can be swapped.\nswap(\u0026amp;a, \u0026amp;b); void swap(int *px, int *py) // pointers of x and y { int temp; temp = *px; *px = *py; *py = temp; }\r5.3 Pointers and Arrays Any operation that can be achieved by array sub-scripting can also be done with pointers.\nint a[10]; defines array of size 10, with objects named from a[0]...a[9] a[i] refers to the i th element of the array.\nint *pa; pa = \u0026amp;a[0]; Sets pa the pointer/address to element zero of a.\nx = *pa will copy the first element of array a[0] into x.\nThen pa+1 will point to the next element. which is pointer arithmetic. So the corresponding between indexing and pointer arithmetic is very close.\nBy definition, The value of a variable or expression of type array is the address of the zero element of the array.\npa = \u0026amp;a[0];. pointer pa and array a has the same value. so pa = a; is also same.\na[i] is equal to * (a+i) meaning the location is gotten by taking location of a and adding i places to it. If pa is a pointer, pa[i] is identical to * (pa+i). In short, array-index expression is equivalent to one written as a pointer and offset.\nThere is one difference, A pointer is a variable, so pa = a and pa++ are legal. Array names are not a variable; so a = pa and a++ are illegal. (incrementing array??)\nWhen an array name is passed to a function, the location of the initial element is passed. In that called function, this argument is a local variable. An array name parameter is a pointer (a variable containing an address)\nint strlen(char *s) { int n; for (n = 0; *s != \u0026#39;\\0\u0026#39;, s++) n++; return n; }\rSince s is a pointer, incrementing is legal. s++ has no effect on the character string but merely increments strlen private copy of the pointer.\nchar s[]; and char *s; are equivalent.\nIt is also possible to pass part of an array by passing the pointer to beginning of the subarray. if a is an array, f(\u0026amp;a[2]) and f(a+2) both pass the function f the address of subarray which starts at a[2]. Within f the parameter declaration can be,\nf(int arr[]) { ... } // or f(int *arr) { ... }\rIf elements exist, it also possible to index backwards in an array p[-1] p[-2] and so on which refer to the elements that precede p[0]\n5.4 Address Arithmetic If p is a pointer, then p++ increments p to point to the next element of whatever kind of object p points to. p+=i increments p to i elements beyond where it currently does. These are the simplest pointer or address arithmetic.\nRudimentary storage allocator alloc(n) and afree(p). The storage managed by these are a stack, last-in, first-out. The standard library provides malloc and free that have no such restrictions.\nPointer subtraction is also valid: if p and q point to members of the same array, p-q is the number of elements between p \u0026amp; q.\nstrlen(s) char *s; { char *p = s; while(*p != \u0026#39;\\0\u0026#39;) p++; return(p-s); }\rp is initialized to s, to point to the first character. p++ advances p to next character each time, and p-s gives the number of characters advanced over, that is the length of the string.\nPointer arithmetic is consistent, if we had been dealing with float's which occupy more storage than char, and if p were a pointer to float, p++ would advance to the next float.\nAll the pointer manipulations automatically take into account the size of the object pointed to, so nothing else has to be altered.\nExcept adding, subtracting a pointer and integer and comparing two pointers, all other pointer arithmetic are illegal. Adding two pointers or multiply or divide or shift or mask or add float or double to them is not permitted.\n5.5 Character Pointers and Functions A string constant is an array of characters with \\0 so the programs can find the end.\nAs an argument to a function, like printf(\u0026quot;Hello\\n\u0026quot;);. The access to it is given by a character pointer to the beginning of the character array.\nC does not provide any operators for processing whole string of characters as a unit. char *pmessage which initializes a pointer pmessge = \u0026quot;now is the time\u0026quot; this assigns a pointer to the character array.\nchar amessage[] = \u0026quot;now is the time\u0026quot;; this is an array. char *pmessage = \u0026quot;now is the time\u0026quot;; is a pointer.\namessage is an array, just big enough to hold the sequence of characters and \\0 that initializes it. Individual characters within the array may be changed but amessage will always refer to the same storage. pmessage is a pointer, initialized to point to a string constant; the pointer may subsequently be modified to point elsewhere but the result is undefined if the string constant is modified.\nTo copy string t to string s. ???\nvoid strcpy(char *s, char *t) { int i; i = 0; while ( (s[i] = t[i]) != \u0026#39;\\0\u0026#39; ) i++; }\rvoid strcpy(char *s, char *t) { int i; i = 0; while ( (*s = *t) != \u0026#39;\\0\u0026#39; ) { s++; t++; } }\rvoid strcpy(char *s, char *t) { while ( (*s++ = *t++) != \u0026#39;\\0\u0026#39;) ; }\rthis moves the increment of s and t into the part of the loop.\n5.6 Pointer Arrays; Pointers to Pointers Since pointers are variables themselves, they can be stored in array just as other variables.\nWhen sorting, two out of order lines which have to be exchanged, the pointers in the pointer array are exchanged, not the text lines themselves. which avoids complicated storage management with moving the lines themselves.\n5.7 Multi-dimensional Arrays 5.8 Initialization of Pointer Arrays Pointer Arrays; Pointers to pointers\nThe pointers themselves can be stored in an array. . . .\n5.9 Pointers vs Multi-dimensional Arrays 5.10 Command-line Arguments 5.11 Pointers to Functions 5.12 Complicated Declarations ","date":"2024-12-18","id":24,"permalink":"/personal-site/docs/c/chapter-5-pointers-arrays/","summary":"\u003cp\u003e\u003cstrong\u003eSection 5.1 - Pointers\u003c/strong\u003e\nPointers are where we move \u0026ldquo;below abstraction\u0026rdquo;, where C can replace assembly language.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003epx\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"n\"\u003ey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;%d %p %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epx\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e//  42  0x16f5b31ec  42\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003eint*\u003c/code\u003e integer of type pointer\n\u003ccode\u003e\u0026amp;x\u003c/code\u003e to get the address of x\n\u003ccode\u003e*px\u003c/code\u003e a look up operator or de-reference operator to get the value in location.\u003c/p\u003e","tags":[],"title":"Chapter 5 - Pointers, Arrays"},{"content":"Mid Chapter Surprise Structures 6.1 - 6.4 - New type Data Structures 6.5, 6.6 - Applications of structures\n6.1 Structures A structure is a user defined type that contain one or more types that can be treated as a unit. The elements or variables mentioned in a structure are called members The dot operator allows us to access the members of the structure.\n# include \u0026lt;stdio.h\u0026gt; int main() { struct point { double x; double y; }; struct point p1, p2; p1.x = 3.0; p1.y = 4.0; p2 = p1; printf( \u0026#34;%f %f\\n\u0026#34;, p2.x, p2.y); } // 3.000000 4.000000 call by value in structure\n#include \u0026lt;stdio.h\u0026gt; struct point { double x; double y; }; void func(pf) struct point pf; { pf.x = 9.0; pf.y = 8.0; printf(\u0026#34;func %f %f\\n\u0026#34;, pf.x, pf.y); } int main() { struct point pm; pm.x = 3.0; pm.y = 4.0; printf( \u0026#34;main %f %f\\n\u0026#34;, pm.x, pm.y); func(pm); printf( \u0026#34;back %f %f\\n\u0026#34;, pm.x, pm.y); } /* main 3.000000 4.000000 func 9.000000 8.000000 back 3.000000 4.000000 */ Defining a new type called point, then making objects of that type and initializing its members. The passed struct to function is also accepted as struct\n6.2 Structures and Pointers\n#include \u0026lt;stdio.h\u0026gt; int main() { struct point{ double x; double y; }; struct point pt, *pp; pp = \u0026amp;pt; pt.x = 3.0; (*pp).y = 4.0; printf(\u0026#34;%p %f %f\\n\u0026#34;, pp, (*pp).x, pp-\u0026gt;y ); } // 0x16d72fle0 3.000000 4.000000 Pointer *pp also needs a type it represents. here it is a struct\nTo pass a structure by reference / address using \u0026amp;\n#include \u0026lt;stdio.h\u0026gt; struct point { double x; double y; }; void func(pp) struct point *pp; { pp-\u0026gt;x = 9.0; pp-\u0026gt;y = 8.0; printf(\u0026#34;func %f %f\\n\u0026#34;, pp-\u0026gt;x, pp-\u0026gt;y); } int main() { struct point pm; pm.x = 3.0; pm.y = 4.0; printf( \u0026#34;main %f %f\\n\u0026#34;, pm.x, pm.y); func(\u0026amp;pm); printf( \u0026#34;back %f %f\\n\u0026#34;, pm.x, pm.y); } /* main 3.000000 4.000000 func 9.000000 8.000000 back 9.000000 8.000000 */ func(\u0026amp;pm); passes the address of pm to the function, The type in func is defined as struct point *pp means we are getting as parameter an address, not the value, The value will be struct. Now pp points to pm and members are changed.\n6.2 Storage Allocation sizeof() operator to find the size of something in characters.\n#include \u0026lt;stdio.h\u0026gt; int main() { struct point { double x; double y; }; struct point pt, *pp; printf(\u0026#34;sizeof pt %ld\\n\u0026#34;, sizeof(pt)); printf(\u0026#34;sizeof pp %ld\\n\u0026#34;, sizeof(pp)); printf(\u0026#34;sizeof point %ld\\n\u0026#34;, sizeof(struct point)); // size of a type } /* sizeof pt 16 sizeof pp 8 sizeof point 16 */\r6.2 Dynamic memory allocation\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { struct point { double x; double y; }; struct point *pp; pp = (struct point *) malloc(sizeof(struct point)); pp-\u0026gt;x = 3.0; (*pp).y = 4.0; printf(\u0026#34;%p %f %f\\n\u0026#34;, pp, (*pp).x, pp-\u0026gt;y); } // 0x600002a 3.000000 4.000000 stdlib.h has to be included to use malloc *pp represents the 8 character address, not the struct two doubles of 16 bits. malloc(sizeof(struct point) will find free memory of character size 16. (struct point *) casting the returned address from malloc, pointer to a point ????\n6.5.1 A list of Strings Combining Dynamic memory and Structures to create lists\nPrinting out lines in a file using lists in python.\nlines = list() hand = open(\u0026#39;romeo.txt\u0026#39;) for line in hand: lines.append(line.rstrip()) for line in lines: print(line)\r6.5.1 Self Referential Structures In C we need to create build a list() structure before we can use it. The entries in the list will be stored in dynamically allocated memory. Each list entry contains some data and links to other members of the list using pointers.\nstruct lnode { char *text; // pointer to a character array struct lnode *next; };\rLinked Lists\nstruct lnode { char *text; struct lnode *next; }; struct lnode *head; struct londe *tall;\rHead points to the first item in the list, there is text and next in it, next is the address to the next thing. Tail has text and the next will be Null, which is indicator of end of list.\nwhile(fgets(line, MAXLINE, stdin) != NULL) { char *save = (char *) malloc(strlen(line)+1 ); strcpy(save, line); struct lnode *new = (struct lnode *) malloc(sizeof(struct lnode)); if ( tail != NULL ) tail-\u0026gt;next = new; new-\u0026gt;text = save; new-\u0026gt;next = NULL; tail = new; if ( head == NULL ) head = new; }\rwhile(fgets(line, MAXLINE, stdin) != NULL) { reads a value into (line) automatic character array variable (max 1000 characters).\nchar *save = (char *) malloc(strlen(line)+1 ); strcpy(save, line); Allocate memory for the new line and copy the contents from line to save. Allocating memory for a new string using malloc, which is given the length of string plus one extra line end character. The address is cast to a char *, it is assigned to save.\nAllocating memory for a new sruct lnode. struct lnode *new = (struct lnode *) malloc (sizeof(struct lnode));\nif ( tail != NULL ) tail-\u0026gt;next = new; Append the new node to the end of the linked list.\nnew-\u0026gt;text = save; Point to text pointer in the lnode to the recently allocated copy of line.\nnew-\u0026gt;next = NULL; Mark the newly allocated struct lnode as the last item in the list using NULL\ntail = new; Update tail to point to the newly allocated the last item in the list.\nDraw a Picture and arrows\nWalking the list Deleting the node (First, middle, last)\n6.5.1 Doubly Linked list Doubly linked list allows for reversing a string easy. To scan a linked list in reverse, we need a \u0026ldquo;previous\u0026rdquo; entry in addition to the \u0026ldquo;next\u0026rdquo; entry. Since it has links to both, it is called doubly linked list pointing to front and back.\nstruct lnode { char *text; struct lnode *prev; struct lnode *next; }; int main() { struct lnode *head = NULL; struct lnode *tail = NULL; struct lnode *current; char line[MAXLINE]; while(fgets(line, MAXLINE, stdin) != NULL) { char *save = (char *) malloc(strlen(line)+1 ); strcpy(save, line); struct lnode *new = (struct lnode *) malloc(sizeof(struct lnode)); if ( tail != NULL ) tail-\u0026gt;next = new; new-\u0026gt;text = save; new-\u0026gt;next = NULL; new-\u0026gt;prev = tail; tail = new; if ( head == NULL ) head = new; } for (current = tail; current != NULL; current = current-\u0026gt;prev ) { printf( \u0026#34;%s\u0026#34;, current-\u0026gt;text); } }\r6.8 Unions A union is like a structure but all of the elements of the union overlap and allow you to view the same area of memory as multiple types.\n","date":"2024-12-18","id":25,"permalink":"/personal-site/docs/c/chapter-6-structures/","summary":"\u003cp\u003eMid Chapter Surprise\nStructures 6.1 - 6.4 - New type\nData Structures 6.5, 6.6 - Applications of structures\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003e6.1 Structures\u003c/strong\u003e\u003c/em\u003e\nA structure is a user defined \u003ccode\u003etype\u003c/code\u003e that contain one or more types that can be treated as a unit.\nThe elements or variables mentioned in a structure are called \u003ccode\u003emembers\u003c/code\u003e\nThe dot operator allows us to access the members of the structure.\u003c/p\u003e","tags":[],"title":"Chapter 6 - Structures"},{"content":"Chapter 6 - Structures A structure is a collection of one or more variables, possibly of different types, grouped together under a single name for convenient handling. Structures help to organize complicated data, allowing a group of related variables to be treated as a unit instead of separate entities. Employee has many attributes, a point is a pair of co ordinates etc.\n6.1 Basics of Structures The keyword struct introduces a structure declaration, which is a list of declarations enclosed in braces. An optional name called structure tag may follow the struct keyword. (here point) which can be used as shorthand. The variables names in it are called members.\nBasic object is a point which has x and y co-ordinate, both integers.\nstruct point { int x; int y; };\rA structure member or tag and an ordinary variable can have the same name without conflict, since they can always be distinguished by context. The same member name may occur in closely related objects.\nA struct declaration defines a type. The right brace that terminates the list of members may be followed by a list of variables, just as any basic types.\nstruct { ... } x, y, z; is similar to int x, y, z; in a sense, it declares x, y, z to be variables of the named type and sets aside space for them.\nA structure declaration that is not followed by a list of variables reserves no storage; it merely describes a template or shape of a structure.\nstruct point pt; defines a variable pt which is a structure of type struct point.\nstruct date { int day; int month; int year; int yearday; char mon_name[4]; }; struct date d = { 14, 7, 1776, 186, \u0026#34;JUl\u0026#34; }; // initialized with list of initializers. struct date d; template without without list of variables.\nOperator . connects the structure name and member name. A member of a structure is accessed / referred to in an expression by a construction of form, structure-name.member printf(\u0026quot;%d, %d\u0026quot;, pt.x, pt.y) to print co-ordinates of the point pt\nTo set leap from the date in structure d\nleap = d.year%4 == 0 \u0026amp;\u0026amp; d.year%100 != 0 || d.year%400 == 0;\rto check month name,\nif (strcmp(d.mon_name, \u0026#34;Aug\u0026#34;) == 0 ) ...\rto convert first character of month name to lower case,\nd.mon_name[0] = lower(d.mon_name[0]);\rStructures can be nested (a rectangle is a pair of points that denotes diagonally opposite corners)\nstruct rect { struct point pt1; struct point pt2; };\rA payroll record\nstruct person { char name[NAMESIZE]; char address[ADRSIZE]; double salary; struct date birthday; struct date hiredate; };\rThe person structure contains two date structures. struct person emp; declaring emp; emp.birthday.month refers to month of birth. . associates from left to right.\nIf declared screen as struct rect screen;, then screen.pt1.x refers to x co ordinate of pt1 member of screen\n6.2 Structures and Functions There are number of restrictions on C structures. The only legal operations on a structure are taking its address with \u0026amp; and accessing its members, copying it, or assigning to it as a unit (as arguments), (copying structures make a shallow copy, pointers are copied but does not make copy of the data to which the pointers point to. Structures in structures are also shallow copied)\nStructures may not be compared. A structure may be initialized by a list of constant member values; an automatic structure may be initialized by an assignment.\nmakepoint will take two integers and return a point structure:\nstruct point makepoint(int x, int y) { struct point temp; temp.x = x; temp.y = y; return temp; }\rArgument name and member names are same but there is no conflict. makepoint can be used to make any structure dynamically or provide structure arguments to a function.\nstruct rect screen; struct point middle; struct point makepoint(int, int); screen.pt1 = makepoint(0,0); screen.pt2 = makepoint(XMAX, YMAX); middle = makepoint( (screen.pt1.x) + (screen.pt2.x)/2, (screen.pt1.y) + (screen.pt2.y)/2);\rFunctions for doing arithmetic on points.\nstruct addpoints (struct point p1, struct point p2) { p1.x += p2.x; p1.y += p2.y; return p1; }\rHere both arguments and the return value are structures. . . .\nPassing structures to a function as a pointer is more efficient than to copy the whole structure. struct point *pp; says, pp is a pointer to a structure of type strcut point. If pp points to a point structure, *pp is the structure, and (*pp).x and (*pp).y are the members.\nstruct point origin, *pp; pp = \u0026amp;origin; printf(\u0026#34;origin is (%d, %d)\\n\u0026#34;, (*pp).x, (*pp).y);\rA shorthand to represent a pointer p to a structure. p-\u0026gt;member-of-structure\nprintf(\u0026#34;origin is (%d, %d)\\n\u0026#34;, pp-\u0026gt;x, pp-\u0026gt;y);\rboth . and -\u0026gt; associate from left to right.\nstruct rect r, *rp = \u0026amp;r; r.pt1.x (r.pt1).x rp-\u0026gt;pt1.x (rp-\u0026gt;pt1).x // all four are equivalent ++p-\u0026gt;len increments len, not p because it means++(p-\u0026gt;len). (++p)-\u0026gt;len increments p before accessing len (p++)-\u0026gt;len increments p afterwards.\nSimilarly *p-\u0026gt;str fetches whatever str points to; *p-\u0026gt;str++ increments str after accessing whatever it points to; (*p-\u0026gt;str)++ increments whatever str points to; *p++-\u0026gt;str increments p after accessing whatever str points to.\n6.3 Arrays of Structures To count the occurrences of each keyword in C. Each keyword is a pair of word and its count:\nchar *word; int count;\rA structure with an array:\nstruct key { char *word; int count; } keytab[NKEYS];\rThe structure declaration declares a structure of type key, defies an array keytab of structures in this type and sets aside storage for them. Each element of the array is a structure. also written as.\nstruct key { char *word; int count; }; struct key keytab[NKEYS];\rSince keytab contains constant set of names, it is easier to make it an external variable and initialize it when it is defined.\nstruct key { char *word; int count; } keytab [] = { {\u0026#34;auto\u0026#34;, 0}, {\u0026#34;break\u0026#34;, 0}, ... }\rThe inner braces are not necessary when initializers are simple variables or character strings but not in pairs corresponding to the structure members.\nThe keyword counting program\u0026hellip;\u0026hellip;..\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define MAXWORD 100 int getword(char *, int); int binsearch(char *, struct key, int); // count C keywords main() { int n; char word[MAXWORD]; while (getword(word, MAXWORD) != EOF) if ( isalpha(word[0]) ) if ( (n = binsearch(word, keytab, NKEYS)) \u0026gt;= 0) keytab[n].count++; for (n = 0; n \u0026lt; NKEYS; n++) if (keytab[n].count \u0026gt; 0) printf(\u0026#34;%4d %s\\n\u0026#34;, keytab[n].count, keytab[n].word); return 0; } // find words in tab[0]...tab[n-1] int binsearch(char *word, struct key tab[], int n) { int cond; int low, mid, high; low = 0; high = n-1; while (low \u0026lt;= high) { mid = (low+high)/2 if ( (cond = strcomp(word, tab[mid].word)) \u0026lt; 0) high = mid -1; else if (cond \u0026gt; 0) low = mid +1; else return mid; } return -1; }\rgetword finds a word, which is copied into the array named as its first argument.\n// get next word or character from input int getword(char *word, int lim) { int c, getch(void); void ungetch(int); char *w = word; while ( isspace(c = getch()) ) ; if ( c != EOF ) *w++ = c; if (!isalpha(c)) { *w = \u0026#39;\\0\u0026#39;; return c; } for ( ; --lim \u0026gt; 0; w++) if (!isalnum(*w = getch()) ) { ungetch(*w); break; } *w = \u0026#39;\\0\u0026#39;; return word[0]; }\rgetword uses getch and ungetch from chapter 4. isspace to skip space and isalpha to identify letters, isalnum to identify letters and digits; all are from \u0026lt;ctype.h\u0026gt;\n6.4 Pointers to Structures Rewriting the keyword counting program again using pointers instead of array indices. main and binsearch need modification.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define MAXWORD 100 int getword(char *, int); struct key *binsearch(char *, struct key, int); // changed // count C keywords main() { char word[MAXWORD]; struct key *p; while (getword(word, MAXWORD) != EOF) if ( isalpha(word[0]) ) if ( (p = binsearch(word, keytab, NKEYS)) != NULL ) p-\u0026gt;count++; for (p = keytab; p \u0026lt; keytab + NKEYS; p++) if (p-\u0026gt;count \u0026gt; 0) printf(\u0026#34;%4d %s\\n\u0026#34;, p-\u0026gt;count, p-\u0026gt;word); return 0; } // find words in tab[0]...tab[n-1] struct key *binsearch(char *word, struct key tab[], int n) { int cond; struct key *low = \u0026amp;tab[0]; struct key *high = \u0026amp;tab[n]; struct key *mid; while (low \u0026lt; high) { mid = low + (high-low) /2; if ( (cond = strcomp(word, mid-\u0026gt;word)) \u0026lt; 0) high = mid; else if (cond \u0026gt; 0) low = mid + 1; else return mid; } return NULL; }\rThe declaration of binsearch indicates that it return a pointer to struct key instead of an integer. this is declared both in function prototype and in binsearch. If it finds a word, it return a pointer to it otherwise NULL.\nThe elements of keytab are now accessed by pointers. which changes binsearch. high low are pointers. computation of mid has to change as it is illegal to to add pointers. but subtraction is legal. high-low is number of elements so mid = low + (high-low) / 2 sets mid to element halfway between high and low.\n// get next word or character from input int getword(char *word, int lim) { int c, getch(void); void ungetch(int); char *w = word; while ( isspace(c = getch()) ) ; if ( c != EOF ) *w++ = c; if (!isalpha(c)) { *w = \u0026#39;\\0\u0026#39;; return c; } for ( ; --lim \u0026gt; 0; w++) if (!isalnum(*w = getch()) ) { ungetch(*w); break; } *w = \u0026#39;\\0\u0026#39;; return word[0]; }\r6.5 Self-referential Structures When wanting to handle data where the words are not known beforehand and searching through the seen words everytime in a list is not time efficient. Solution is to keep a set of seen words in a sorted order all the time and placing the words in proper position as they arrive. This can be done by binary tree.\nThe binary tree node, with four components.\nstruct tnode { char *word; // points to the text of the word int count; // number of occurences struct tnode *left; // points to left child struct tnode *right; // points to right child };\rIt is illegal for a structure to contain an instance of itself. struct tnode *left; declares left to be a pointer to a tnode, not tnode itself.\nNo node may contain more than two children. It is maintained in such a way that the left node always contains only the words which are lexicographically less than the word at that node, and right node contains the words that are greater.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define MAXWORD 100 struct tnode *addtree(struct tnode *, char *); void treeprint(struct tnode *); int getword(char *, int); // word frewuency count main() { struct tnode *root; char word[MAXWORD]; root = NULL; while (getword(word, MAXWORD) != EOF) if (isalpha(word[0])) root = address(root, word); treeprint(root); return 0; }\rThe function addtree is recursive. A word is presented by main to top level of the tree. At each stage the word is comapred to word in the node; and percolated down by recursive call to addtree. Eventually, the word either match something or null pointer is encountered, indicating that a node must be created and added to the tree. addtree returns a pointer to new node.\n. . . .\nIf tree becomes unbalanced because the words do not come in random order(words are already in order) then the running time of the program can grow too much.\n6.6 Table Lookup 6.7 Typedef 6.8 Unions 6.9 Bit-fields ","date":"2024-12-18","id":26,"permalink":"/personal-site/docs/c/chapter-6.1-structures/","summary":"\u003ch2 id=\"chapter-6---structures\"\u003eChapter 6 - Structures\u003c/h2\u003e\n\u003cp\u003eA structure is a collection of one or more variables, possibly of different types, grouped together under a single name for convenient handling.\nStructures help to organize complicated data, allowing a group of related variables to be treated as a unit instead of separate entities.\nEmployee has many attributes, a point is a pair of co ordinates etc.\u003c/p\u003e","tags":[],"title":"Chapter 6.1 - Structures"},{"content":"Chapter 7 - Input and Output 7.1 Standard Input and Output 7.2 Formatted Output - printf 7.3 Variable-length Arguments Lists 7.4 Formatted Input - Scanf 7.5 File Access 7.6 Error Handling - Stderr and Exit 7.7 Line Input and Output 7.8 Miscellaneous Functions ","date":"2024-12-18","id":27,"permalink":"/personal-site/docs/c/chapter-7-input-output/","summary":"\u003ch2 id=\"chapter-7---input-and-output\"\u003eChapter 7 - Input and Output\u003c/h2\u003e\n\u003ch3 id=\"71-standard-input-and-output\"\u003e7.1 Standard Input and Output\u003c/h3\u003e\n\u003ch3 id=\"72-formatted-output---printf\"\u003e7.2 Formatted Output - printf\u003c/h3\u003e\n\u003ch3 id=\"73-variable-length-arguments-lists\"\u003e7.3 Variable-length Arguments Lists\u003c/h3\u003e\n\u003ch3 id=\"74-formatted-input---scanf\"\u003e7.4 Formatted Input - Scanf\u003c/h3\u003e\n\u003ch3 id=\"75-file-access\"\u003e7.5 File Access\u003c/h3\u003e\n\u003ch3 id=\"76-error-handling---stderr-and-exit\"\u003e7.6 Error Handling - Stderr and Exit\u003c/h3\u003e\n\u003ch3 id=\"77-line-input-and-output\"\u003e7.7 Line Input and Output\u003c/h3\u003e\n\u003ch3 id=\"78-miscellaneous-functions\"\u003e7.8 Miscellaneous Functions\u003c/h3\u003e","tags":[],"title":"Chapter 7 - Input \u0026 Output"},{"content":"Chapter 8 - The UNIX System Interface 8.1 File Descriptors 8.2 Low Level I/O - Read and Write 8.3 Open, Create, Close, Unlink 8.4 Random Access - Lseek 8.5 Example - An implementation of Fopen and Getc 8.6 Example - Listing Directories 8.7 Example - A Storage Allocator ","date":"2024-12-18","id":28,"permalink":"/personal-site/docs/c/chapter-8-unix-interface/","summary":"\u003ch2 id=\"chapter-8---the-unix-system-interface\"\u003eChapter 8 - The UNIX System Interface\u003c/h2\u003e\n\u003ch3 id=\"81-file-descriptors\"\u003e8.1 File Descriptors\u003c/h3\u003e\n\u003ch3 id=\"82-low-level-io---read-and-write\"\u003e8.2 Low Level I/O - Read and Write\u003c/h3\u003e\n\u003ch3 id=\"83-open-create-close-unlink\"\u003e8.3 Open, Create, Close, Unlink\u003c/h3\u003e\n\u003ch3 id=\"84-random-access---lseek\"\u003e8.4 Random Access - Lseek\u003c/h3\u003e\n\u003ch3 id=\"85-example---an-implementation-of-fopen-and-getc\"\u003e8.5 Example - An implementation of Fopen and Getc\u003c/h3\u003e\n\u003ch3 id=\"86-example---listing-directories\"\u003e8.6 Example - Listing Directories\u003c/h3\u003e\n\u003ch3 id=\"87-example---a-storage-allocator\"\u003e8.7 Example - A Storage Allocator\u003c/h3\u003e","tags":[],"title":"Chapter 8 - Unix Interface"},{"content":"","date":"2024-11-07","id":29,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/","summary":"","tags":[],"title":"Data Types"},{"content":"","date":"2024-10-22","id":30,"permalink":"/personal-site/docs/java-script/js-language/","summary":"","tags":[],"title":"JS Language"},{"content":"","date":"2024-10-22","id":31,"permalink":"/personal-site/docs/java-script/","summary":"","tags":[],"title":"JavaScript"},{"content":"In JavaScript, bindings (also known as variables) are used to maintain the internal state and store values.\nRules for naming variables: No keywords or reserved words (e.g., if, for, function, etc.). Cannot start with a number (e.g., 123variable is invalid). No spaces or hyphens (-). No special characters, except for $ and _. Naming Variables Properly A good variable name should be descriptive and easy to understand. It should clearly represent the value or data that it holds.\nUse camelCase for variable names (e.g., userName, squareRoot). Choose human-readable names that describe the purpose of the variable (e.g., currentUser, shoppingCart). Avoid abbreviations or short names like a, b, and c, unless it\u0026rsquo;s clear what they represent. Be descriptive but also concise. For example, avoid overly generic names like data or value. If referring to a user in your application, use names like currentUser or newUser instead of vague terms like currentVisitor or newManInTown. lazy programmers who, instead of declaring new variables, tend to reuse existing ones. like boxes into which people throw different things without changing their stickers. What’s inside the box now? Who knows?. Such programmers save a little bit on variable declaration but lose ten times more on debugging. // Descriptive variable names let userName = \u0026#39;Jane Doe\u0026#39;; let totalPrice = 100.50;\rComments in JavaScript Single-line comment // Multi-line comment /* ... */ // This is a single-line comment let x = 5; // Inline comment /* This is a multi-line comment that spans across multiple lines */ let y = 10;\rvar (Old Way of Declaring Variables) The var keyword was previously used to declare variables in JavaScript, but it is now considered outdated due to some issues with variable scoping. As such, its usage is discouraged in favor of let and const.\nlet for Declaring Variables The let keyword is used to declare variables that can be reassigned later.\nlet message; // Declaring a variable message = \u0026#39;Hello\u0026#39;; // Assigning a value let caught = 5 * 5; // Declaring and assigning a value in one line The let keyword indicates that a new variable is being defined. A variable declared with let can be reassigned to a different value after its initial assignment. Reassigning Variables: The binding is not tied to that value, it can be disconnected from current value and have them point to a new one;\nlet mood = \u0026#39;light\u0026#39;; // Initial assignment mood = \u0026#39;dark\u0026#39;; // Reassigning the value Important: Once a variable is declared with let, it can be reassigned, but it does not need let for the reassignment. You only use let when declaring the variable for the first time. Defining Multiple Variables: You can define multiple variables in a single let declaration, separating them with commas.\nlet one = 1, two = 2; // Multiple variables in one line let user = \u0026#39;John\u0026#39;, age = 25, message = \u0026#39;Hello\u0026#39;; // Another example // Alternatively, you can split the declarations across multiple lines: let user = \u0026#39;John\u0026#39; , age = 25 , message = \u0026#39;Hello\u0026#39;;\rconst for Constants The const keyword is used to declare constants. Once a value is assigned to a const variable, it cannot be reassigned. Attempting to change the value of a constant results in an error.\nconst pi = 3.142; // Constant value const myBirthday = \u0026#39;18.04.1999\u0026#39;; // Another constant A constant binding points to the same value as long as it lives. Constants cannot be reassigned once their initial value is set.\nConstants and Runtime Values: Some constants may be known beforehand (e.g., pi), while others are calculated at runtime but remain unchanged after their initial assignment.\nconst pageLoadTime = /* Time taken for a webpage to load */; const age = calculateAge(myBirthday); // Value computed at runtime Uppercase Constants A common convention for constants that represent values known before execution is to use uppercase letters with underscores (_) to separate words. This makes them easier to identify in your code.\nconst COLOR_RED = \u0026#34;#F00\u0026#34;; const COLOR_GREEN = \u0026#34;#0F0\u0026#34;; const COLOR_BLUE = \u0026#34;#00F\u0026#34;; const COLOR_ORANGE = \u0026#34;#FF7F00\u0026#34;; // Using the constant to set a variable let color = COLOR_ORANGE; alert(color); // Outputs the color value Redone on #07oct24\n","date":"2024-11-07","id":32,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/variables/","summary":"\u003cp\u003eIn JavaScript, \u003cem\u003ebindings\u003c/em\u003e (also known as \u003cem\u003evariables\u003c/em\u003e) are used to maintain the internal state and store values.\u003c/p\u003e\n\u003ch2 id=\"rules-for-naming-variables\"\u003eRules for naming variables:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNo keywords or reserved words\u003c/strong\u003e (e.g., \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003efunction\u003c/code\u003e, etc.).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCannot start with a number\u003c/strong\u003e (e.g., \u003ccode\u003e123variable\u003c/code\u003e is invalid).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNo spaces or hyphens (\u003ccode\u003e-\u003c/code\u003e)\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNo special characters\u003c/strong\u003e, except for \u003ccode\u003e$\u003c/code\u003e and \u003ccode\u003e_\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"naming-variables-properly\"\u003eNaming Variables Properly\u003c/h2\u003e\n\u003cp\u003eA good variable name should be \u003cstrong\u003edescriptive\u003c/strong\u003e and \u003cstrong\u003eeasy to understand\u003c/strong\u003e. It should clearly represent the value or data that it holds.\u003c/p\u003e","tags":[],"title":"Variables"},{"content":"In JavaScript, values are chunks of information.\nEach value has a specific type that defines how it behaves and interacts with other values.\nThere are eight basic types in JavaScript:\nnumber bigint string boolean null undefined object symbol\rTypes of Values Primitive Types Primitive types can hold only one value at a time, and they are immutable (i.e., they can\u0026rsquo;t be changed). These types include:\nString: Represents a sequence of characters. let name = \u0026quot;Eag\u0026quot;;\nNumber: Represents both integer and floating-point numbers. JavaScript doesn\u0026rsquo;t distinguish between them — all numbers are of the same type. let age = 30;\nBoolean: Represents a true or false value. let isApproved = false;\nUndefined: Indicates that a variable has been declared but not assigned a value. let firstName = undefined; // Value not initialized\nNull: Represents an intentionally empty or non-existent value. let lastName = null; // Value intentionally left blank\nBigInt: Used to represent very large integers that are beyond the limit of the standard Number type. let largeNumber = 1234567890123456789012345678901234567890n; // BigInt\nSymbol: Represents a unique and immutable value, often used to create unique identifiers. let sym = Symbol(\u0026quot;id\u0026quot;);\nReference Types Reference types can store collections of data and more complex entities. These include:\nObject: Can hold collections of data, including properties and methods. let user = { name: \u0026quot;John\u0026quot;, age: 30 };\nArray: A special type of object for storing ordered collections of values.\nlet numbers = [1, 2, 3];\nFunction: A special type of object used to define callable blocks of code.\nfunction greet() { console.log(\u0026#34;Hello!\u0026#34;); }\rsymbol: Used to create unique identifiers, ensuring no collisions in object properties. typeof Operator The typeof operator is used to determine the type of a value or variable. It returns a string indicating the type of the operand.\nThe type can change based on the value it holds.\ntypeof 0 // \u0026#34;number\u0026#34; typeof 10n // \u0026#34;bigint\u0026#34; typeof \u0026#39;foo\u0026#39; // \u0026#34;string\u0026#34; typeof Symbol(\u0026#34;id\u0026#34;) // \u0026#34;symbol\u0026#34; typeof Math // \u0026#34;object\u0026#34; (Math is an object) typeof null // \u0026#34;object\u0026#34; (This is a known quirk in JavaScript) typeof alert // \u0026#34;function\u0026#34; (Functions are objects) Note: The behavior of typeof with null is incorrect — it returns \u0026quot;object\u0026quot;, which is a known issue in JavaScript, but it\u0026rsquo;s kept for compatibility reasons. null is not an object; it is its own unique type.\nMethods of Primitives Methods are part of objects. While primitives (like strings, numbers, booleans) are not objects by themselves, JavaScript allows them to behave like objects in certain situations. This is done through \u0026ldquo;wrapper objects\u0026rdquo; that temporarily convert the primitive to an object for method access.\nWhen you call a method on a primitive value, JavaScript wraps the primitive in an appropriate object wrapper (e.g., String, Number, Boolean, Symbol, or BigInt). After the method call, the wrapper is discarded.\nlet str = \u0026#34;hello\u0026#34;; console.log(str.toUpperCase()); // \u0026#34;HELLO\u0026#34; str is a primitive string. JavaScript temporarily wraps it in a String object to call the toUpperCase method, and then the wrapper is discarded. So primitives can provide methods yet still remain lightweight. Wrappers for Each Primitive Type: String has methods like .toUpperCase(), .toLowerCase(), etc. Number has methods like .toFixed(), .toPrecision(), etc. Boolean has methods like .toString() to convert it into a string. However, null and undefined do not have object wrappers, so they cannot be used with methods.\nConverting primitive types: let num = Number(\u0026#34;123\u0026#34;); // Converts the string \u0026#34;123\u0026#34; into a number let booleanVal = Boolean(0); // Converts 0 to false Note: null and undefined do not have methods because they are the most primitive types and do not have associated object wrappers.\nPrimitive types: Single values, immutable, include string, number, boolean, null, undefined, symbol, bigint. Reference types: Store collections of data and more complex entities, include object, array, function, etc. typeof operator: Used to check the type of a value. Wrapper objects: Allow primitives to behave like objects when methods are invoked on them (e.g., String, Number, Boolean). Empty values null is used to assign an empty, nothing or value unkown value to a variable.\nundefined means value is not assigned It as a default initial value when variable is declared but value is not assigned. Many operations yield undefined when they have to yield some value if the operation don\u0026rsquo;t produce a meaningful value.\nnull and undefined are used to denote the absence of meaningful value / value unknown. These two are values but they do not carry no information. Both are mostly interchangeable.\n#17sep24\n","date":"2024-11-07","id":33,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/values-and-types/","summary":"\u003cp\u003eIn JavaScript, \u003cstrong\u003evalues\u003c/strong\u003e are chunks of information.\u003cbr\u003e\nEach value has a specific \u003cstrong\u003etype\u003c/strong\u003e that defines how it behaves and interacts with other values.\u003c/p\u003e","tags":[],"title":"Values and Types"},{"content":"In JavaScript, there are two types of numbers: Regular Numbers and BigInt Numbers.\nTypes of Numbers Regular Numbers Regular Numbers are stored in 64-bit memory, with some bits representing the sign (positive or negative), and others representing the value of the number (including the decimal point for floating-point numbers).\nBigInt Numbers A BigInt is a numeric type that can represent integers of arbitrary length, i.e., numbers larger than the limit of the regular number type (which is 2^53 - 1). This makes BigInt useful for working with very large integers, such as cryptography or certain scientific calculations.\nA BigInt value is created by appending an n to the end of an integer:\nconst bigInt = 12345553213423423424241313322442324234342n; // The \u0026#39;n\u0026#39; at the end indicates it\u0026#39;s a BigInt Converting to Number You can convert a value to a regular number using the Number() function. It will convert the value to a number if it’s possible:\nconst myString = \u0026#39;123\u0026#39;; const myNum = Number(myString); console.log(typeof myNum); // \u0026#34;number\u0026#34; Special Numeric Values JavaScript has several special numeric values:\nInfinity: Represents an infinitely large number. It results from dividing a positive number by zero.\nalert(1 / 0); // Infinity -Infinity: Represents an infinitely large negative number.\nalert(-1 / 0); // -Infinity NaN (Not a Number): Indicates an invalid or undefined result of a mathematical operation.\nalert(0 / 0); // NaN alert(\u0026#34;hello\u0026#34; * 2); // NaN NaN is not equal to itself (NaN !== NaN), which is a unique property in JavaScript. If NaN appears in an expression, the entire result will likely be NaN.\nArithmetic Operators JavaScript provides several operators for performing arithmetic operations on numbers:\n+ // Addition - // Subtraction * // Multiplication / // Division % // Modulo (Remainder) Operation ** // Exponentiation (Power) Arithmetic Behavior Division by Zero: When dividing by zero, JavaScript returns Infinity or -Infinity depending on the sign.\nalert(1 / 0); // Infinity alert(-1 / 0); // -Infinity NaN (Not a Number): If an operation results in a value that cannot be calculated, it returns NaN (Not a Number). This can happen in operations like division by zero, or invalid operations involving non-numeric values.\nalert(\u0026#34;not a number\u0026#34; / 2); // NaN alert(NaN + 1); // NaN Special Cases Involving NaN:\nAny expression involving NaN will propagate NaN as the result: 0 / 0; // NaN Infinity - Infinity; // NaN NaN Propagation: If NaN is part of an expression, the result will also be NaN, unless the operation is NaN raised to the power of 0, which is 1.\nNaN ** 0; // 1 Ways to Write Numbers in JavaScript JavaScript provides different ways to represent numbers in a readable and compact form:\n1. Using Underscores (_) as Separators You can use underscores to improve the readability of large numbers. These underscores are ignored during execution.\nlet billion = 1_000_000_000; // 1 billion 2. Using Scientific Notation (e) You can represent numbers using exponential (scientific) notation with the e character, where e represents \u0026ldquo;times 10 raised to the power of.\u0026rdquo;\nPositive exponent:\nlet billion = 1e9; // 1e9 is equal to 1,000,000,000 (1 billion) alert(7.3e9); // 7.3e9 is 7.3 billion Negative exponent:\nlet mcs = 1e-6; // 1e-6 is 0.000001 alert(mcs); // 0.000001 // five zeroes to left from 1 3. Standard Notation (Without Exponent) A number can be written in its standard form without any scientific notation.\nlet billion = 1000000000; // 1 billion ","date":"2024-11-07","id":34,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/number-types/","summary":"\u003cp\u003eIn JavaScript, there are two types of numbers: \u003cstrong\u003eRegular Numbers\u003c/strong\u003e and \u003cstrong\u003eBigInt Numbers\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"types-of-numbers\"\u003eTypes of Numbers\u003c/h2\u003e\n\u003ch3 id=\"regular-numbers\"\u003eRegular Numbers\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eRegular Numbers\u003c/strong\u003e are stored in \u003cstrong\u003e64-bit\u003c/strong\u003e memory, with some bits representing the sign (positive or negative), and others representing the value of the number (including the decimal point for floating-point numbers).\u003c/p\u003e","tags":[],"title":"Number Types"},{"content":"Notes on common number methods: Rounding, Tests with isNaN and isFinite, and parseInt()/parseFloat() functions and Math object.\nRounding in JavaScript JavaScript provides several methods for rounding numbers to the nearest integer or a specific number of digits.\nRounding Methods Math.floor()\nRounds a number down to the nearest integer, regardless of whether the number is positive or negative.\nMath.floor(3.1); // 3 Math.floor(-1.1); // -2 Math.ceil()\nRounds a number up to the nearest integer.\nMath.ceil(3.1); // 4 Math.ceil(-1.1); // -1 Math.round()\nRounds a number to the nearest integer: Rounds up if the decimal part is \u0026gt;= 0.5. Rounds down if the decimal part is \u0026lt; 0.5.\nMath.round(3.1); // 3 Math.round(3.6); // 4 Math.round(3.5); // 4 (Rounds up) Math.round(-3.5); // -3 (Rounds up to less negative) Math.trunc()\nRemoves the decimal part of a number without rounding, effectively truncating it.\nMath.trunc(3.1); // 3 Math.trunc(-1.1); // -1 Note: Math.trunc() is not supported by Internet Explorer.\nRounding to a Specific Number of Digits To round a number to a specific number of digits after the decimal point, you can use either the multiply-and-divide technique or the toFixed() method.\nMultiply-and-Divide Method\nThis method multiplies the number by a power of 10, applies the rounding function, and then divides by the same power of 10.\nlet num = 1.23456; alert(Math.round(num * 100) / 100); // 1.23 (Rounds to two decimal places) toFixed(n)\nThe toFixed() method rounds the number to n decimal places and returns the result as a string.\nlet num = 12.3445; alert(num.toFixed(1)); // \u0026#34;12.3\u0026#34; let num2 = 12.3745; alert(num2.toFixed(1)); // \u0026#34;12.4\u0026#34; // To round up to 5 decimal places: let num3 = 12.36; alert(num3.toFixed(5)); // \u0026#34;12.36000\u0026#34; alert(+num3.toFixed(5)); // 12.36000 (Converts back to a number) Note: You can convert the string back to a number by using the unary plus (+) operator.\nFloating-point Precision Issues JavaScript is known for some floating-point precision errors.\nalert(0.1 + 0.2); // 0.3000000000004 (Precision issue) alert(+(0.1 + 0.2).toFixed(2)); // 0.30 (Fixed by rounding) Testing for NaN and Finite Numbers JavaScript provides special functions to handle cases where values may not be valid numbers or may be infinite.\nisNaN() The isNaN() function tests whether a value is Not a Number (NaN). It converts the argument to a number and then checks if it is NaN.\nalert(isNaN(NaN)); // true alert(isNaN(\u0026#34;str\u0026#34;)); // true (because \u0026#34;str\u0026#34; is not a number) alert(NaN === NaN); // false (NaN is not equal to itself) isFinite() The isFinite() function tests whether a value is a finite number (i.e., not NaN, Infinity, or -Infinity).\nalert(isFinite(\u0026#34;15\u0026#34;)); // true (string \u0026#34;15\u0026#34; is converted to number) alert(isFinite(\u0026#34;str\u0026#34;)); // false (because \u0026#34;str\u0026#34; is not a number) alert(isFinite(Infinity)); // false alert(isFinite(-Infinity));// false isFinite() is often used to validate user input to ensure it\u0026rsquo;s a regular number:\nlet num = +prompt(\u0026#34;Enter a number\u0026#34;, \u0026#39;\u0026#39;); alert(isFinite(num)); // true unless the value is NaN or Infinity Converting Strings to Numbers: parseInt() and parseFloat() JavaScript provides two built-in functions to convert strings into numeric values: parseInt() and parseFloat().\nparseInt(): Converts a string to an integer (whole number). parseFloat(): Converts a string to a floating-point number (decimal number). parseInt() parseInt() parses a string and returns an integer. It reads the string until it encounters a non-digit character, then stops parsing and returns the integer.\nalert(parseInt(\u0026#39;100px\u0026#39;)); // 100 alert(parseInt(\u0026#39;12.5em\u0026#39;)); // 12 (stops parsing at the first non-numeric character) alert(parseInt(\u0026#39;12.3\u0026#39;)); // 12 (only integer part is parsed) alert(parseInt(\u0026#39;a123\u0026#39;)); // NaN (cannot parse anything) parseFloat() parseFloat() parses a string and returns a floating-point number. It reads until it encounters a character that is not part of a floating-point number (e.g., a letter).\nalert(parseFloat(\u0026#39;12.5em\u0026#39;)); // 12.5 alert(parseFloat(\u0026#39;12.3.4\u0026#39;)); // 12.3 (stops parsing at the second dot) alert(parseFloat(\u0026#39;100px\u0026#39;)); // 100 alert(parseFloat(\u0026#39;a123\u0026#39;)); // NaN Numeric Conversion Using + or Number() For strict conversion of a string to a number, you can use the unary plus (+) or Number() function. These will fail if the string cannot be strictly converted to a valid number.\nalert(+\u0026#34;100px\u0026#34;); // NaN (invalid string) alert(Number(\u0026#34;100px\u0026#34;)); // NaN alert(+\u0026#34;123\u0026#34;); // 123 (valid number) alert(Number(\u0026#34;123\u0026#34;)); // 123 The Math Object JavaScript has a built-in Math object, which provides a set of mathematical functions and constants.\nCommon Math Functions Math.abs(): Returns the absolute (positive) value of a number.\nMath.abs(-5); // 5 Math.max(): Returns the largest of zero or more numbers.\nMath.max(1, 2, 3); // 3 Math.min(): Returns the smallest of zero or more numbers.\nMath.min(1, 2, 3); // 1 Math.pow(n, power): Returns n raised to the power of power.\nMath.pow(2, 3); // 8 (2^3) Math.sqrt(): Returns the square root of a number.\nMath.sqrt(16); // 4 Constants:\nMath.PI: The value of Pi (3.14159\u0026hellip;). Math.PI; // 3.141592653589793 Math.random(): Returns a random floating-point number between 0 (inclusive) and 1 (exclusive).\nMath.random(); // Random number between 0 and 1 Trigonometric Functions:\nMath.cos(), Math.sin(), Math.tan() – Compute the cosine, sine, and tangent of an angle (in radians). Math.asin(), Math.acos(), Math.atan() – Compute the arcsine, arccosine, and arctangent, respectively. Rounding Functions:\nMath.floor(): Rounds down to the nearest integer. Math.ceil(): Rounds up to the nearest integer. Math.round(): Rounds to the nearest integer. ","date":"2024-11-07","id":35,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/number-methods/","summary":"\u003cp\u003eNotes on common number methods: \u003cstrong\u003eRounding\u003c/strong\u003e, \u003cstrong\u003eTests with \u003ccode\u003eisNaN\u003c/code\u003e and \u003ccode\u003eisFinite\u003c/code\u003e\u003c/strong\u003e, and \u003cstrong\u003e\u003ccode\u003eparseInt()\u003c/code\u003e/\u003ccode\u003eparseFloat()\u003c/code\u003e\u003c/strong\u003e functions and \u003cstrong\u003eMath object\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"rounding-in-javascript\"\u003eRounding in JavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript provides several methods for rounding numbers to the nearest integer or a specific number of digits.\u003c/p\u003e","tags":[],"title":"Number Methods"},{"content":"A string is a sequence of text characters enclosed in either single quotes (' '), double quotes (\u0026quot; \u0026quot;), or backticks (`). Strings are one of the most commonly used data types in JavaScript.\nBasic String Declaration let str = \u0026#34;Hello\u0026#34;; // Double quotes let str1 = \u0026#39;Single quotes are ok too\u0026#39;; // Single quotes let phrase = `Backticks allow embedding expressions like ${str}`; // Template literal (backticks) let combined = `${str} ${phrase}`; // String concatenation using template literals alert(`1 + 2 = ${sum(1, 2)}.`); // Using template literals to embed function results Template Literals Template literals are enclosed by backticks (`) and allow embedding of expressions inside ${}. These expressions are evaluated, converted to strings, and inserted into the string.\nlet name = \u0026#34;John\u0026#34;; console.log(`Hello, ${name}`); // Hello, John console.log(`The result of 1 + 2 is ${1 + 2}`); // The result of 1 + 2 is 3 Template literals can do much more:\nMultiline strings: Unlike regular strings enclosed in quotes, template literals can span multiple lines without the need for escape characters.\nlet multiline = `This is a string that spans multiple lines.`;\rEmbedded expressions: As shown above, you can embed variables, calculations, and even function calls inside ${}.\nlet a = 5, b = 10; let result = `${a} + ${b} = ${a + b}`; // \u0026#34;5 + 10 = 15\u0026#34; Escaping Characters Escaping characters allows you to treat characters as literal text when needed. This is useful for special characters such as quotes, newlines, or backslashes that might otherwise have special meaning in JavaScript.\nEscape sequences:\n\\n: Newline character \\t: Tab character \\\\: Backslash \\': Single quote \\\u0026quot;: Double quote First line and\\nThis is second line A newline character is \u0026#34;\\n\u0026#34; A newline character is \\\u0026#34;\\\\n\\\u0026#34; let message = \u0026#34;First line\\nSecond line\u0026#34;; console.log(message); // First line (new line) Second line const quote = \u0026#34;I\\\u0026#39;ve got no right to take my place\u0026#34;; // Escape single quote console.log(quote); // I\u0026#39;ve got no right to take my place\rConcatenation Concatenation is the process of combining two or more strings into one string. You can use the + operator to concatenate strings.\nlet first = \u0026#34;Hello\u0026#34;; let second = \u0026#34;World\u0026#34;; let combined = first + \u0026#34; \u0026#34; + second; // \u0026#34;Hello World\u0026#34; let name = \u0026#34;con\u0026#34; + \u0026#34;cat\u0026#34; + \u0026#34;e\u0026#34; + \u0026#34;nate\u0026#34;\rIf any of the operands is a string, the other will be converted to a string and concatenated.\nalert(\u0026#39;1\u0026#39; + 2); // \u0026#34;12\u0026#34; (number 2 converted to string) alert(2 + \u0026#34;1\u0026#34;); // \u0026#34;21\u0026#34; (number 2 converted to string) JavaScript concatenates strings from left to right:\nalert(2 + 1 + \u0026#34;1\u0026#34;); // \u0026#34;31\u0026#34; (2 + 1 = 3, then \u0026#34;3\u0026#34; + \u0026#34;1\u0026#34; = \u0026#34;31\u0026#34;) alert(\u0026#34;2\u0026#34; + 1 + 1); // \u0026#34;211\u0026#34; (\u0026#34;2\u0026#34; + 1 = \u0026#34;21\u0026#34;, then \u0026#34;21\u0026#34; + 1 = \u0026#34;211\u0026#34;) All other math operators try to convert string to number and do the operation but not +\nThe String() function can explicitly convert other data types to strings.\nlet number = 123; let str = String(number); // Converts the number to a string console.log(str); // \u0026#34;123\u0026#34; ","date":"2024-11-07","id":36,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/string-type/","summary":"\u003cp\u003eA \u003cstrong\u003estring\u003c/strong\u003e is a sequence of text characters enclosed in either single quotes (\u003ccode\u003e' '\u003c/code\u003e), double quotes (\u003ccode\u003e\u0026quot; \u0026quot;\u003c/code\u003e), or backticks (\u003ccode\u003e`\u003c/code\u003e). Strings are one of the most commonly used data types in JavaScript.\u003c/p\u003e","tags":[],"title":"String Type"},{"content":"Strings in JavaScript are primitive values and are immutable, meaning their content cannot be modified after they are created. However, they come with built-in properties and methods that allow manipulation and examination of string data.\nBasic String Methods string.length at(position) // allows negative index charAt(position) //charecter from possition string[pos] // works same toUpperCase() toLowerCase() // searching for a substring search() indexOf() lastIndexOf() match() includes(), startsWith(), endsWith() // returns true/false padSrart(targetLength, padString) padEnd(targetLength, padString) trim() charCodeAt(position) // returns code character codePointAt(pos) // Returns a decimal number representing the code for the character at position `pos` fromCodePoint(code) // Creates a character by its numeric `code` String Length The length property returns the number of characters in a string, counting spaces and special characters (such as \\n).\nlet text = \u0026#39;Hello, world!\u0026#39;; let length = text.length; alert(length); // 13 alert( `My\\n`.length ); // 3 because \\n is considered one character str.length is a numeric property, not a function. There is no need to add parenthesis after it. Not .length(), but .length.\nAccessing String Characters There are multiple ways to access characters in a string:\nUsing []: This allows you to access a character at a specific position.\nlet text = \u0026#34;Hello\u0026#34;; let char = text[0]; // \u0026#34;H\u0026#34; Note: Using [] does not support negative indexing (will return undefined for negative values).\nUsing at(position): A new method that supports negative indices to count from the end of the string.\nlet text = \u0026#34;Hello\u0026#34;; console.log(text.at(0)); // \u0026#34;H\u0026#34; console.log(text.at(-1)); // \u0026#34;o\u0026#34; Using charAt(position): Works similarly to at() but without support for negative indexing.\nlet text = \u0026#34;Hello\u0026#34;; console.log(text.charAt(0)); // \u0026#34;H\u0026#34; Using charCodeAt(position): Returns the Unicode (ASCII) value of the character at the specified position.\nlet text = \u0026#34;Hello\u0026#34;; console.log(text.charCodeAt(0)); // 72 (Unicode value for \u0026#39;H\u0026#39;) Iterating Over Characters To iterate over each character in a string, you can use a for...of loop.\nfor (let char of \u0026#34;Hello\u0026#34;) { alert(char); // \u0026#34;H\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;l\u0026#34;, \u0026#34;l\u0026#34;, \u0026#34;o\u0026#34; }\rString Methods: Immutable Operations Strings are immutable, meaning once a string is created, its characters cannot be changed directly. You would need to create a new string to modify it.\nlet str = \u0026#34;hi\u0026#34;; str[0] = \u0026#39;H\u0026#39;; // This does not work alert(str[0]); // \u0026#34;h\u0026#34; let newStr = \u0026#39;H\u0026#39; + str[1]; // Create a new string alert(newStr); // \u0026#34;Hi\u0026#34; Case Conversion You can convert strings to upper or lower case using toUpperCase() and toLowerCase().\nlet text = \u0026#34;Hello World\u0026#34;; let upperCase = text.toUpperCase(); // \u0026#34;HELLO WORLD\u0026#34; let lowerCase = text.toLowerCase(); // \u0026#34;hello world\u0026#34; alert( \u0026#39;Interface\u0026#39;.toUpperCase() ); // \u0026#34;INTERFACE\u0026#34; alert( \u0026#39;Interface\u0026#39;[0].toLowerCase() ); // \u0026#34;i\u0026#34; Searching for Substrings There are several methods to search for substrings within strings:\nsearch(): Searches a string for a match against a regular expression and returns the index of the match.\nlet text = \u0026#34;Hello world!\u0026#34;; let index = text.search(\u0026#34;world\u0026#34;); // 6 (position where \u0026#34;world\u0026#34; starts) alert(index);\rindexOf(): Finds the position of the first occurrence of a substring within a string.\nlet text = \u0026#39;Widget with id\u0026#39;; alert(text.indexOf(\u0026#39;Widget\u0026#39;)); // 0 alert(text.indexOf(\u0026#39;widget\u0026#39;)); // -1 (case-sensitive) lastIndexOf(): Similar to indexOf() but searches from the end of the string. str.lastIndexOf(substr, position)\nlet text = \u0026#39;As sly as a fox, as strong as an ox\u0026#39;; let target = \u0026#39;as\u0026#39;; let pos = text.lastIndexOf(target); // 30 (last \u0026#34;as\u0026#34;) alert(pos);\rmatch(): Returns the matches based on a regular expression.\nlet text = \u0026#34;The rain in Spain stays mainly in the plain\u0026#34;; let matches = text.match(/ain/g); // Returns an array of \u0026#34;ain\u0026#34; matches alert(matches); // [\u0026#34;rain\u0026#34;, \u0026#34;Spain\u0026#34;, \u0026#34;plain\u0026#34;] includes(): Returns true if the substring is found, otherwise false. str.includes(substr, pos)\nalert(\u0026#34;Hello World\u0026#34;.includes(\u0026#34;World\u0026#34;)); // true alert(\u0026#34;Hello World\u0026#34;.includes(\u0026#34;world\u0026#34;)); // false startsWith(): Checks if the string starts with the given substring.\nalert(\u0026#34;Hello\u0026#34;.startsWith(\u0026#34;He\u0026#34;)); // true alert(\u0026#34;Hello\u0026#34;.startsWith(\u0026#34;he\u0026#34;)); // false endsWith(): Checks if the string ends with the given substring.\nalert(\u0026#34;Hello\u0026#34;.endsWith(\u0026#34;lo\u0026#34;)); // true alert(\u0026#34;Hello\u0026#34;.endsWith(\u0026#34;ell\u0026#34;)); // false String Padding JavaScript provides padStart() and padEnd() for padding strings to a specific length:\npadStart(targetLength, padString): Pads the start of a string with padString until the string reaches targetLength. let text = \u0026#34;5\u0026#34;; console.log(text.padStart(3, \u0026#34;0\u0026#34;)); // \u0026#34;005\u0026#34; padEnd(targetLength, padString): Pads the end of a string with padString until the string reaches targetLength. let text = \u0026#34;5\u0026#34;; console.log(text.padEnd(3, \u0026#34;0\u0026#34;)); // \u0026#34;500\u0026#34; Special String Methods toUpperCase() and toLowerCase(): Convert the string to uppercase or lowercase. trim(): Removes whitespace from both ends of a string (spaces, tabs, newlines). let str = \u0026#34; Hello World \u0026#34;; console.log(str.trim()); // \u0026#34;Hello World\u0026#34; charCodeAt(): Returns the Unicode (ASCII) value of a character at the specified index. codePointAt(): Returns the code point of a character at the specified position (supports characters outside the Basic Multilingual Plane). let str = \u0026#34;Hello\u0026#34;; console.log(str.charCodeAt(0)); // 72 (Unicode of \u0026#39;H\u0026#39;) console.log(str.codePointAt(0)); // 72 String.fromCodePoint(): Converts a Unicode code point to a string. let char = String.fromCodePoint(72); // \u0026#34;H\u0026#34; console.log(char);\r","date":"2024-11-07","id":37,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/string-methods/","summary":"\u003cp\u003eStrings in JavaScript are \u003cstrong\u003eprimitive values\u003c/strong\u003e and are immutable, meaning their content cannot be modified after they are created. However, they come with built-in properties and methods that allow manipulation and examination of string data.\u003c/p\u003e","tags":[],"title":"String Methods"},{"content":"\r// Getting a substring slice(start, end) // extract part and new string substring(start, end) substr(start, length) // slices on length given\t+ concat( \u0026#34; \u0026#34;, toJoin ) trim() trimStart() trimEnd() padStart(Number, element) padEnd(Number, element) repeat(count) replace(toReplace, replacedWith) replaceAll(toReplace, replacedWith) split(at) join(with) reverse()\rString Manipulation Methods in JavaScript 1. Extracting Substrings slice(start [, end]) The slice() method extracts a portion of a string and returns a new string. If the end parameter is omitted, it slices from the start to the end of the string.\nNegative indices count from the end of the string (e.g., -1 refers to the last character). let text = \u0026#34;Apple, Kiwi, Banana\u0026#34;; alert(text.slice(0, 5)); // \u0026#34;Apple\u0026#34; (from 0 to 5) alert(text.slice(0,1) ); // \u0026#34;A\u0026#34;, from 0, 1 not included alert(text.slice(7)); // \u0026#34;Kiwi, Banana\u0026#34; (from index 7 to end) alert(text.slice(-12)); // \u0026#34;Kiwi, Banana\u0026#34; (starts 12 chars from end) alert(text.slice(-12, -6)); // \u0026#34;Kiwi,\u0026#34; (from -12 to -6) substring(start [, end]) The substring() method returns a portion of the string between the start and end indices (not including the end).\nUnlike slice(), if start is greater than end, substring() swaps them. Negative indices are treated as 0. let text = \u0026#34;Apple, Kiwi, Banana\u0026#34;; alert(text.substring(7, 13)); // \u0026#34;Kiwi\u0026#34; alert(text.substring(6, 2)); // \u0026#34;p, k\u0026#34; (start and end swapped) alert(text.substring(-4)); // \u0026#34;Apple, Kiwi, Banana\u0026#34; (negative treated as 0) let str = \u0026#34;stringify\u0026#34;; alert( str.substring(2, 6) ); // \u0026#34;ring\u0026#34; alert( str.substring(6, 2) ); // \u0026#34;ring\u0026#34; alert( str.slice(2, 6) ); // \u0026#34;ring\u0026#34; alert( str.slice(6, 2) ); // \u0026#34;\u0026#34; // not same in slice substr(start [, length]) The substr() method extracts a substring starting at start for a specified length.\nThe start parameter can be negative to count from the end. If length is omitted, the substring starts from start and continues to the end of the string. let text = \u0026#34;stringify\u0026#34;; alert(text.substr(2, 4)); // \u0026#34;ring\u0026#34; (from index 2, length 4) alert(text.substr(-4, 2)); // \u0026#34;gi\u0026#34; (from 4 chars from end, 2 chars) Method Behavior Negative Indices slice(start, end) Extracts from start to end (excluding end) Supports negative substring(start, end) Extracts between start and end (excluding end) Negative treated as 0 substr(start, length) Extracts from start for length characters Supports negative start 2. String Concatenation concat() The concat() method joins two or more strings and returns a new string. This is similar to using the + operator but allows multiple string inputs.\nlet text1 = \u0026#34;Hello\u0026#34;; let text2 = \u0026#34;World\u0026#34;; let result = text1.concat(\u0026#34; \u0026#34;, text2); // \u0026#34;Hello World\u0026#34; result = \u0026#34;Hello\u0026#34;.concat(\u0026#34; \u0026#34;, \u0026#34;World\u0026#34;); // \u0026#34;Hello World\u0026#34; 3. Whitespace Manipulation trim(), trimStart(), trimEnd() These methods remove whitespace from the string:\ntrim() removes whitespace from both ends. trimStart() removes whitespace from the beginning. trimEnd() removes whitespace from the end. let text = \u0026#34; Hello World! \u0026#34;; alert(text.trim()); // \u0026#34;Hello World!\u0026#34; alert(text.trimStart()); // \u0026#34;Hello World! \u0026#34; alert(text.trimEnd()); // \u0026#34; Hello World!\u0026#34; 4. Padding Strings padStart(targetLength, padString), padEnd(targetLength, padString) These methods pad the string to the specified length with a given character. If the string is already long enough, the original string is returned.\npadStart() pads the start of the string. padEnd() pads the end of the string. let text = \u0026#39;5\u0026#39;; alert(text.padStart(4, \u0026#34;0\u0026#34;)); // \u0026#34;0005\u0026#34; alert(text.padEnd(4, \u0026#34;x\u0026#34;)); // \u0026#34;5xxx\u0026#34; 5. Repeating Strings repeat(count) The repeat() method repeats the string a given number of times.\nlet text = \u0026#34;Hello\u0026#34;; let result = text.repeat(3); // \u0026#34;HelloHelloHello\u0026#34; 6. Replacing Parts of Strings replace(toReplace, replacedWith) The replace() method replaces the first occurrence of toReplace with replacedWith. If you want to replace all occurrences, use a regular expression with the g (global) flag.\nSearches are case sensitive, to replace case insensitive, use regular expression with an /i (insensitive) flag.\nlet text = \u0026#34;Please visit Microsoft and Microsoft\u0026#34;; let newText = text.replace(\u0026#34;Microsoft\u0026#34;, \u0026#34;W3Schools\u0026#34;); // Replaces the first occurrence alert(newText); // \u0026#34;Please visit W3Schools and Microsoft\u0026#34; newText = text.replace(/Microsoft/g, \u0026#34;W3Schools\u0026#34;); // Replaces all occurrences alert(newText); // \u0026#34;Please visit W3Schools and W3Schools\u0026#34; let newText = text.replace(/MICROSOFT/i, \u0026#34;W3School\u0026#34;); // regular expressions are written without Quotes replaceAll(toReplace, replacedWith) The replaceAll() method replaces all occurrences of the substring or pattern with the specified replacement string.\nlet text = \u0026#34;Cats are nice, but Cats are noisy!\u0026#34;; let newText = text.replaceAll(\u0026#34;Cats\u0026#34;, \u0026#34;Dogs\u0026#34;); alert(newText); // \u0026#34;Dogs are nice, but Dogs are noisy!\u0026#34; Allows to specify a regular expression instead of a string to be replaced. if parameter is a regular expression, the global flag /g must be set.\ntext = text.replaceAll(\u0026#34;Cats\u0026#34;, \u0026#34;Dogs\u0026#34;); text = text.replaceAll(/Cats/g, \u0026#34;Dogs\u0026#34;);\r7. String to Array Conversion split(separator) The split() method splits a string into an array of substrings based on a separator. If no separator is provided, the entire string becomes a single element array, i.e the returned array will contain the whole string in index[0].\nEmpty string (\u0026quot;\u0026quot;) splits the string into an array of individual characters. let sentence = \u0026#34;Secretary Bird specialize in stomping\u0026#34;; let words = sentence.split(\u0026#34; \u0026#34;); // Splits by spaces console.log(words); // [\u0026#34;Secretary\u0026#34;, \u0026#34;Bird\u0026#34;, \u0026#34;specialize\u0026#34;, \u0026#34;in\u0026#34;, \u0026#34;stomping\u0026#34;] let chars = sentence.split(\u0026#34;\u0026#34;); // Splits into individual characters console.log(chars); // [\u0026#34;S\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34; \u0026#34; ...] text.split(\u0026#34;,\u0026#34;) // split on commas text.split(\u0026#34;|\u0026#34;) // split on pipe join(separator) The join() method joins all elements of an array into a single string with the specified separator.\nlet words = [\u0026#34;Secretary\u0026#34;, \u0026#34;Bird\u0026#34;, \u0026#34;specialize\u0026#34;, \u0026#34;in\u0026#34;, \u0026#34;stomping\u0026#34;]; let sentence = words.join(\u0026#34; \u0026#34;); // Joins words with a space alert(sentence); // \u0026#34;Secretary Bird specialize in stomping\u0026#34; Reversing Arrays You can reverse an array before joining it to create a string in reverse order.\nlet sentence = \u0026#34;Secretary Bird specialize in stomping\u0026#34;; let reversedWords = sentence.split(\u0026#34; \u0026#34;).reverse().join(\u0026#34; \u0026#34;); console.log(reversedWords); // \u0026#34;stomping in specialize Bird Secretary\u0026#34; Summary These are some of the most common string manipulation methods in JavaScript:\nslice(), substring(), substr(): Extract substrings with different ways of specifying start and end. concat(): Join strings together. trim(), trimStart(), trimEnd(): Remove whitespace. padStart(), padEnd(): Add padding to strings. repeat(): Repeat the string a specified number of times. replace() and replaceAll(): Replace parts of strings. split() and join(): Convert strings to arrays and vice versa. Main reference for String\n","date":"2024-11-07","id":38,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/modifying-string/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Getting a substring\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// extract part and new string\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nx\"\u003esubstr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e// slices on length given\t\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econcat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etoJoin\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003etrim\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e   \u003cspan class=\"nx\"\u003etrimStart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \u003cspan class=\"nx\"\u003etrimEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003epadStart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003epadEnd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003erepeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etoReplace\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereplacedWith\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplaceAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etoReplace\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ereplacedWith\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003ewith\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"string-manipulation-methods-in-javascript\"\u003eString Manipulation Methods in JavaScript\u003c/h3\u003e\n\u003ch3 id=\"1-extracting-substrings\"\u003e1. \u003cstrong\u003eExtracting Substrings\u003c/strong\u003e\u003c/h3\u003e\n\u003ch4 id=\"slicestart--end\"\u003e\u003ccode\u003eslice(start [, end])\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003eslice()\u003c/code\u003e method extracts a portion of a string and returns a new string. If the \u003ccode\u003eend\u003c/code\u003e parameter is omitted, it slices from the \u003ccode\u003estart\u003c/code\u003e to the end of the string.\u003c/p\u003e","tags":[],"title":"Modifying String"},{"content":"Booleans are a primitive data type with only two possible values: true and false. They are commonly used to represent binary states such as \u0026ldquo;yes/no\u0026rdquo; or \u0026ldquo;on/off\u0026rdquo;.\nlet nameFieldChecked = true; let ageFieldChecked = false;\rComparisons (==, !=, \u0026gt;=, \u0026lt;=) Boolean values often come as the result of comparison operations.\nconsole.log(3 \u0026gt; 2); // true console.log(2 \u0026gt; 3); // false String Comparison When comparing strings, JavaScript compares their Unicode values from left to right, one character at a time. This means that uppercase letters are considered \u0026ldquo;less than\u0026rdquo; lowercase letters (because their Unicode values are smaller), and non-alphabetical characters are also considered.\nalert(\u0026#39;z\u0026#39; \u0026gt; \u0026#39;A\u0026#39;); // true (uppercase \u0026#39;A\u0026#39; \u0026lt; lowercase \u0026#39;z\u0026#39;) alert(\u0026#39;Glow\u0026#39; \u0026gt; \u0026#39;Glee\u0026#39;); // true (\u0026#39;Glow\u0026#39; is greater than \u0026#39;Glee\u0026#39; because \u0026#39;o\u0026#39; \u0026gt; \u0026#39;e\u0026#39;) alert(\u0026#39;Bee\u0026#39; \u0026gt; \u0026#39;Be\u0026#39;); // true (\u0026#39;Bee\u0026#39; is longer than \u0026#39;Be\u0026#39;, and longer strings are greater) alert(\u0026#34;Aardvark\u0026#34; \u0026lt; \u0026#34;Zoroaster\u0026#34;); // true (\u0026#39;A\u0026#39; \u0026lt; \u0026#39;Z\u0026#39; because of Unicode comparison) JavaScript compares strings character by character based on their Unicode values. Here\u0026rsquo;s the step-by-step process:\nCompare the first character. If they are the same, move to the next character and repeat. The first difference found determines the result. [[7_type_conversions]]\nStrict Comparison (===, !==) Regular check == cannot differentiate 0 from fasle. For strict equality comparisons, JavaScript offers the === (strict equality) and !== (strict inequality) operators. These operators do not perform type conversion.\n// Regular equality comparison (performs type conversion) alert(0 == false); // true (0 is falsy, so it converts to false) alert(\u0026#34;\u0026#34; == false); // true (empty string is falsy, so it converts to false) // Strict equality comparison (does not perform type conversion) alert(\u0026#34;\u0026#34; === false); // false (\u0026#34;\u0026#34; is a string, false is a boolean) alert(0 === false); // false (0 is a number, false is a boolean) When we use === or !==, JavaScript checks both the value and the type, so there\u0026rsquo;s no unexpected type conversion.\nComparison with null \u0026amp; undefined null and undefined are special values in JavaScript. They behave differently when used with comparison operators. Equality (==): null and undefined are considered equal to each other, but not equal to any other values. Strict Equality (===): null is not equal to undefined, because they are different types. alert(null == undefined); // true (only null == undefined is true) alert(null === undefined); // false (strict comparison) alert(null == 0); // false (null is not equal to 0) alert(null == false); // false (null is not equal to false) Testing for a valid value: To check if a variable is not null or undefined, use the == or != operators. This can be useful to determine if a value has been set.\nlet value = null; if (value == null) { alert(\u0026#34;Value is null or undefined\u0026#34;); }\rMath Comparisons (\u0026gt;, \u0026lt;, \u0026lt;=, \u0026gt;=) When performing mathematical comparisons involving null or undefined, JavaScript performs type coercion:\nnull becomes 0 when compared mathematically. undefined becomes NaN (Not-a-Number), which is never equal to any number. alert(null \u0026lt; 0); // false (null is treated as 0) alert(null == 0); // false (null is not equal to 0) alert(null \u0026gt;= 0); // true (null is treated as 0) alert(undefined == 0); // false (undefined is not equal to 0) alert(undefined \u0026lt; 0); // false (undefined becomes NaN, which is not less than 0) alert(undefined \u0026gt;= 0); // false (undefined becomes NaN, which is not greater than or equal to 0) Summary: Comparison == Behavior === Behavior null == undefined true false null == 0 false false undefined == 0 false false null \u0026lt; 0 false - null \u0026gt;= 0 true - undefined \u0026lt; 0 false - undefined \u0026gt;= 0 false - ","date":"2024-11-07","id":39,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/boolean-type/","summary":"\u003cp\u003eBooleans are a primitive data type with only two possible values: \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e. They are commonly used to represent binary states such as \u0026ldquo;yes/no\u0026rdquo; or \u0026ldquo;on/off\u0026rdquo;.\u003c/p\u003e","tags":[],"title":"Boolean Type"},{"content":"Unary, Binary Operators, and Operands Operand An operand is the value or entity that an operator acts upon. In simple terms, it is the input for an operation.\nIn the expression 5 * 2:\nThe operands are 5 (on the left) and 2 (on the right). The operator * (multiplication) operates on these two operands. Sometimes, operands are also referred to as \u0026ldquo;arguments\u0026rdquo;, especially in the context of functions or method calls.\nUnary Operator A unary operator is an operator that works with only one operand. It operates on a single value and typically performs an operation such as negation or increment.\nlet x = 5; x = -x; // Unary negation operator (-) reverses the sign of \u0026#39;x\u0026#39; Here, the unary negation operator - is applied to the operand x, and it changes the value of x from 5 to -5.\nBinary Operator A binary operator is an operator that works with two operands. It performs operations between two values, such as addition, subtraction, or comparison.\nlet x = 5, y = 3; alert(y - x); // Binary subtraction operator (-) subtracts \u0026#39;x\u0026#39; from \u0026#39;y\u0026#39;, returns -2 Here, the binary operator - is applied between two operands, y and x. The result is -2 (3 minus 5).\nOperator Precedence Operator precedence determines the order in which operators are evaluated in an expression with multiple operators. Operators with higher precedence are evaluated first.\nWhen operators have the same precedence, they are evaluated from left to right (except for certain operators like ** and =, which are evaluated from right to left).\nlet result = 2 + 3 * 4; // The multiplication happens first alert(result); // 14 (3 * 4 = 12, then 2 + 12 = 14) In this example, the multiplication (*) has higher precedence than addition (+), so 3 * 4 is calculated first.\nPrecedence of Common Operators: Unary plus (+): Precedence level 14 (higher than addition) Addition (+): Precedence level 12 Assignment (=): Precedence level 2 (lowest, so assignments happen last) operator precedence table\nModify in Place Certain operators in JavaScript allow you to modify the value of a variable in place. These operators simplify assignments by performing an operation on a variable and immediately storing the result back in the same variable.\nlet n = 2; n = n + 5; // standard way n += 5; // shorthand equivalent (same result) The += operator is a shorthand for adding to a variable and assigning the result back. This is true for all arithmetic and bitwise operators like -, *, /, and %.\nn = n * 2; // standard multiplication n *= 2; // shorthand multiplication Increment / Decrement Operators The increment (++) and decrement (--) operators increase or decrease a variable’s value by 1, respectively. They can be used in two forms:\nPostfix: counter++\nThe postfix form increases the value after the current expression is evaluated. Prefix: ++counter\nThe prefix form increases the value before the current expression is evaluated. let counter = 1; alert( 2 * ++counter ); // 4 (counter is incremented first, then used in the multiplication) In this example, ++counter increments the value of counter to 2 before multiplying by 2.\nlet counter = 1; alert( 2 * counter++ ); // 2 (counter is used first, then incremented) Here, counter++ uses the current value of counter (1), and then it gets incremented after the multiplication.\nRules: Postfix: Returns the value before the increment/decrement. Prefix: Returns the value after the increment/decrement. Note: You cannot increment or decrement a constant or non-variable, such as 5++, which will result in a syntax error.\nBitwise Operators Bitwise operators are used to perform operations on the binary representation of numbers. These operators treat operands as 32-bit integers and work on the bit-level. While they are rarely used in everyday JavaScript programming, they are essential for low-level programming or working with data manipulation at the binary level.\nList of Bitwise Operators: AND (\u0026amp;): Compares each bit of two numbers and returns 1 if both bits are 1, otherwise 0. OR (|): Compares each bit of two numbers and returns 1 if at least one of the bits is 1. XOR (^): Compares each bit of two numbers and returns 1 if the bits are different, otherwise 0. NOT (~): Inverts all bits of a number (flips 1 to 0 and 0 to 1). Left Shift (\u0026lt;\u0026lt;): Shifts the bits of a number to the left by a specified number of positions, filling with zeros. Right Shift (\u0026gt;\u0026gt;): Shifts the bits of a number to the right, keeping the sign bit (for negative numbers). Zero-Fill Right Shift (\u0026gt;\u0026gt;\u0026gt;): Shifts the bits of a number to the right, filling with zeros (ignores sign bit). let a = 5; // 0101 in binary let b = 3; // 0011 in binary console.log(a \u0026amp; b); // 1 (0101 \u0026amp; 0011 = 0001) console.log(a | b); // 7 (0101 | 0011 = 0111) console.log(a ^ b); // 6 (0101 ^ 0011 = 0110) console.log(~a); // -6 (inverts all bits of 5, result in 32-bit two\u0026#39;s complement representation) console.log(a \u0026lt;\u0026lt; 1); // 10 (shift left, 0101 becomes 1010) console.log(a \u0026gt;\u0026gt; 1); // 2 (shift right, 0101 becomes 0010) console.log(a \u0026gt;\u0026gt;\u0026gt; 1); // 2 (shift right, zero-fill shift) ","date":"2024-11-07","id":40,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/operators/","summary":"\u003ch3 id=\"unary-binary-operators-and-operands\"\u003eUnary, Binary Operators, and Operands\u003c/h3\u003e\n\u003ch4 id=\"operand\"\u003eOperand\u003c/h4\u003e\n\u003cp\u003eAn \u003cstrong\u003eoperand\u003c/strong\u003e is the value or entity that an operator acts upon. In simple terms, it is the input for an operation.\u003c/p\u003e","tags":[],"title":"Operators"},{"content":"JavaScript automatically converts values between different types when necessary. This is commonly known as type coercion. It happens in a variety of scenarios, such as when performing mathematical operations or comparisons.\nAutomatic Type Conversion: Comparison with Different Types: JavaScript will convert values to the same type when doing comparisons, which can sometimes produce unexpected results.\nalert(\u0026#39;2\u0026#39; \u0026gt; 1); // true, because \u0026#39;2\u0026#39; is automatically converted to a number alert(\u0026#39;01\u0026#39; == 1); // true, because \u0026#39;01\u0026#39; is automatically converted to 1 (string to number) alert(true == 1); // true, because \u0026#39;true\u0026#39; is converted to 1 alert(false == 0); // true, because \u0026#39;false\u0026#39; is converted to 0 Boolean Conversion: When converting values to Boolean, JavaScript considers certain values as falsy (which become false) and others as truthy (which become true).\nFalsy values:\n0 \u0026quot;\u0026quot; (empty string) null undefined NaN Truthy values:\nNon-zero numbers Non-empty strings Objects, arrays, functions, etc. alert(Boolean(1)); // true alert(Boolean(0)); // false alert(Boolean(\u0026#34;0\u0026#34;)); // true alert(Boolean(\u0026#34;\u0026#34;)); // false alert(Boolean(\u0026#34;Hello\u0026#34;));// true alert(Boolean(null)); // false alert(Boolean([])); // true (empty array is truthy) Explicit Type Conversion There are situations where you might need to explicitly convert values between types, which can be done using functions like String(), Number(), and Boolean().\nString Conversion To convert a value to a string explicitly, you can use the String() function.\nlet value = true; value = String(value); // \u0026#34;true\u0026#34; alert(typeof value); // \u0026#34;string\u0026#34; Alternatively, you can use string concatenation to convert any value to a string:\nlet number = 123; let str = number + \u0026#34;\u0026#34;; // converts 123 to \u0026#34;123\u0026#34; Numeric Conversion When performing mathematical operations, JavaScript automatically converts strings to numbers if they represent valid numeric values. For explicit conversion, you can use the Number() function.\nlet str = \u0026#34;123\u0026#34;; let num = Number(str); alert(num); // 123 alert(typeof num); // \u0026#34;number\u0026#34; If the value is not a valid number, Number() will return NaN.\nlet str = \u0026#34;Hello\u0026#34;; let num = Number(str); alert(num); // NaN Common automatic conversions:\nundefined becomes NaN null becomes 0 Strings containing a valid numeric value are converted to numbers (e.g., \u0026quot;123\u0026quot; becomes 123). Non-numeric strings become NaN. Numeric Conversion with Unary + The unary + operator is a shorthand for converting a value to a number, similar to Number().\nalert(+true); // 1 alert(+false); // 0 alert(+\u0026#34;\u0026#34;); // 0 alert(+undefined); // NaN In the case of strings that are numbers, it works like Number():\nlet apple = \u0026#34;2\u0026#34;; let orange = \u0026#34;3\u0026#34;; alert(apple + orange); // \u0026#34;23\u0026#34; (concatenation, as both are strings) alert(+apple + +orange); // 5 (conversion to number, then addition) Summary of Common Type Conversions String Conversion:\nString(value) or concatenating with an empty string (value + \u0026quot;\u0026quot;) will convert any value to a string. Numeric Conversion:\nNumber(value) or unary + will convert values to numbers. If the value is not a valid number, it will return NaN. Boolean Conversion:\nBoolean(value) converts any value to true or false, based on its truthiness. Common Conversion Examples: let num = \u0026#34;100\u0026#34;; // string let bool = \u0026#34;false\u0026#34;; // string alert(Number(num)); // 100 (string to number) alert(Boolean(num)); // true (non-empty string is truthy) alert(String(num)); // \u0026#34;100\u0026#34; (number to string) alert(Number(bool)); // NaN (string \u0026#34;false\u0026#34; is not a valid number) alert(Boolean(bool)); // true (non-empty string is truthy) ","date":"2024-11-07","id":41,"permalink":"/personal-site/docs/java-script/js-language/1-data-types/auto-type-conversions/","summary":"\u003cp\u003eJavaScript automatically converts values between different types when necessary. This is commonly known as \u003cstrong\u003etype coercion\u003c/strong\u003e. It happens in a variety of scenarios, such as when performing mathematical operations or comparisons.\u003c/p\u003e","tags":[],"title":"Auto Type Conversions"},{"content":"","date":"2024-11-07","id":42,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/conditionals/","summary":"","tags":[],"title":"Conditionals"},{"content":"","date":"2024-11-07","id":43,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/","summary":"","tags":[],"title":"Control Flow"},{"content":"Conditional Execution / Branching if() Statement The if statement allows you to execute a block of code only if a specified condition is true. The condition is typically a Boolean expression that evaluates to either true or false.\nif (condition) { // Code to execute if condition is true }\rlet hour = 14; // Example hour value let greeting; if (hour \u0026lt; 18) { greeting = \u0026#34;Good Day\u0026#34;; } console.log(greeting); // Output: Good Day let theNumber = Number(prompt(\u0026#34;Pick a number\u0026#34;)); if (!Number.isNaN(theNumber)) { console.log(\u0026#34;Your number is the square root of \u0026#34; + (theNumber * theNumber)); }\rNumber() converts the user input to a number. If the input is not a valid number (i.e., NaN). Number.isNaN() is a standard function that returns true only if the argument is NaN. The condition !Number.isNaN(theNumber) ensures that the block is executed only if the value is a valid number. So \u0026lsquo;unless theNumber is not-a-number, do this\u0026rsquo; Note: Number.isNaN() is more reliable than isNaN() because it specifically checks for NaN values, whereas isNaN() can produce unexpected results for non-numeric strings.\nBlock vs Single Statement When there’s only one statement to execute after if, curly braces {} can be omitted:\nif (1 + 1 === 2) console.log(\u0026#34;It\u0026#39;s true\u0026#34;);\rHowever, it\u0026rsquo;s considered good practice to always use curly braces for clarity and to avoid errors when adding additional statements.\nelse Clause The else clause is used to specify what should happen if the if condition evaluates to false.\nif (condition) { // Code if condition is true } else { // Code if condition is false }\rlet theNumber = Number(prompt(\u0026#34;Pick a number\u0026#34;)); if (!Number.isNaN(theNumber)) { console.log(\u0026#34;Your number is the square root of \u0026#34; + (theNumber * theNumber)); } else { console.log(\u0026#34;Why didn\u0026#39;t you give me a number?\u0026#34;); }\relse if Statement The else if statement is used when you have multiple conditions to check. It allows you to chain multiple conditions together.\nif (condition1) { // Code for condition1 } else if (condition2) { // Code for condition2 } else { // Code if none of the above conditions are true }\rlet num = Number(prompt(\u0026#34;Pick a number\u0026#34;)); if (num \u0026lt; 10) { console.log(\u0026#34;Small\u0026#34;); } else if (num \u0026lt; 100) { console.log(\u0026#34;Medium\u0026#34;); } else { console.log(\u0026#34;Large\u0026#34;); }\rNote: If num is less than 10, it prints \u0026quot;Small\u0026quot; and does not check further conditions. The evaluation stops after the first true condition.\nCommon Pitfalls String and Number Conversion\nIt’s important to handle type conversion carefully, especially when working with user inputs. For example, the Number() function can produce unexpected results if the user enters something that isn’t a valid number.\nTip: Always ensure to check that the input is valid before performing mathematical operations.\nFizzBuzz for (let number = 1; number \u0026lt;= 100; number++) { if ((number % 3) === 0 \u0026amp;\u0026amp; (number % 5) === 0) { console.log(\u0026#34;fizzbuzz\u0026#34;); } else if (number % 5 === 0) { console.log(\u0026#34;buzz\u0026#34;); } else if (number % 3 === 0) { console.log(\u0026#34;fizz\u0026#34;); } else { console.log(number); } }\r","date":"2024-11-07","id":44,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/conditionals/if-else/","summary":"\u003ch2 id=\"conditional-execution--branching\"\u003e\u003cstrong\u003eConditional Execution / Branching\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"if-statement\"\u003e\u003cstrong\u003e\u003ccode\u003eif()\u003c/code\u003e Statement\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eif\u003c/code\u003e statement allows you to execute a block of code only if a specified condition is true. The condition is typically a Boolean expression that evaluates to either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"if, else"},{"content":"switch Statements The switch statement is a more concise and readable way to handle multiple conditional checks based on a single value. It is often used as an alternative to multiple if...else if statements, particularly when you have many conditions to check against a single expression.\nswitch (expression) { case value1: // code to execute if expression === value1 break; case value2: // code to execute if expression === value2 break; default: // code to execute if no cases match break; }\rSwitch takes single expression or value as an input, and then compares with several case values until they find one that matches that value. When the equality is found switch starts executing, starting from the correspondingcase. Execution continues till the nearest break, or end of switch. As many number of case can be put inside the block opened by switch if no case is matched, then default code is executed if exists. If there is no break then the execution continues with the next case without any checks Note: switch statements use strict equality (===), meaning both value and type must match. '3' !== 3, so a string '3' would not match the number 3.\nBasic switch Statement let a = 2 + 2; switch (a) { case 3: alert(\u0026#39;Too small\u0026#39;); break; case 4: alert(\u0026#39;Exactly\u0026#39;); break; default: alert(\u0026#39;I don’t know such values\u0026#39;); }\rExplanation: The variable a is evaluated as 4. The switch checks the cases: It doesn’t match case 3, so it moves to the next case. It matches case 4, so the corresponding code alert('Exactly') is executed. The break statement prevents further case evaluation, exiting the switch block. Weather Application switch (prompt(\u0026#34;What is the weather like?\u0026#34;)) { case \u0026#34;rainy\u0026#34;: console.log(\u0026#34;Remember to bring an umbrella.\u0026#34;); break; case \u0026#34;sunny\u0026#34;: console.log(\u0026#34;Dress lightly.\u0026#34;); break; case \u0026#34;cloudy\u0026#34;: console.log(\u0026#34;Go outside.\u0026#34;); break; default: console.log(\u0026#34;Unknown weather type!\u0026#34;); break; }\rFall-through Behavior If a break statement is not included in a case, JavaScript will execute the code for that case, but then continue executing subsequent case blocks without further checks until a break or the end of the switch is reached. This is called fall-through behavior.\nNote: Fall-through can be useful when multiple case values should trigger the same block of code. However, it is generally considered good practice to be explicit with break statements to avoid unintended fall-through.\nGrouping case Blocks You can group multiple case values that should run the same code. This allows you to combine cases that share identical behavior.\nlet a = 3; switch(a) { case 4: alert(\u0026#39;Right!\u0026#39;); break; case 3: case 5: alert(\u0026#39;Wrong\u0026#39;); alert(\u0026#34;Why don\u0026#39;t you take a math class?\u0026#34;); break; default: alert(\u0026#39;The result is strange.\u0026#39;); }\rKey Points to Remember switch uses strict equality (===): Ensure that both the value and type match. For example, '3' !== 3. break is optional: Without it, execution will \u0026ldquo;fall through\u0026rdquo; to the next case. default is optional: It provides a fallback when no cases match. Multiple case values can share the same block: You can group cases that should execute the same code. switch is generally more readable: When dealing with many conditions based on a single value, switch can improve readability compared to long chains of if...else statements. ","date":"2024-11-07","id":45,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/conditionals/switch-case/","summary":"\u003ch2 id=\"switch-statements\"\u003e\u003cstrong\u003e\u003ccode\u003eswitch\u003c/code\u003e Statements\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement is a more concise and readable way to handle multiple conditional checks based on a single value. It is often used as an alternative to multiple \u003ccode\u003eif...else if\u003c/code\u003e statements, particularly when you have many conditions to check against a single expression.\u003c/p\u003e","tags":[],"title":"switch-case"},{"content":"Ternary Operator / Conditional Operator The ? operator is called \u0026ldquo;ternary\u0026rdquo; because it has three operands, making it unique in JavaScript. It\u0026rsquo;s often referred to as the conditional or question mark operator. It provides a shorthand for if-else statements.\nThe basic syntax of the ternary operator is:\nlet result = condition ? value1 : value2; boolean ? runIfTrue : runIfFalse\rIf the condition is true, the expression returns value1; otherwise, it returns value2.\nlet accessAllowed = (age \u0026gt; 18) ? true : false;\rThis is equivalent to:\nif (age \u0026gt; 18) { accessAllowed = true; } else { accessAllowed = false; }\rThe ? operator has low precedence, meaning it runs after operators like \u0026gt;. console.log(true ? 1 : 2); // 1 console.log(false ? 1 : 2); // 2 const greeting = isBirthday ? \u0026#34;Happy birthday\u0026#34; : \u0026#34;Good morning\u0026#34;;\r// switching b/w black and white theme select.value === \u0026#34;black\u0026#34; ? update(\u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;) : update (\u0026#34;white\u0026#34;, \u0026#34;black\u0026#34;); // make black to white, or white to black Multiple ? Operators (Chaining) You can chain multiple ternary operators together to handle more complex conditions:\nlet age = prompt(\u0026#34;How old are you?\u0026#34;, 18); let message = (age \u0026lt; 3) ? \u0026#34;Hi, baby\u0026#34; : // If true, \u0026#34;Hi, baby\u0026#34; (age \u0026lt; 18) ? \u0026#34;Hello\u0026#34; : // If true, \u0026#34;Hello\u0026#34; (age \u0026lt; 100) ? \u0026#34;Greetings\u0026#34; : // If true, \u0026#34;Greetings\u0026#34; \u0026#34;What an unusual age\u0026#34;; // Default message alert(message);\rThe operator evaluates the condition before the ? and selects one of the two options after the ? based on the result. In a ? b : c, it returns b if a is true, and c if a is false. This is equivalent to using if...else:\nif (age \u0026lt; 3) { message = \u0026#39;Hi, baby\u0026#39;; } else if (age \u0026lt; 18) { message = \u0026#39;Hello\u0026#39;; } else if (age \u0026lt; 100) { message = \u0026#39;Greetings\u0026#39;; } else { message = \u0026#39;What an unusual age\u0026#39;; }\rNon-traditional Use of ? It’s possible to use the ternary operator without assigning a value to a variable, though it\u0026rsquo;s generally discouraged. For example:\nlet company = prompt(\u0026#39;Which company?\u0026#39;, \u0026#39;\u0026#39;); (company == \u0026#39;Netscape\u0026#39;) ? alert(\u0026#39;Right!\u0026#39;) : alert(\u0026#39;Wrong.\u0026#39;);\rHowever, this usage is not recommended because:\nIt sacrifices readability and clarity. The purpose of the ternary operator is to return one of two values, not to execute different branches of code. For branching logic, an if...else is more appropriate. Our eyes scan the code vertically. Code blocks which span several lines are easier to understand than a long, horizontal instruction set.\nLimitations of ? No break or continue with ? The ternary operator only works with expressions and cannot handle statements like break or continue.\nif (i \u0026gt; 5) { alert(i); } else { continue; // Invalid } // This will result in an error: (i \u0026gt; 5) ? alert(i) : continue; // \u0026#39;continue\u0026#39; is not allowed here In such cases, use an if...else statement instead.\nSummary: The ternary operator is a concise way to write if-else logic. Use it to choose between two values based on a condition. Avoid using the ternary operator for executing code blocks (e.g., with alert or continue), as it reduces readability. Remember that the ternary operator has low precedence, so its evaluation order is important. ","date":"2024-11-07","id":46,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/conditionals/ternary-operator/","summary":"\u003ch3 id=\"ternary-operator--conditional-operator\"\u003e\u003cstrong\u003eTernary Operator / Conditional Operator\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e?\u003c/code\u003e operator is called \u0026ldquo;ternary\u0026rdquo; because it has \u003cstrong\u003ethree\u003c/strong\u003e operands, making it unique in JavaScript. It\u0026rsquo;s often referred to as the \u003cstrong\u003econditional\u003c/strong\u003e or \u003cstrong\u003equestion mark\u003c/strong\u003e operator. It provides a shorthand for \u003ccode\u003eif-else\u003c/code\u003e statements.\u003c/p\u003e","tags":[],"title":"Ternary Operator"},{"content":"Logical operators are used to reason about Boolean values. They can be applied to values of any type, not just Boolean. ||(OR) \u0026amp;\u0026amp;(AND) !(NOT) ??(Nullish Coalescing)\n1. || (OR) The || (OR) operator evaluates to true if any of its operands are true.\nReturns the first truthy value.\nresult = a || b; // a or b The operands are evaluated left to right. Each operand is converted to boolean. The operator returns the first truthy value it finds, or the last value if no truthy value is found. if (1 || 0) { // Equivalent to true || false alert(\u0026#39;truthy!\u0026#39;); }\rlet hour = 9; let isWeekend = true; if (hour \u0026lt; 10 || hour \u0026gt; 18) { alert(\u0026#39;The office is closed.\u0026#39;); } if (hour \u0026lt; 10 || hour \u0026gt; 18 || isWeekend) { alert(\u0026#39;The office is closed.\u0026#39;); }\ralert(1 || 0); // 1 (truthy) alert(null || 1); // 1 (truthy) alert(null || 0 || 1); // 1 (truthy) alert(undefined || null || 0); // 0 (falsy) alert(first || last || Nickname || \u0026#34;Anonymous\u0026#34;); // \u0026#34;Anonymous\u0026#34; (if all fail) Short-Circuit Evaluation: Once the first truthy value is found, the evaluation stops, and further operands aren\u0026rsquo;t evaluated. Used to execute the command only if the left is false/falsey.\ntrue || alert(\u0026#34;not printed\u0026#34;); // alert won\u0026#39;t run false || alert(\u0026#34;printed\u0026#34;); // alert will run 2. \u0026amp;\u0026amp; (AND) \u0026amp;\u0026amp; finds the first falsy value.\nThe operator returns the first falsy value it encounters, or the last value if all operands are truthy. The \u0026amp;\u0026amp; (AND) operator evaluates to true only if both operands are true. From left to right, converting each operand to Boolean. If the result is false, stops and returns the original value of that operand. If all are truthy, then the last one is returned.\nif (hour == 12 \u0026amp;\u0026amp; minute == 30) { alert(\u0026#34;The time is 12:30\u0026#34;); } if (1 \u0026amp;\u0026amp; 0) { alert(\u0026#34;Won\u0026#39;t work as one of them is falsy\u0026#34;); }\rresult = value1 \u0026amp;\u0026amp; value2 \u0026amp;\u0026amp; value3; alert(1 \u0026amp;\u0026amp; 0); // 0 (falsy) alert(1 \u0026amp;\u0026amp; 5); // 5 (truthy) alert(null \u0026amp;\u0026amp; 5); // null (falsy) alert(0 \u0026amp;\u0026amp; \u0026#34;whatever\u0026#34;); // 0 (falsy) alert(1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; null \u0026amp;\u0026amp; 3); // null (falsy) alert(1 \u0026amp;\u0026amp; 2 \u0026amp;\u0026amp; 3); // 3 (truthy) Operator Precedence: The \u0026amp;\u0026amp; operator has higher precedence than ||, so it is evaluated first in expressions. a \u0026amp;\u0026amp; b || c \u0026amp;\u0026amp; d // both are equal (a \u0026amp;\u0026amp; b) || (c \u0026amp;\u0026amp; d) alert(null || 2 \u0026amp;\u0026amp; 3 || 4); // 2 \u0026amp;\u0026amp; 3 evaluates to 3 // null || 3 || 4 evaluates to 3 3. ! (NOT) The ! (NOT) operator negates the Boolean value of its operand. It flips true to false and false to true.\nresult = !value; alert(!true); // false alert(!0); // true (0 is falsy) if (!(age \u0026gt;= 14 \u0026amp;\u0026amp; age \u0026lt;= 90)) { // Age is not between 14 and 90 }\rThis is equivalent to:\nif (age \u0026lt; 14 || age \u0026gt; 90) { // Age is not between 14 and 90 }\rOperator Precedence: The ! operator has higher precedence than both \u0026amp;\u0026amp; and ||, so it is evaluated first. if (-1 || 0) alert(\u0026#39;first\u0026#39;); if (-1 \u0026amp;\u0026amp; 0) alert(\u0026#39;second\u0026#39;); if (null || -1 \u0026amp;\u0026amp; 1) alert(\u0026#39;third\u0026#39;); // \u0026#34;first\u0026#34; and \u0026#34;third\u0026#34; will execute as -1 is truthy Important Notes: Avoid Replacing if with || or \u0026amp;\u0026amp;:\nLogical operators are often used for short-circuit evaluations, not for complex branching. It’s recommended to use if...else when the logic requires more than just a true/false check. 4. Nullish Coalescing (??) The ?? (Nullish Coalescing) operator returns the right-hand operand if the left-hand operand is null or undefined. A value is considered “defined” when it’s neither null nor undefined.\nresult = a ?? b; // returns b if a is null or undefined console.log(0 ?? 100); // 0 (0 is defined, so it returns 0) console.log(null ?? 100); // 100 (null is not defined, so it returns 100) console.log(undefined ?? 100); // 100 (undefined is not defined, so it returns 100) If the left operand is not null or undefined, the ?? operator will return it:\nlet user = null; alert(user ?? \u0026#34;Anonymous\u0026#34;); // \u0026#34;Anonymous\u0026#34; (user is null) let username = null; let defaultName = \u0026#34;Guest\u0026#34;; let name = username ?? defaultName; alert(name); // \u0026#34;Guest\u0026#34; (because username is null) let username = \u0026#34;John\u0026#34;; let defaultName = \u0026#34;Guest\u0026#34;; let name = username ?? defaultName; alert(name); // \u0026#34;John\u0026#34; (because username is not null/undefined) Difference between ?? and || (OR Operator) While both the nullish coalescing operator (??) and the logical OR operator (||) check for falsy values, there is an important difference:\n?? only returns the right operand if the left operand is either null or undefined. || returns the right operand for any falsy value (including 0, false, \u0026quot;\u0026quot;, NaN, etc.). ?? is more preferable than || as it is more predictable. console.log(0 || 100); // 100 (0 is falsy, so returns 100) console.log(0 ?? 100); // 0 (0 is defined, so returns 0) console.log(null ?? 100); // 100 (null is not defined, so returns 100) console.log(\u0026#39;\u0026#39; ?? 100); // \u0026#39;\u0026#39; (empty string is defined, so returns \u0026#39;\u0026#39;) Using ?? with \u0026amp;\u0026amp; or || For safety reasons, JavaScript forbids combining ?? with \u0026amp;\u0026amp; or || without explicitly specifying precedence using parentheses. This is because the behavior of the combined operators can be ambiguous.\nlet x = 1 \u0026amp;\u0026amp; 2 ?? 3; // Syntax Error: Invalid use of ?? with \u0026amp;\u0026amp; To avoid the error, use parentheses to clarify the precedence:\nlet x = (1 \u0026amp;\u0026amp; 2) ?? 3; // Correct! The AND operation happens first if (-1 || 0) alert (\u0026#39;first\u0026#39;); if (-1 \u0026amp;\u0026amp; 0) alert (\u0026#39;second\u0026#39;): if (null || -1 \u0026amp;\u0026amp; 1) alert (\u0026#39;third\u0026#39;); // first and third will become true and execute // -1 is truthy if ( (iceCreamVanOutside || houseStatus === \u0026#34;on fire\u0026#34;)) { console.log(\u0026#34;you should leave the house quickly\u0026#34;); } else { console.log(\u0026#34;you should just stay in then\u0026#34;) } if ( !(iceCreamVanOutside || houseStatus === \u0026#34;on fire\u0026#34;)) { console.log(\u0026#34;you should just stay in then\u0026#34;); } else { console.log(\u0026#34;you should leave the house quickly\u0026#34;) }\rPassword Verification (using logical operators)\nlet userName = prompt(\u0026#34;Who\u0026#39;s there?\u0026#34;, \u0026#39;\u0026#39;); if (userName === \u0026#34;Admin\u0026#34;) { let pass = prompt(\u0026#39;Password?\u0026#39;, \u0026#39;\u0026#39;); if (pass === \u0026#39;TheMaster\u0026#39;) { alert(\u0026#34;Welcome!\u0026#34;); } else if (pass === \u0026#39;\u0026#39; || pass === null) { alert(\u0026#39;Canceled\u0026#39;); } else { alert(\u0026#39;Wrong password\u0026#39;); } } else if (userName === \u0026#39;\u0026#39; || userName === null) { alert(\u0026#39;Cancelled\u0026#39;); } else { alert(\u0026#34;I don\u0026#39;t know you\u0026#34;); }\rSummary of Logical Operators: || (OR): Returns the right operand if the left operand is any falsy value (including 0, false, \u0026quot;\u0026quot;, etc.). \u0026amp;\u0026amp; (AND): Returns the first falsy value, or the last operand if all are truthy. ! (NOT): Flips the Boolean value of its operand. ?? (Nullish Coalescing): Returns the right operand if the left operand is null or undefined. Safety with ??: Don’t combine ?? with \u0026amp;\u0026amp; or || without parentheses. Ensure proper precedence to avoid syntax errors. ","date":"2024-11-07","id":47,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/conditionals/logical-operators/","summary":"\u003cp\u003eLogical operators are used to reason about \u003cstrong\u003eBoolean\u003c/strong\u003e values. They can be applied to values of any type, not just Boolean.\n\u003ccode\u003e||(OR)  \u0026amp;\u0026amp;(AND)  !(NOT)  ??(Nullish Coalescing)\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Logical Operators"},{"content":"Logical operators like \u0026amp;\u0026amp;, ??, and || handle values of different types in a unique way. They convert the left-hand value to a Boolean to decide how to proceed. These operators might return either the original left-hand value or the right-hand value, based on the evaluation.\n1. || (OR) Operator The || (OR) operator will return the left-hand value if it can be converted to true. If not, it returns the right-hand value.\nValues that are considered falsy in JavaScript (like 0, NaN, \u0026quot;\u0026quot;, null, undefined) will cause || to return the right-hand value. Otherwise, it returns the left-hand value. console.log(null || \u0026#34;user\u0026#34;); // \u0026#34;user\u0026#34; (null is falsy) console.log(\u0026#34;Agnes\u0026#34; || \u0026#34;user\u0026#34;); // \u0026#34;Agnes\u0026#34; (non-empty string is truthy) Fallback to Default Values The || operator is often used to provide default values when a variable might be empty or falsy.\nlet username = \u0026#34;\u0026#34;; let defaultName = \u0026#34;Guest\u0026#34;; let name = username || defaultName; console.log(name); // \u0026#34;Guest\u0026#34; (since username is falsy, defaultName is returned) In this example, if username is falsy (empty string, null, etc.), \u0026quot;Guest\u0026quot; is used as a fallback value.\n2. \u0026amp;\u0026amp; (AND) Operator The \u0026amp;\u0026amp; (AND) operator works oppositely to || and ??:\nIf the value on the left side is falsy (like 0, null, undefined), \u0026amp;\u0026amp; immediately returns the left-hand value. If the value on the left side is truthy, it returns the right-hand value. console.log(0 \u0026amp;\u0026amp; \u0026#34;user\u0026#34;); // 0 (0 is falsy) console.log(\u0026#34;Agnes\u0026#34; \u0026amp;\u0026amp; \u0026#34;user\u0026#34;); // \u0026#34;user\u0026#34; (both are truthy) This can be useful for chaining conditions or using a default value if the left operand is truthy:\nlet user = \u0026#34;John\u0026#34;; let role = \u0026#34;admin\u0026#34;; let userRole = user \u0026amp;\u0026amp; role; // \u0026#34;admin\u0026#34; If user is falsy (e.g., null, undefined, \u0026quot;\u0026quot;), userRole would be assigned the falsy value of user.\n3. ?? (Nullish Coalescing) Operator The ?? operator behaves similarly to ||, but with a key difference: it only considers null and undefined as falsy values. Other falsy values like 0, false, or \u0026quot;\u0026quot; are treated as valid values.\nconsole.log(null ?? \u0026#34;default\u0026#34;); // \u0026#34;default\u0026#34; (null is considered \u0026#34;undefined\u0026#34; here) console.log(0 ?? \u0026#34;default\u0026#34;); // 0 (0 is not null or undefined) console.log(undefined ?? \u0026#34;default\u0026#34;); // \u0026#34;default\u0026#34; (undefined is treated as \u0026#34;missing\u0026#34;) This allows for a more predictable behavior when you need a fallback only for missing or undefined values, rather than for all falsy values.\nShort-Circuit Evaluation All three logical operators (\u0026amp;\u0026amp;, ||, and ??) support short-circuit evaluation. This means that the right-hand operand is only evaluated if necessary.\nFor true || x, x is not evaluated because the left-hand operand is already truthy (the result is true). For false \u0026amp;\u0026amp; x, x is not evaluated because the left-hand operand is falsy (the result is false). console.log(true || alert(\u0026#34;This will not be evaluated\u0026#34;)); // The alert is not triggered. console.log(false \u0026amp;\u0026amp; alert(\u0026#34;This will not be evaluated either\u0026#34;)); // The alert is not triggered. let x = null; console.log(x ?? \u0026#34;default\u0026#34;); // \u0026#34;default\u0026#34; (null is treated as missing, so the right side is used) Conditional Operator (Ternary) and Short-Circuiting The conditional operator (? :) also behaves similarly in terms of short-circuiting. Only the second or third values are evaluated depending on the condition:\nconsole.log(true ? 1 : 2); // 1 (the second value is not evaluated) console.log(false ? 1 : 2); // 2 (the first value is not evaluated) If the condition is true, the first value is returned and the second value is ignored. If the condition is false, the second value is returned and the first value is ignored. Summary of Short-Circuiting Behavior: || (OR): Returns the first truthy value, or the second operand if the first is falsy. \u0026amp;\u0026amp; (AND): Returns the first falsy value, or the second operand if the first is truthy. ?? (Nullish Coalescing): Returns the right operand only if the left operand is null or undefined. Short-Circuiting: The right operand is only evaluated when necessary, allowing for efficient evaluations and conditional operations. ","date":"2024-11-07","id":48,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/conditionals/short-circuiting/","summary":"\u003cp\u003eLogical operators like \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e??\u003c/code\u003e, and \u003ccode\u003e||\u003c/code\u003e handle values of different types in a unique way. They \u003cstrong\u003econvert\u003c/strong\u003e the left-hand value to a Boolean to decide how to proceed. These operators might \u003cstrong\u003ereturn\u003c/strong\u003e either the original left-hand value or the right-hand value, based on the evaluation.\u003c/p\u003e","tags":[],"title":"Short Circuiting"},{"content":"while and do...while Loops 1. while Loop The while loop executes the code inside its body as long as the condition evaluates to truthy. The condition is checked before each iteration.\ninitializer / counter variable; while (condition) { // code to run in the loop body final-expression; // increment or other operation }\rA single execution of the loop body is called an iteration.\nlet number = 0; while (number \u0026lt;= 12) { console.log(number); number = number + 2; // Increment by 2 } // Output: 0, 2, 4, 6, 8, 10, 12 let result = 1; let counter = 0; while (counter \u0026lt; 10) { result = 2 * result; // Multiply result by 2 each time counter = counter + 1; // Increment counter } console.log(result); // Output: 1024 (2^10) Shortened while condition: shorter way to write while (i != 0) is while(i) If the condition is just a variable (e.g., i), it can be simplified:\nlet i = 3; while (i) { alert(i); // Alert the current value of i i--; // Decrement i } // Output: Alerts 3, 2, 1, then stops as i becomes 0 let hash = \u0026#34;\u0026#34;; // Start with an empty string while (hash.length \u0026lt; 7) { hash += \u0026#34;#\u0026#34;; // Append one \u0026#34;#\u0026#34; to the string console.log(hash); // Output the current string } // Output: // \u0026#34;#\u0026#34; // \u0026#34;##\u0026#34; // \u0026#34;###\u0026#34; // \u0026#34;####\u0026#34; // \u0026#34;#####\u0026#34; // \u0026#34;######\u0026#34; // \u0026#34;#######\u0026#34; 2. do...while Loop The do...while loop guarantees at least one execution of its body. It first executes the code block, then checks the condition. If the condition is truthy, it continues; otherwise, it stops.\ninitializer / counter variable; do { // code to run in the loop body final-expression; // increment or other operation } while (condition);\rlet i = 0; do { alert(i); // Alert the current value of i i++; // Increment i } while (i \u0026lt; 3); // Output: Alerts 0, 1, 2 Ensuring user input:\nlet yourName; do { yourName = prompt(\u0026#34;Who are you?\u0026#34;); // Prompt the user for their name } while (!yourName); // Continue if the input is falsy (e.g., empty string) console.log(\u0026#34;Hello \u0026#34; + yourName); // Output: \u0026#34;Hello \u0026lt;user\u0026#39;s name\u0026gt;\u0026#34; In this example, the program will force the user to enter a name that isn’t an empty string or null. The ! operator converts the value to a Boolean, and any non-empty string is considered truthy.\nIndenting Code Although indentation is not required in JavaScript, proper indentation makes the code more readable for humans. Even though JavaScript can run code in a single line, using proper indentation is a best practice to maintain clarity.\nWithout indentation:\nif (true != false) {console.log(\u0026#34;That makes sense.\u0026#34;); if (1 \u0026lt; 2) {console.log(\u0026#34;No surprise there.\u0026#34;);}}\rWith proper indentation:\nif (true != false) { console.log(\u0026#34;That makes sense.\u0026#34;); if (1 \u0026lt; 2) { console.log(\u0026#34;No surprise there.\u0026#34;); } }\rThis structure makes the logic clearer and helps other developers (or your future self) easily understand your code.\nSummary while loop: Checks the condition before executing the code block. It runs as long as the condition is truthy. do...while loop: Executes the code block at least once and checks the condition after execution. Indentation: While optional, proper indentation makes code more readable and maintainable. ","date":"2024-11-07","id":49,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/do-while-loop/","summary":"\u003ch2 id=\"while-and-dowhile-loops\"\u003e\u003cstrong\u003e\u003ccode\u003ewhile\u003c/code\u003e and \u003ccode\u003edo...while\u003c/code\u003e Loops\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"1-while-loop\"\u003e\u003cstrong\u003e1. \u003ccode\u003ewhile\u003c/code\u003e Loop\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ewhile\u003c/code\u003e loop executes the code inside its body \u003cstrong\u003eas long as\u003c/strong\u003e the condition evaluates to \u003cstrong\u003etruthy\u003c/strong\u003e. The condition is checked \u003cstrong\u003ebefore\u003c/strong\u003e each iteration.\u003c/p\u003e","tags":[],"title":"do-while Loop"},{"content":"","date":"2024-11-07","id":50,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/","summary":"","tags":[],"title":"Loops"},{"content":"for Loop The for loop is typically used when you know in advance how many times you need to repeat an action. It provides a concise way to initialize, check the condition, and update the loop counter in one line.\nfor (initializer; condition; final-expression) { // code to run on each iteration }\rInitializer: Initializes the loop, typically setting a counter variable. Condition: Expression that is evaluated before each iteration. If it’s false, the loop stops. Final-expression: This is executed after every iteration, usually to update the loop counter (increment or decrement). Example 1: Simple Loop with Counter for (let number = 0; number \u0026lt;= 12; number = number + 2) { console.log(number); } // Output: 0, 2, 4, 6, 8, 10, 12 In this example, number starts at 0 and increments by 2 after each iteration, stopping when it exceeds 12.\nExample 2: Loop with a Counter and Calculation let result = 1; for (let counter = 0; counter \u0026lt; 10; counter++) { result = result * 2; } console.log(result); // Output: 1024 (2^10) Here, we calculate 2^10 by doubling the result each time, using counter as the iteration variable.\nInline Variable Declaration You can declare the loop counter variable directly inside the for loop, making it local to the loop.\nfor (let i = 1; i \u0026lt; 10; i++) { const newResult = `${i} x ${i} = ${i * i}`; console.log(newResult); // Logs the square of each number }\rIn this example, each iteration calculates and prints the square of i.\nExample 3: Looping Over an Array (for...of vs for) Using for...of Loop: const cats = [\u0026#34;Lepord\u0026#34;, \u0026#34;Jaguar\u0026#34;, \u0026#34;Tiger\u0026#34;, \u0026#34;Lion\u0026#34;]; for (const cat of cats) { console.log(cat); } // Output: Lepord, Jaguar, Tiger, Lion The for...of loop is a simpler way to iterate over arrays (or other iterable objects).\nUsing Traditional for Loop: for (let i = 0; i \u0026lt; cats.length; i++) { console.log(cats[i]); } // Output: Lepord, Jaguar, Tiger, Lion This is the traditional for loop, which uses an index to access array elements.\nExample 4: Adding \u0026ldquo;and\u0026rdquo; Before the Last Item in an Array const cats = [\u0026#34;Lepord\u0026#34;, \u0026#34;Jaguar\u0026#34;, \u0026#34;Tiger\u0026#34;, \u0026#34;Lion\u0026#34;]; let myFavouriteCats = \u0026#34;My cats are called \u0026#34;; for (let i = 0; i \u0026lt; cats.length; i++) { if (i === cats.length - 1) { myFavouriteCats += `and ${cats[i]}.`; // Add \u0026#34;and\u0026#34; before last cat } else { myFavouriteCats += `${cats[i]}, `; } } console.log(myFavouriteCats); // Output: \u0026#34;My cats are called Lepord, Jaguar, Tiger, and Lion.\u0026#34; This example demonstrates how to add \u0026ldquo;and\u0026rdquo; before the last item in a list.\nUpdating Counter Variables You can update the loop counter using shorthand operators:\ncounter = counter + 1; // equivalent to counter++; counter -= 1; // equivalent to counter--; result *= 2; // equivalent to result = result * 2; These are more concise ways to update variables in loops.\nSkipping Parts of the for Loop Any part of the for loop (initializer, condition, or final-expression) can be skipped:\nSkipping Initializer:\nlet i = 0; // Initializer outside the loop for (; i \u0026lt; 3; i++) { alert(i); // Output: 0, 1, 2 }\rSkipping Final-Expression:\nlet i = 0; for (; i \u0026lt; 3;) { alert(i); // Output: 0, 1, 2 i++; // Incrementing inside the loop body }\rIn these examples, you can omit parts of the loop declaration, but the loop still functions as expected.\nChessboard Pattern To print a chessboard pattern, you can use a nested loop:\nlet size = 8; // Chessboard size (8x8) let board = \u0026#34;\u0026#34;; // Start with an empty string for (let y = 0; y \u0026lt; size; y++) { for (let x = 0; x \u0026lt; size; x++) { if ((x + y) % 2 === 0) { board += \u0026#34; \u0026#34;; // White square } else { board += \u0026#34;#\u0026#34;; // Black square } } board += \u0026#34;\\n\u0026#34;; // Newline after each row } console.log(board);\rThis code generates an 8x8 chessboard pattern using a combination of two loops. Each square is determined by whether the sum of x and y is even or odd.\nSummary for loop: Ideal when you know the exact number of iterations or need to iterate over a collection. Shorthand updates: Use ++, --, and += for more concise code. Skipping loop parts: You can omit parts of the loop (initializer, condition, final-expression) if needed. Nested loops: Useful for tasks like printing patterns (e.g., chessboard). ","date":"2024-11-07","id":51,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/for-loop/","summary":"\u003ch2 id=\"for-loop\"\u003e\u003cstrong\u003e\u003ccode\u003efor\u003c/code\u003e Loop\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003efor\u003c/code\u003e loop is typically used when you know in advance how many times you need to repeat an action. It provides a concise way to initialize, check the condition, and update the loop counter in one line.\u003c/p\u003e","tags":[],"title":"for Loop"},{"content":"for…of and iterables for looping over arrays and iterable objects. [[6_Iterables|Iterable]]\nfor...of Loop The for...of loop is a convenient and modern syntax for iterating over iterable objects (e.g., arrays, strings, maps, sets). It\u0026rsquo;s a simpler way to loop through elements in a collection, without needing to manually handle indices.\nfor (const element of iterable) { // code to run for each element }\riterable: An object that can be iterated over (arrays, strings, etc.) element: The variable that will hold the value of each item in the iterable on each iteration. Example 1: Looping Through an Array const cats = [\u0026#34;Lepord\u0026#34;, \u0026#34;Jaguar\u0026#34;, \u0026#34;Tiger\u0026#34;]; for (const cat of cats) { console.log(cat); } // Output: // Lepord // Jaguar // Tiger In this example, the for...of loop iterates through the array cats, logging each cat name to the console.\nIterables An iterable is any object that can be used in a for...of loop. While arrays are commonly iterated with for...of, other iterable objects include:\nStrings: Each character can be iterated over. Maps: Iterate through key-value pairs. Sets: Iterate through values. Looping through a string:\nlet word = \u0026#34;Hello\u0026#34;; for (const char of word) { console.log(char); } // H // e // l // l // o Maps: const map = new Map([ [\u0026#39;key1\u0026#39;, \u0026#39;value1\u0026#39;], [\u0026#39;key2\u0026#39;, \u0026#39;value2\u0026#39;] ]); for (const [key, value] of map) { console.log(`${key}: ${value}`); } // key1: value1 // key2: value2 Sets: const set = new Set([1, 2, 3, 4, 5]); for (const number of set) { console.log(number); } // 1 // 2 // 3 // 4 // 5 Create a Function unique(arr) The for...of loop can be helpful for tasks such as removing duplicates from an array. Here\u0026rsquo;s an example of a function that returns an array of unique items from the input array:\nfunction unique(arr) { let result = []; for (let str of arr) { if (!result.includes(str)) { result.push(str); } } return result; } let strings = [\u0026#39;hare\u0026#39;, \u0026#39;krisna\u0026#39;, \u0026#39;hare\u0026#39;, \u0026#39;krishna\u0026#39;, \u0026#39;krishna\u0026#39;, \u0026#39;krishna\u0026#39;, \u0026#39;hare\u0026#39;, \u0026#39;hare\u0026#39;, \u0026#39;:-0\u0026#39;]; alert(unique(strings)); // Output: hare, krisna, krishna, :-0 This function iterates through the arr using for...of and checks if each element is already in the result array using the includes() method. If the element is not present, it\u0026rsquo;s added to the result.\nNote: This approach has repeated comparisons (includes()), which is inefficient for large arrays because includes() has a time complexity of O(n). A more optimized solution might involve using a Set (which guarantees uniqueness and has O(1) lookup time) or leveraging other data structures.\nOptimized Version Using Set Instead of using an array and includes(), you can use a Set, which automatically handles uniqueness for you:\nfunction unique(arr) { return [...new Set(arr)]; } let strings = [\u0026#39;hare\u0026#39;, \u0026#39;krisna\u0026#39;, \u0026#39;hare\u0026#39;, \u0026#39;krishna\u0026#39;, \u0026#39;krishna\u0026#39;, \u0026#39;krishna\u0026#39;, \u0026#39;hare\u0026#39;, \u0026#39;hare\u0026#39;, \u0026#39;:-0\u0026#39;]; alert(unique(strings)); // Output: hare, krisna, krishna, :-0 This version is much more efficient because the Set data structure automatically removes duplicates.\nSummary The for...of loop is a great way to iterate over iterables such as arrays, strings, maps, and sets. It\u0026rsquo;s simpler and cleaner than using traditional for loops when you don\u0026rsquo;t need the index. Iterables allow objects to be used in for...of loops, and they include more than just arrays. For handling unique values, using Set is a more optimized approach compared to manually checking with includes(). ","date":"2024-11-07","id":52,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/for-of-loop/","summary":"\u003cp\u003e\u003ca href=\"https://javascript.info/array#loops\"\u003efor…of\u003c/a\u003e and \u003ca href=\"https://javascript.info/iterable\"\u003eiterables\u003c/a\u003e for looping over arrays and iterable objects.\n[[6_Iterables|Iterable]]\u003c/p\u003e\n\u003ch2 id=\"forof-loop\"\u003e\u003cstrong\u003e\u003ccode\u003efor...of\u003c/code\u003e Loop\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003efor...of\u003c/code\u003e loop is a convenient and modern syntax for iterating over \u003cstrong\u003eiterable objects\u003c/strong\u003e (e.g., arrays, strings, maps, sets). It\u0026rsquo;s a simpler way to loop through elements in a collection, without needing to manually handle indices.\u003c/p\u003e","tags":[],"title":"for-of Loop"},{"content":"The for…in loop is used to iterate over the keys/properties of an object. It allows us to walk through the keys (or property names) in an object.\nThe in Operator The in operator is used to check if a specific property exists in an object. It returns true if the property is present, and false otherwise.\n\u0026#34;property\u0026#34; in object\r\u0026quot;property\u0026quot;: The name of the property as a string (it can also be a variable holding the name). object: The object to check for the property. let user = {name: \u0026#34;John\u0026#34;, age: 30}; alert(\u0026#34;age\u0026#34; in user); // true (the property \u0026#39;age\u0026#39; exists in user) alert(\u0026#34;bla\u0026#34; in user); // false (the property \u0026#39;bla\u0026#39; does not exist in user) Using Variables with in: If we omit quotes it refers to a variable, that variable should contain the actual name to be tested.\nlet user = {age: 30}; let key = \u0026#34;age\u0026#34;; alert(key in user); // true (the property \u0026#39;age\u0026#39; exists in user) Handling undefined: The in operator will return true even if a property exists but its value is undefined.\nlet obj = { test: undefined }; alert(obj.test); // undefined (the property exists with value \u0026#39;undefined\u0026#39;) alert(\u0026#34;test\u0026#34; in obj); // true (the property \u0026#39;test\u0026#39; exists) for..in Loop: The for..in loop is specifically designed for iterating over the keys of an object. It allows us to access each property name (key) one by one.\nfor (key in object) { // Code to execute for each property of the object }\rkey: The variable that will hold the name of the current property. object: The object whose properties are being iterated. To iterate over the properties of an object and output both the property names (keys) and their corresponding values:\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, isAdmin: true, }; for (let key in user) { alert(key); // Outputs the name of the property alert(user[key]); // Outputs the value of the property } // name // John // age // 30 // isAdmin // true Note: The looping variable (key in this case) can be named anything you prefer, such as prop, field, etc. The example for (let prop in user) is also widely used.\nOrder of Properties in Objects The order in which properties are looped over in an object depends on whether the property names are integers or non-integers.\nInteger property names are ordered by their numeric value, regardless of whether they are stored as strings. Non-integer property names (i.e., strings that are not numbers) are listed in the order they were created. Example of Integer vs Non-integer Order:\nlet codes = { \u0026#34;+49\u0026#34;: \u0026#34;Germany\u0026#34;, \u0026#34;+41\u0026#34;: \u0026#34;Switzerland\u0026#34;, \u0026#34;+44\u0026#34;: \u0026#34;Britain\u0026#34;, \u0026#34;+1\u0026#34;: \u0026#34;USA\u0026#34; }; for (let code in codes) { alert(+code); // Outputs the numeric value of the country code } // Output: // 49 // 41 // 44 // 1 When you iterate over properties with integer names (like \u0026quot;1\u0026quot;, \u0026quot;44\u0026quot;, \u0026quot;49\u0026quot;), JavaScript converts them to numbers and orders them numerically. In this case, if we want to preserve the order of non-integer property names, we can prefix the integer strings with a + (e.g., \u0026quot;+49\u0026quot; becomes \u0026quot;49\u0026quot;). Use Case of for..in The for..in loop is typically used when you need to iterate over object properties and doesn\u0026rsquo;t work with arrays in most cases (as array indices are considered numeric and for..in might return unexpected results).\nFor arrays, the for...of loop is preferred since it directly iterates over the values rather than the keys.\nSummary in operator: Used to check if a property exists in an object, even if its value is undefined. for..in loop: Loops through the keys of an object. It\u0026rsquo;s useful for working with object properties but not typically used for arrays. Order of object properties: Properties with numeric-like names are sorted numerically, while other properties are listed in the creation order. Integer properties: JavaScript automatically converts string numbers into integers and sorts them accordingly. ","date":"2024-11-07","id":53,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/for-in-loop/","summary":"\u003cp\u003eThe \u003ca href=\"https://javascript.info/object#forin\"\u003efor…in\u003c/a\u003e loop is used to iterate over the \u003cstrong\u003ekeys/properties\u003c/strong\u003e of an object. It allows us to walk through the keys (or property names) in an object.\u003c/p\u003e","tags":[],"title":"for-in Loop"},{"content":"break Statement The break statement is used to immediately exit from a loop, switch statement, or even a try...catch block. When encountered, the loop or block is terminated, and execution continues with the code after the loop.\nbreak in Loops:\nfor (let current = 20; current \u0026lt;= 30; current++) { if (current % 7 == 0) { console.log(current); // Outputs 21 break; // Exit the loop } }\rThe loop starts from current = 20 and increments by 1. It checks if the number is divisible by 7. When 21 is found (the first number greater than 20 and divisible by 7), it prints 21 and exits the loop with break. let sum = 0; while(true) { let value = +prompt(\u0026#34;Enter a number\u0026#34;, \u0026#39;\u0026#39;); if (!value) break; // break if empty line sum += value; } alert( \u0026#39;sum: \u0026#39; + sum );\rcontinue Statement The continue statement is used to skip the current iteration of a loop and proceed with the next iteration. The rest of the code inside the loop body is skipped for that iteration.\ncontinue in Loops:\nfor (let i = 0; i \u0026lt; 10; i++) { if (i % 2 === 0) continue; // Skip even numbers alert(i); // Outputs: 1, 3, 5, 7, 9 }\rThe loop runs from 0 to 9. The continue statement skips the even numbers (when i % 2 === 0), so the alert(i) is only executed for odd numbers. Note: continue cannot be used in ternary (? :) operators. It is only applicable within loops.\nLabels for break and continue When we need to break or continue multiple loops at once, labels come in handy.\nA label is an identifier followed by a colon (:) before a loop.\nA label is a way to name a specific loop in order to control the flow of execution in nested loops.\nlabelName: for (...){ ... } labelName: for (...){ ... }\rUsing break with Labels: To break out of a nested loop and jump directly to the code after the outer loop, you can use a label with break.\nThe break labelName breaks out of the named loop. break directive must be inside the code block.\nlabel: { // ... break label; // ... }\router: // Label for the outer loop for (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { let input = prompt(`Value at coords (${i},${j})`, \u0026#39;\u0026#39;); if (!input) break outer; // Exit both loops if input is empty or canceled } } alert(\u0026#39;Done!\u0026#39;);\rIn this example, if the user enters an empty string or cancels the prompt, the break outer will stop both the inner and outer loops, and the message 'Done!' will be displayed. Using continue with Labels: Similarly, you can use continue with labels to skip to the next iteration of a labeled loop.\nouter: // Label for the outer loop for (let i = 0; i \u0026lt; 3; i++) { for (let j = 0; j \u0026lt; 3; j++) { if (i === 1 \u0026amp;\u0026amp; j === 1) continue outer; // Skip the rest of the outer loop for i = 1, j = 1 console.log(`i=${i}, j=${j}`); } }\rThis example uses continue outer to skip the remaining part of the outer loop when i === 1 \u0026amp;\u0026amp; j === 1, causing the program to jump directly to the next iteration of the outer loop. Using break and continue Inside Code Blocks: You can also use break and continue inside blocks of code by labeling the block itself. This is useful when you need to break out of specific code sections rather than the entire loop.\nlabel: { // Some code before console.log(\u0026#39;Before break\u0026#39;); break label; // Exit the block console.log(\u0026#39;After break\u0026#39;); // This won\u0026#39;t run }\rHere, the break label exits the block of code before the console.log('After break') line is executed. Summary: break: Exits a loop (or switch statement, etc.) immediately, regardless of the loop\u0026rsquo;s condition. continue: Skips the current iteration of a loop and moves to the next iteration. Labels: Used to control the flow of execution in nested loops. Labels can be applied to both break and continue to exit or continue multiple loops at once. break label: Breaks out of the labeled loop. continue label: Skips to the next iteration of the labeled loop. ","date":"2024-11-07","id":54,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/break-continue-label/","summary":"\u003ch2 id=\"break-statement\"\u003e\u003cstrong\u003e\u003ccode\u003ebreak\u003c/code\u003e Statement\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ebreak\u003c/code\u003e statement is used to \u003cstrong\u003eimmediately exit\u003c/strong\u003e from a loop, switch statement, or even a \u003ccode\u003etry...catch\u003c/code\u003e block. When encountered, the loop or block is terminated, and execution continues with the code after the loop.\u003c/p\u003e","tags":[],"title":"break-continue-label"},{"content":"Iterable Objects that can be used in for..of are called iterable. To be considered iterable, an object must implement the method Symbol.iterator, which returns an iterator.\nExample: Arrays, Strings, Maps, Sets, and even custom objects that implement Symbol.iterator. Symbol.iterator Method The Symbol.iterator method is a built-in symbol in JavaScript that returns an iterator object. This iterator object must have a method called next(), which provides the logic for iteration.\nThe next() method returns an object with two properties: done: A boolean that indicates whether the iteration has completed. value: The current value of the iteration. If done is true, the iterator has finished iterating, otherwise, done will be false, and value will hold the next item in the iteration.\nlet range = { from: 1, to: 5, [Symbol.iterator]() { this.current = this.from; // Start from \u0026#34;from\u0026#34; return this; }, next() { if (this.current \u0026lt;= this.to) { return { done: false, value: this.current++ }; // Return value and increment } else { return { done: true }; // End of iteration } } }; for (let num of range) { console.log(num); // Outputs: 1, 2, 3, 4, 5 }\rIn this example, range is an object that implements Symbol.iterator. The next() method returns each number from 1 to 5. Once the value exceeds to, done: true is returned to signal the end of the iteration. String is Iterable Strings are iterable in JavaScript, meaning they can be used directly in a for..of loop. The loop iterates over each character of the string.\nfor (let char of \u0026#34;test\u0026#34;) { console.log(char); // Outputs: t, e, s, t }\rA string is considered array-like, as it has an index and a length property, but it is also iterable. Each character in the string is treated as an element that can be iterated over in a for..of loop. Surrogate Pairs in Strings JavaScript strings are Unicode-compliant, meaning they support surrogate pairs (characters that require more than one code unit to represent in UTF-16). The for..of loop correctly handles these surrogate pairs, unlike traditional array-like indexing.\nlet emoji = \u0026#34;😊\u0026#34;; for (let char of emoji) { console.log(char); // Outputs: 😊 }\rIn this case, the for..of loop properly handles the emoji as a single character, even though it might require multiple code units internally.\nArray-like Objects An array-like object is an object that has indexed properties (such as 0, 1, etc.) and a length property, but it lacks the built-in methods of arrays (like .push(), .pop(), etc.). These objects are not true arrays but are structured similarly.\nlet arrayLike = { 0: \u0026#34;Hello\u0026#34;, 1: \u0026#34;World\u0026#34;, length: 2 }; console.log(arrayLike[0]); // Outputs: Hello console.log(arrayLike[1]); // Outputs: World Although arrayLike looks like an array (because it has a length and indexed properties), it’s not a real array, so you can\u0026rsquo;t call array methods like .pop() or .push() on it directly.\nArray.from Method Array.from is a universal method that allows you to convert an iterable or array-like object into a proper JavaScript Array. After conversion, the resulting array can use all the array methods like .map(), .filter(), .reduce(), etc.\nConverting an Array-like Object to an Array\nlet arrayLike = { 0: \u0026#34;Hello\u0026#34;, 1: \u0026#34;World\u0026#34;, length: 2 }; let arr = Array.from(arrayLike); console.log(arr); // Outputs: [\u0026#39;Hello\u0026#39;, \u0026#39;World\u0026#39;] console.log(arr.pop()); // Outputs: World Converting a String to an Array You can also use Array.from to convert a string into an array of its characters:\nlet str = \u0026#34;hello\u0026#34;; let arr = Array.from(str); console.log(arr); // Outputs: [\u0026#39;h\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;o\u0026#39;] Using mapFn with Array.from Array.from accepts a second argument called mapFn, which is a mapping function applied to each element before adding it to the resulting array.\nlet numbers = [1, 2, 3]; let squaredNumbers = Array.from(numbers, num =\u0026gt; num * num); console.log(squaredNumbers); // Outputs: [1, 4, 9] In this example, Array.from creates an array from the numbers array and applies the mapFn to square each number before storing it in the new array. Syntax of Array.from: Array.from(obj[, mapFn, thisArg])\robj: The iterable or array-like object. mapFn (Optional): A function to apply to each element in the array. thisArg (Optional): A value to use as this inside the mapFn function. Summary Iterables are objects that can be iterated over using a for..of loop. They must implement the Symbol.iterator method. Strings are iterable objects, meaning you can loop over them character by character using for..of. Array-like objects are objects that have indexed properties and a length property but are not true arrays. Array.from is a powerful method that converts iterable or array-like objects into actual arrays, enabling array methods like .map(), .filter(), and more. ","date":"2024-11-07","id":55,"permalink":"/personal-site/docs/java-script/js-language/2-control-flow/loops/iterables/","summary":"\u003ch2 id=\"iterablehttpsjavascriptinfoiterable\"\u003e\u003ca href=\"https://javascript.info/iterable\"\u003e\u003cstrong\u003eIterable\u003c/strong\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eObjects that can be used in \u003ccode\u003efor..of\u003c/code\u003e are called \u003cem\u003eiterable\u003c/em\u003e.\nTo be considered iterable, an object must implement the method \u003ccode\u003eSymbol.iterator\u003c/code\u003e, which returns an \u003cstrong\u003eiterator\u003c/strong\u003e.\u003c/p\u003e","tags":[],"title":"Iterables"},{"content":"Expressions vs Statements Expression: A fragment of code that produces a value. Expressions can contain other expressions, allowing for nesting.\n1; // Expression !false; // Expression Statement: A complete instruction that stands on its own, corresponding to a full sentance. The simplest statement is an expression followed by a semicolon.\n1; // Statement !false; // Statement Side Effects: When an expression or statement produces a value but does not affect the program\u0026rsquo;s state or produce a lasting impact (i.e., the value is discarded).\n1; // No side effect, value is produced and discarded Functions in JavaScript Environment: The collection of bindings (variables) and their values that exist at any given time during the execution of a program. The environment is not empty when a program starts, as it includes built-in values and functions.\nFunctions: A function is essentially a program wrapped in a value. When you assign a function to a variable or pass it as an argument, you are using the function as a value.\nA function can be invoked, called, or applied to run the program inside it.\nprompt(\u0026#39;Enter detail\u0026#39;); // Invokes the prompt function console.log(\u0026#34;hello\u0026#34;); // Invokes the console.log function Arguments: The values provided inside the parentheses () when invoking a function. These are given to the program inside the function to be used.\nReturn Values: Functions can return values, which are values the function produces when it completes. These returned values can be used in further expressions.\nconsole.log(Math.max(2, 4)); // 4 console.log(Math.min(2, 4) + 100); // 102 Side Effects of Functions: Functions like alert(), prompt(), or console.log() often have side effects because they perform actions such as displaying a dialog box or printing to the console.\nNaming Functions Function Names: Functions typically represent actions, so their names should usually be verbs. The name should briefly describe what the function does. It\u0026rsquo;s often helpful to start with a prefix that conveys the function\u0026rsquo;s purpose:\nshow... (e.g., showMessage()) get... (e.g., getUserInput()) calc... (e.g., calcTotal()) create... (e.g., createElement()) check... (e.g., checkEligibility()) Clarity: A function\u0026rsquo;s name should clearly indicate what the function does. If a function performs multiple actions, it might be a good idea to break it into smaller functions. If two functions need to be called together, create a third function that calls both.\nBest Practices Keep functions focused: A function should do exactly what its name implies. If it does more than one thing, consider splitting it into smaller functions.\nAvoid repetition: Functions allow you to structure larger programs by reusing code, so you should use functions to reduce code repetition and isolate different parts of your program.\nOrganize functions logically: Group related functions together to make the code more readable and maintainable.\nUse descriptive names: A function\u0026rsquo;s name should give a clear idea of its purpose. Use meaningful and consistent naming conventions throughout your codebase.\n","date":"2024-11-09","id":56,"permalink":"/personal-site/docs/java-script/js-language/3-functions/function/","summary":"\u003ch3 id=\"expressions-vs-statements\"\u003e\u003cstrong\u003eExpressions vs Statements\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExpression\u003c/strong\u003e: A fragment of code that produces a value. Expressions can contain other expressions, allowing for nesting.\u003c/p\u003e","tags":[],"title":"Function"},{"content":"","date":"2024-11-07","id":57,"permalink":"/personal-site/docs/java-script/js-language/3-functions/","summary":"","tags":[],"title":"Functions"},{"content":"There are three ways to define a function in JavaScript:\nFunction Expressions, Function Declarations, and Arrow Functions.\n1. Function Expression A Function Expression is when a function is defined as part of an expression.\nThe function itself is assigned to a variable, which can then be called later.\nSince the function is part of an expression, it cannot be used before it is defined. This allows for creating a function in the middle of any expression.\nAs the function creation happens in the context of the assignment expression (to the right side of =), this is a Function Expression.\nThe function is created when the execution reaches it, meaning you cannot call it before it is declared. Function Expressions are anonymous or named functions assigned to variables. const square = function(x) { return x * x; }; console.log(square(12)); // 144 Function for square is defined as an expression and assigned to the variable square. It can be called later after the definition.\nA function starts with the function keyword, followed by a set of parameters inside parentheses (), and then a body inside curly braces {}. Functions can have no parameters or multiple parameters. The return keyword is used to return a value from the function. If no return statement is provided, the function returns undefined by default. Example with no parameters:\nconst makeNoise = function() { console.log(\u0026#34;Ping!\u0026#34;); }; makeNoise(); // Ping! Example with multiple parameters:\nconst roundTo = function(n, step) { let remainder = n % step; return n - remainder + (remainder \u0026lt; step / 2 ? 0 : step); }; console.log(roundTo(23, 10)); // 20 If the remainder is less than half of step, it rounds down; otherwise, it rounds up.\nPython Equivalent: def makeNoise(): print(\u0026#34;Ping!\u0026#34;) makeNoise() def roundTo(n, step): remainder = n % step if remainder \u0026gt;= step / 2: return (n - remainder) + step return (n - remainder) print(roundTo(23, 10)) # 20\rImportant Note:\nA Function Expression typically ends with a semicolon (;) since it\u0026rsquo;s part of an assignment statement. But function declaration do not. A Function Expression is created here as function(…) {…} inside the = assignment statement: let sayHi = …;. The semicolon ; is recommended at the end of the statement, it’s not a part of the function syntax.\nlet sayHi = function() { // function body }; // semicolon required 2. Function Declaration A Function Declaration is the classic way to define a function in JavaScript. It starts with the function keyword, followed by the function name, parameters, and the function body enclosed in curly braces.\nfunction functionName(parameter1, parameter2, ...parameterN) { // body }\rfunction square(x) { return x * x; } console.log(square(12)); // 144 //function expression let square = function(x) { return x * x; };\rA Function Declaration does not require a semicolon after it, because it\u0026rsquo;s a complete statement by itself. The function name must be valid (cannot start with a number, etc.). The function is created when the script is loaded and is hoisted to the top of its scope. This means it can be called before its actual declaration in the code. Hoisting Behavior: Function Declarations are hoisted to the top of their scope, so they can be called before they are defined in the code. Function Expressions, on the other hand, are not hoisted and can only be called after they are defined.\nconsole.log(\u0026#34;The future says: \u0026#34;, future()); function future() { return \u0026#34;You will never have flying cars\u0026#34;; }\rIn this example, the function future() can be called before it\u0026rsquo;s defined because the function declaration is hoisted to the top.\nFunction Declarations are useful when you want your functions to be accessible throughout the entire scope. Function Expressions are useful when you need to define functions dynamically (such as inside loops, conditionals, or callbacks). Function Declarations and Scope A Function Declaration is visible throughout the entire scope it’s defined in (whether in a block, function, or global scope). If a function is declared within a block (e.g., inside if or for statements), it\u0026rsquo;s only visible inside that block, not outside of it. So calling it from outside is not possible. So better to declare a function using function expression outside a code block first, and reassign it inside the code block. This makes the function visible from outside also.\nFunction Declaration Inside Code Blocks:\nlet age = 18; let welcome; // Declare the variable to hold the function if (age \u0026lt; 18) { welcome = function() { alert(\u0026#34;Hello\u0026#34;); }; } else { welcome = function() { alert(\u0026#34;Greetings\u0026#34;); }; } welcome(); // Outputs either \u0026#34;Hello\u0026#34; or \u0026#34;Greetings\u0026#34; based on the age Alternative with Ternary Operator: let age = prompt(\u0026#34;What is your age?\u0026#34;, 18); let welcome = (age \u0026lt; 18) ? function() { alert(\u0026#34;Hello\u0026#34;); } : function() { alert(\u0026#34;Greetings\u0026#34;); }; welcome(); // Outputs based on age Key Differences Between Function Expressions and Function Declarations Feature Function Declaration Function Expression Hoisting Hoisted to the top, can be called before declaration. Not hoisted, can only be called after definition. Syntax function name() {} let name = function() {} Semicolon No semicolon required after function body. Semicolon is required after function expression. Use Case Ideal for globally accessible functions. Ideal for dynamically defined functions or passing functions as arguments. Summary Function Expressions are functions assigned to variables and are only usable after their definition. Function Declarations are hoisted, meaning they can be used before the declaration in the code. Choose Function Declarations for global accessibility and Function Expressions for dynamic or localized functions. ","date":"2024-11-09","id":58,"permalink":"/personal-site/docs/java-script/js-language/3-functions/defining-function/","summary":"\u003cp\u003eThere are \u003cstrong\u003ethree ways\u003c/strong\u003e to define a function in JavaScript:\u003cbr\u003e\n\u003cstrong\u003eFunction Expressions\u003c/strong\u003e, \u003cstrong\u003eFunction Declarations\u003c/strong\u003e, and \u003cstrong\u003eArrow Functions\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"1-function-expression\"\u003e\u003cstrong\u003e1. Function Expression\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eA \u003cstrong\u003eFunction Expression\u003c/strong\u003e is when a function is defined as part of an expression.\u003cbr\u003e\nThe function itself is assigned to a variable, which can then be called later.\u003cbr\u003e\nSince the function is part of an expression, it cannot be used before it is defined.\nThis allows for creating a function in the middle of any expression.\u003c/p\u003e","tags":[],"title":"Defining Function"},{"content":"Arrow functions are a concise syntax for defining functions using the =\u0026gt; syntax, rather than the traditional function keyword. They offer several advantages, such as more concise syntax and different behavior for this.\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression;\rThis defines a function func that takes parameters arg1, arg2, ..., argN, and evaluates the given expression.\nRegular Function Expression:\nlet func = function(arg1, arg2, ..., argN) { return expression; };\rArrow Function:\nlet func = (arg1, arg2, ..., argN) =\u0026gt; expression;\rExamples of Arrow Functions Basic Arrow Functions Simple return (no block): let sum = (a, b) =\u0026gt; a + b; // Single expression, returns result automatically let double = n =\u0026gt; n * 2; // Single parameter, no need for parentheses around the parameter const square = x =\u0026gt; x * x; // Short form for single expression function let sayHi = () =\u0026gt; alert(\u0026#34;Hello\u0026#34;); // No parameters When there is only one parameter, () can be omitted. If body is single expression, rather than a block in braces, that expression will be returned from the function even without return statement.\nlet age = prompt(\u0026#34;What is your age?\u0026#34;, 18); let welcome = (age \u0026lt; 18) ? () =\u0026gt; alert(\u0026#39;Hello\u0026#39;) : () =\u0026gt; alert(\u0026#39;Greetings\u0026#39;); Welcome(); // 18 is default, // if less than 18, hello // otherwise greetings Arrow Function with a Block (Multi-line) If you need multiple statements in the function body, you must use curly braces {} and explicitly include the return statement.\nconst roundTo = (n, step) =\u0026gt; { let remainder = n % step; return n - remainder; }; let sum = (a, b) =\u0026gt; { let result = a + b; return result; }; alert(sum(1, 2)); // 3 Arrow Function with No Parameters When there are no parameters, use empty parentheses ():\nconst horn = () =\u0026gt; { console.log(\u0026#34;Toot\u0026#34;); };\rArrow Function as Arguments Arrow functions can be used in the same way as regular functions, including as arguments to other functions.\nfunction ask(question, yes, no) { if (confirm(question)) yes(); else no(); } ask( \u0026#34;Do you agree?\u0026#34;, () =\u0026gt; alert(\u0026#34;You agreed.\u0026#34;), () =\u0026gt; alert(\u0026#34;You canceled the execution.\u0026#34;) );\rask( \u0026#34;Do you agree?\u0026#34;, function() { alert(\u0026#34;You agreed.\u0026#34;);}, function() { alert(\u0026#34;You canceled the execution.\u0026#34;); } );\rArrow Functions and this Arrow functions behave differently from regular functions when it comes to the this keyword. They do not have their own this. Instead, they inherit this from the lexical scope (i.e., the surrounding context).\nArrow Functions Inheriting this\nlet user = { firstName: \u0026#34;John\u0026#34;, sayHi() { let arrow = () =\u0026gt; alert(this.firstName); // `this` refers to the `user` object arrow(); } }; user.sayHi(); // Output: \u0026#34;John\u0026#34; In this example, the arrow() function inherits this from the sayHi() method, which refers to the user object.\nArrow Functions in forEach and Similar Methods Arrow functions are useful in methods like forEach because they preserve the this context from the surrounding code:\nlet group = { title: \u0026#34;Our Group\u0026#34;, students: [\u0026#34;John\u0026#34;, \u0026#34;Pete\u0026#34;, \u0026#34;Alice\u0026#34;], showList() { this.students.forEach( student =\u0026gt; alert(this.title + \u0026#39;: \u0026#39; + student) // `this` refers to `group` ); } }; group.showList(); // Output: \u0026#34;Our Group: John\u0026#34;, \u0026#34;Our Group: Pete\u0026#34;, \u0026#34;Our Group: Alice\u0026#34; In this case, the arrow function inside forEach inherits this from the showList() method, which refers to the group object.\nRegular Function in forEach If we use a regular function inside forEach, the value of this changes to undefined in strict mode, or the global object (window in browsers) in non-strict mode:\nlet group = { title: \u0026#34;Our Group\u0026#34;, students: [\u0026#34;John\u0026#34;, \u0026#34;Pete\u0026#34;, \u0026#34;Alice\u0026#34;], showList() { this.students.forEach(function(student) { alert(this.title + \u0026#39;: \u0026#39; + student); // Error: `this` is undefined or refers to the global object }); } }; group.showList(); // Error: Cannot read property \u0026#39;title\u0026#39; of undefined Error because when forEach runs function with this=undefined by default. This doesn\u0026rsquo;t affect arrow functions because they don\u0026rsquo;t have this.\nHere, the function passed to forEach does not have its own this and refers to the global context instead of the group object, leading to an error.\nRegular functions create their own this context, which means inside the forEach method, this is no longer the group object. Arrow functions do not create their own this; instead, they inherit it from the surrounding scope, making them ideal for cases like the forEach method where you want to preserve the context. Arrow Functions Cannot Be Used as Constructors Since arrow functions do not have their own this, they cannot be used as constructors. You cannot call an arrow function with new.\nconst Person = (name) =\u0026gt; { this.name = name; }; let john = new Person(\u0026#34;John\u0026#34;); // Error: Person is not a constructor In this example, Person is an arrow function, and calling it with new will throw an error because arrow functions don\u0026rsquo;t have their own this, which is required for object creation via new.\nSummary of Arrow Functions Syntax: Arrow functions use the =\u0026gt; syntax, making them more concise than regular function expressions. No this binding: Arrow functions do not have their own this. Instead, they inherit it from the surrounding scope, making them useful for methods like forEach. Single-expression functions: If the body is a single expression, the return keyword is implicit, and you can omit the curly braces. Cannot be used as constructors: Arrow functions cannot be invoked with new because they do not have their own this. Arrow Function Quick Reference Feature Arrow Function Regular Function Syntax () =\u0026gt; expression function() { return expression; } this Binding Inherited from the outer scope (lexical this) this is dynamic, based on the call site Constructor Cannot be used as a constructor (new is not allowed) Can be used as a constructor Implicit return Yes, for single expressions No, needs an explicit return statement Parameter Parentheses Omit parentheses for a single parameter Always require parentheses ","date":"2024-11-09","id":59,"permalink":"/personal-site/docs/java-script/js-language/3-functions/arrow-function/","summary":"\u003cp\u003eArrow functions are a concise syntax for defining functions using the \u003ccode\u003e=\u0026gt;\u003c/code\u003e syntax, rather than the traditional \u003ccode\u003efunction\u003c/code\u003e keyword. They offer several advantages, such as more concise syntax and different behavior for \u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Arrow Function"},{"content":"Bindings and Scopes In JavaScript, the scope refers to the context in which variables (bindings) are accessible.\nLocal Variables A local variable is declared inside a function or block (e.g., {}) and is only accessible within that function or block. Each time the function is called, a new instance of the local variables is created.\nfunction showMessage() { let message = \u0026#34;Hello, JS\u0026#34;; alert(message); } showMessage(); // Hello, JS alert(message); // Error: message is not defined outside the function message is local to the showMessage() function, so it cannot be accessed outside of it.\nVariables declared inside control structures like if, for, or while using let or const are also block-scoped, meaning they are only visible within that block.\nif (true) { let blockScoped = \u0026#34;This is block-scoped\u0026#34;; console.log(blockScoped); // This will work inside the block } console.log(blockScoped); // Error: blockScoped is not defined outside the block Variables declared using var, however, have a function scope, meaning they are visible within the function and outside of it if not enclosed in any other block.\nOuter Variables (Closure) A function in JavaScript can access variables from its outer scope (the scope in which it was defined). This allows functions to modify and use variables from the outer environment. This concept is often called closure.\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let message = \u0026#34;Hello, \u0026#34; + userName; // Accesses outer variable `userName` alert(message); } showMessage(); // Hello, John You can also modify outer variables inside a function:\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { userName = \u0026#34;Bob\u0026#34;; // Outer variable `userName` is overwritten let message = \u0026#34;Hello, \u0026#34; + userName; alert(message); // Hello, Bob } alert(userName); // John (before the function call) showMessage(); alert(userName); // Bob (after the function call) If the function defines a variable with the same name as an outer variable, the inner variable shadows the outer one, meaning the function will use the local variable instead of the outer one.\nlet userName = \u0026#39;John\u0026#39;; function showMessage() { let userName = \u0026#34;Bob\u0026#34;; // Local variable shadows the outer variable let message = \u0026#34;Hello, \u0026#34; + userName; alert(message); // Hello, Bob } alert(userName); // John showMessage(); // Hello, Bob alert(userName); // John Nested Scope In JavaScript, functions and blocks can be nested within other functions and blocks, creating nested scopes. Each function or block can access variables from its outer scope, but outer scopes cannot access variables from inner scopes.\nconst hummus = function(factor) { const ingredient = function(amount, unit, name) { let ingredientAmount = amount * factor; if (ingredientAmount \u0026gt; 1) { unit += \u0026#34;s\u0026#34;; // Pluralize the unit if the amount is greater than 1 } console.log(`${ingredientAmount} ${unit} of ${name}`); }; ingredient(1, \u0026#34;can\u0026#34;, \u0026#34;Chickpeas\u0026#34;); ingredient(0.25, \u0026#34;cup\u0026#34;, \u0026#34;Tahini\u0026#34;); ingredient(0.25, \u0026#34;cup\u0026#34;, \u0026#34;Lemon Juice\u0026#34;); }; hummus(1); // Calls hummus and prints ingredient details The inner function ingredient can access the factor argument of the outer hummus function, because the inner function is within the scope of the outer function. The outer function cannot access the local bindings of the inner function, such as ingredientAmount. This form of scoping is called lexical scoping, meaning that the scope of variables is determined by the position of functions and blocks in the code.\nMaking a Counter (Closure Example) A common example of using closures is creating a counter function, which keeps track of the count even after the function has returned. This works because the inner function maintains a reference to the variables in the outer function\u0026rsquo;s scope.\nfunction makeCounter() { let count = 0; return function() { return count++; // Accesses and modifies the `count` variable }; } let counter = makeCounter(); alert(counter()); // 0 alert(counter()); // 1 alert(counter()); // 2 Here, the inner function \u0026ldquo;remembers\u0026rdquo; the count variable even after the makeCounter() function has finished executing. This is an example of a closure, where the inner function has access to the variables of its outer function. random number generator\nGlobal Variables and the Global Object A global variable is a variable that is declared outside any function or block. Its scope is the entire program, meaning it is accessible from any function or block within that program (unless shadowed by a local variable with the same name).\nlet globalVar = \u0026#39;I am a global variable\u0026#39;; function checkGlobal() { alert(globalVar); // Accessible inside any function } checkGlobal(); // I am a global variable Global variables are often stored in a global object:\nIn a browser, the global object is window. In Node.js, the global object is global. For better compatibility across different environments (e.g., browsers, Node.js), the globalThis keyword is used, which provides a standard way to access the global object in any JavaScript environment. // Example in a browser environment window.globalVar = \u0026#34;I am a global variable\u0026#34;; // This variable is a property of the `window` object console.log(globalThis.globalVar); // I am a global variable (works in both Node.js and browsers) Best Practices:\nMinimize the use of global variables. Having many global variables can lead to potential conflicts and bugs, especially in large applications. Local variables should be preferred wherever possible to avoid polluting the global scope. Summary of Scoping Rules Local Scope: Variables declared inside a function or block are local and only accessible within that function or block. Outer Scope: Functions can access variables from their outer scope. This is known as lexical scoping. Shadowing: If a local variable has the same name as an outer variable, the local variable shadows the outer variable within that function or block. Global Scope: Variables declared outside of any function or block are global and accessible from anywhere in the program. In a browser, they are properties of the window object. Closure: A function that remembers the environment in which it was created, including variables from its outer scope. ","date":"2024-11-09","id":60,"permalink":"/personal-site/docs/java-script/js-language/3-functions/scope-of-variable/","summary":"\u003ch2 id=\"bindings-and-scopes\"\u003e\u003cstrong\u003eBindings and Scopes\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, the \u003cstrong\u003escope\u003c/strong\u003e refers to the context in which variables (bindings) are accessible.\u003c/p\u003e\n\u003ch3 id=\"local-variables\"\u003e\u003cstrong\u003eLocal Variables\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eA \u003cstrong\u003elocal variable\u003c/strong\u003e is declared inside a function or block (e.g., \u003ccode\u003e{}\u003c/code\u003e) and is only accessible within that function or block. Each time the function is called, a new instance of the local variables is created.\u003c/p\u003e","tags":[],"title":"Scope of Variable"},{"content":" Parameter: A variable listed inside the () in a function declaration. This is a term at declaration time. Argument: The actual value passed to the function when it is called. This is a term at call time. function showMessage(from, text) { from = \u0026#39;*\u0026#39; + from + \u0026#39;*\u0026#39;; // Modify local `from` alert(from + \u0026#34;: \u0026#34; + text); } let from = \u0026#39;Ann\u0026#39;; showMessage(from, \u0026#34;Hello\u0026#34;); // *Ann*: Hello alert(from); // Ann (the outer `from` remains unchanged) from and text are parameters of the function showMessage. The value of from is modified locally inside the function, but the outer variable from remains unchanged after the function call. Default Value for Parameters If a function is called without an argument for a parameter, the parameter\u0026rsquo;s value becomes undefined.\nHowever, you can specify a default value for a parameter, which is used when no argument is provided.\nfunction minus(a, b) { if (b === undefined) return -a; // If no second argument, return -a else return a - b; // Otherwise, return a - b } console.log(minus(10)); // -10 (b is undefined) console.log(minus(10, 5)); // 5 (both arguments provided) b defaults to undefined when not passed. The function checks if b is undefined to decide its behavior. Default Parameter Values You can assign default values directly in the function declaration using =. If the argument is not provided (or is undefined), the default value will be used.\nfunction roundTo(n, step = 1) { let remainder = n % step; return n - remainder + (remainder \u0026lt; step / 2 ? 0 : step); } console.log(roundTo(4.5)); // 5 (step defaults to 1) console.log(roundTo(4.5, 2)); // 4 (step explicitly set to 2) step defaults to 1 if not provided. Default Value with Undefined Argument If undefined is explicitly passed for a parameter, the default value will still be applied:\nfunction showMessage(from, text = \u0026#34;No text given\u0026#34;) { alert(from + \u0026#34;: \u0026#34; + text); } showMessage(\u0026#34;Ann\u0026#34;); // Ann: No text given showMessage(\u0026#34;Ann\u0026#34;, undefined); // Ann: No text given (explicitly passing `undefined`) Even though undefined is passed explicitly, the default value \u0026quot;No text given\u0026quot; will still be used for text.\nPassing a Function as a Default Value You can also pass a function as a default value for a parameter. The function will execute if no value is provided.\nfunction showMessage(from, text = anotherFunction()) { // `anotherFunction()` is called if no value is passed for `text` alert(from + \u0026#34;: \u0026#34; + text); } function anotherFunction() { return \u0026#34;Generated text\u0026#34;; // Return a value if no argument is passed } showMessage(\u0026#34;Ann\u0026#34;); // Ann: Generated text anotherFunction() is executed only when text is not passed to showMessage. Extra Arguments JavaScript functions can accept more arguments than the number of parameters specified. These extra arguments are ignored, and only the specified parameters are used.\nfunction square(x) { return x * x; } console.log(square(4, true, \u0026#34;hog\u0026#34;)); // 16 (extra arguments are ignored) In this case, only the first argument 4 is used, and the extra arguments are ignored.\nAlternative Ways to Set Default Parameters Sometimes, you might want to set default values for parameters after the function declaration. You can achieve this using various techniques:\nUsing if to Set Default Values function showMessage(text) { if (text === undefined) { text = \u0026#34;Empty message\u0026#34;; // Set default manually } alert(text); } showMessage(); // Empty message Using || Operator You can also use the logical OR (||) operator to assign default values if the parameter is falsy (e.g., undefined, null, 0, false, or \u0026quot;\u0026quot;).\nfunction showMessage(text) { text = text || \u0026#34;Empty message\u0026#34;; // If `text` is falsy, assign default alert(text); } showMessage(); // Empty message showMessage(\u0026#34;\u0026#34;); // Empty message (\u0026#34;\u0026#34; is falsy) Using Nullish Coalescing Operator (??) The nullish coalescing operator (??) is a more precise way to set defaults, as it only triggers the default if the value is null or undefined, not for other falsy values like 0 or false.\nfunction showCount(count) { alert(count ?? \u0026#34;Unknown\u0026#34;); // Only replaces `null` or `undefined` with \u0026#34;Unknown\u0026#34; } showCount(0); // 0 (0 is not null or undefined, so it\u0026#39;s not replaced) showCount(null); // Unknown (null is replaced) count ?? \u0026quot;Unknown\u0026quot; ensures that the default value is used only when count is null or undefined. Summary of Parameter Techniques Default Parameters: You can set default values for parameters directly in the function declaration using =. undefined as a Default: If no argument is passed or undefined is passed, a parameter can take its default value. Extra Arguments: JavaScript functions can ignore extra arguments that are passed beyond the declared parameters. Alternative Default Techniques: Use if statements to manually check for undefined. Use the || operator to provide a fallback for any falsy value. Use the ?? (nullish coalescing) operator for default values only when null or undefined are encountered. ","date":"2024-11-09","id":61,"permalink":"/personal-site/docs/java-script/js-language/3-functions/parameters-arguments/","summary":"\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eParameter\u003c/strong\u003e: A variable listed inside the \u003ccode\u003e()\u003c/code\u003e in a function declaration. This is a term at \u003cstrong\u003edeclaration time\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eArgument\u003c/strong\u003e: The actual value passed to the function when it is called. This is a term at \u003cstrong\u003ecall time\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eshowMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;*\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;*\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Modify local `from`\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e  \u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Ann\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eshowMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// *Ann*: Hello\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// Ann (the outer `from` remains unchanged)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efrom\u003c/code\u003e and \u003ccode\u003etext\u003c/code\u003e are \u003cstrong\u003eparameters\u003c/strong\u003e of the function \u003ccode\u003eshowMessage\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe value of \u003ccode\u003efrom\u003c/code\u003e is modified locally inside the function, but the outer variable \u003ccode\u003efrom\u003c/code\u003e remains unchanged after the function call.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"default-value-for-parameters\"\u003e\u003cstrong\u003eDefault Value for Parameters\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eIf a function is called without an argument for a parameter, the parameter\u0026rsquo;s value becomes \u003ccode\u003eundefined\u003c/code\u003e.\u003cbr\u003e\nHowever, you can specify a \u003cstrong\u003edefault value\u003c/strong\u003e for a parameter, which is used when no argument is provided.\u003c/p\u003e","tags":[],"title":"Parameters \u0026 Arguments"},{"content":"returning values, callback functions, recursion, and closures.\nReturning a Value Functions and Side Effects Functions can serve two purposes: they can produce side effects (such as modifying a variable, printing to the console, or changing the DOM) or they can return values.\nFunctions that return values are more useful because their output can be reused in other parts of the program.\nfunction sum(a, b) { return a + b; } let result = sum(1, 2); alert(result); // 3 Here, sum returns a value (3) that is then stored in the variable result. This value can be used or passed around later.\nReturning Early The return statement immediately stops the function\u0026rsquo;s execution and optionally returns a value. If no value is returned, the function returns undefined by default.\nfunction showMovie(age) { if (!checkAge(age)) { return; // Early exit if age is not valid } alert(\u0026#34;Showing movie\u0026#34;); }\rPure Functions A pure function is one that:\nReturns a value based only on its input arguments. Has no side effects (does not modify global variables or interact with external state). Pure functions are easy to test and reason about, as their output depends only on the input.\nFunctions as Values In JavaScript, functions are first-class citizens. This means they can be:\nAssigned to variables. Passed as arguments to other functions. Returned from other functions. Functions as Values A function can be treated as a value (like a string or a number), meaning you can assign it to a variable and execute it later.\nfunction sayHi() { alert(\u0026#34;Hello\u0026#34;); } let func = sayHi; // Assign function to variable func(); // Executes sayHi() function sayHi();\rRegular values like strings or numbers represent the data. A function can be perceived as an action. We can pass it between variables and run when we want.\nPassing Functions as Arguments You can pass functions as arguments to other functions. These are often called callback functions.\nfunction ask(question, yes, no) { if (confirm(question)) yes(); // If yes is clicked, call the `yes` callback else no(); // If no is clicked, call the `no` callback } function showOk() { alert(\u0026#34;You agreed.\u0026#34;); } function showCancel() { alert(\u0026#34;You canceled.\u0026#34;); } ask(\u0026#34;Do you agree?\u0026#34;, showOk, showCancel);\rHere:\nThe ask function takes two callback functions (showOk and showCancel). The appropriate callback is executed based on the user\u0026rsquo;s response. Anonymous Functions as Callbacks You can also pass anonymous functions directly as arguments to another function.\nask( \u0026#34;Do you agree?\u0026#34;, function() { alert(\u0026#34;You agreed.\u0026#34;); }, function() { alert(\u0026#34;You canceled.\u0026#34;); } );\rThese anonymous functions are called immediately when the ask function executes. They are not assigned to any variables, so they exist only within the scope of the ask call.\nThe Call Stack When a function is called, the program must \u0026ldquo;remember\u0026rdquo; where it left off in order to return to that point after the function finishes executing. This is handled by the call stack.\nEvery time a function is called, its execution context is pushed onto the stack. When a function returns, its context is popped from the stack, and execution continues at the point where the function was called. function chicken() { return egg(); } function egg() { return chicken(); } console.log(chicken() + \u0026#34; came first.\u0026#34;);\rThis code causes infinite recursion. The functions chicken and egg keep calling each other, filling up the call stack until it overflows.\nStack Overflow If the call stack grows too large (due to excessive function calls like the example above), a stack overflow error occurs. This happens when the computer runs out of space to store execution contexts.\nClosures A closure is a function that retains access to variables from its lexical scope, even after the function that created those variables has finished executing.\nfunction wrapValue(n) { let local = n; return () =\u0026gt; local; // Returned function remembers the `local` variable } let wrap1 = wrapValue(1); let wrap2 = wrapValue(2); console.log(wrap1()); // 1 console.log(wrap2()); // 2 Here, the wrapValue function creates a closure. The returned function remembers the value of local from the scope in which it was created.\nClosures are powerful because they allow a function to \u0026ldquo;remember\u0026rdquo; the environment in which it was created, even if that function is called later.\nfunction multiplier(factor) { return number =\u0026gt; number * factor; // Closure capturing `factor` } let twice = multiplier(2); console.log(twice(5)); // 10 The multiplier function creates a closure by returning a function that uses the factor parameter. The twice function retains the environment where factor was set to 2. Recursion A function is recursive if it calls itself in order to solve a problem. Recursive functions are commonly used to solve problems that involve repetitive sub-problems (e.g., calculating factorials, traversing trees, etc.).\nfunction power(base, exponent) { if (exponent === 0) { return 1; // Base case: anything raised to the power of 0 is 1 } else { return base * power(base, exponent - 1); // Recursive case } } console.log(power(2, 3)); // 8 Solving a Problem with Recursion The problem asks for a sequence of operations (adding 5 or multiplying by 3) to reach a target number. Here\u0026rsquo;s how you could implement it recursively:\nfunction findSolution(target) { function find(current, history) { if (current === target) { return history; // Base case: return the history if we reach the target } else if (current \u0026gt; target) { return null; // Stop if we exceed the target } else { // Recursively try adding 5 or multiplying by 3 return find(current + 5, `${history} + 5`) || find(current * 3, `${history} * 3`); } } return find(1, \u0026#34;1\u0026#34;); } console.log(findSolution(24)); // \u0026#34;(((1 * 3) + 5) * 3)\u0026#34; Here, the function findSolution uses recursion to explore two possible operations at each step: adding 5 or multiplying by 3. It keeps track of the operations in the history variable.\nGrowing Functions When working with larger functions, it\u0026rsquo;s best to break them down into smaller, reusable pieces.\nFormatting Output To print the number of cows, chickens, and pigs on a farm, formatted with leading zeros.\nfunction zeroPad(number, width) { let string = String(number); while (string.length \u0026lt; width) { string = \u0026#34;0\u0026#34; + string; } return string; } function printFarmInventory(cows, chickens, pigs) { console.log(`${zeroPad(cows, 3)} Cows`); console.log(`${zeroPad(chickens, 3)} Chickens`); console.log(`${zeroPad(pigs, 3)} Pigs`); } printFarmInventory(7, 16, 3);\rHere:\nzeroPad ensures each number is padded with zeros to be exactly three digits long. printFarmInventory uses zeroPad to format and print each animal\u0026rsquo;s count. function min that returns the minimum of two numbers. function min(a, b) { return a \u0026lt; b ? a : b; }\rfunction countB that counts the number of B characters in a string. function countB(str) { let count = 0; for (let char of str) { if (char === \u0026#39;B\u0026#39; || char === \u0026#39;b\u0026#39;) count++; } return count; }\rfunction countChar that counts occurrences of a specific character in a string. function countChar(str, char) { let count = 0; for (let c of str) { if (c === char) count++; } return count; }\r","date":"2024-11-09","id":62,"permalink":"/personal-site/docs/java-script/js-language/3-functions/return-recursion-call-stack/","summary":"\u003cp\u003e\u003cstrong\u003ereturning values\u003c/strong\u003e, \u003cstrong\u003ecallback functions\u003c/strong\u003e, \u003cstrong\u003erecursion\u003c/strong\u003e, and \u003cstrong\u003eclosures\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"returning-a-value\"\u003e\u003cstrong\u003eReturning a Value\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"functions-and-side-effects\"\u003e\u003cstrong\u003eFunctions and Side Effects\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eFunctions can serve two purposes: they can produce \u003cstrong\u003eside effects\u003c/strong\u003e (such as modifying a variable, printing to the console, or changing the DOM) or they can \u003cstrong\u003ereturn values\u003c/strong\u003e.\u003c/p\u003e","tags":[],"title":"Return, Recursion, Call Stack"},{"content":"Scheduling Function Calls with setTimeout and setInterval JavaScript provides the ability to schedule functions to be executed later or repeatedly using two methods: setTimeout and setInterval.\nsetTimeout allows us to run a function once after the interval of time.\nsetInterval allows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval.\nsetTimeout( ) The setTimeout() method allows you to schedule a function to run once after a specified delay.\nlet timerId = setTimeout(func|code, delay, [arg1], [arg2], ...);\rfunc|code: Function or string of code to execute after the delay. Usually it\u0026rsquo;s a function. delay: The time to wait (in milliseconds) before executing the function. The default is 0 (run immediately) (1000 ms = 1 second). arg1, arg2, \u0026hellip;: Arguments to pass to the function when it executes (optional). function sayHi() { alert(\u0026#39;Hello\u0026#39;); } setTimeout(sayHi, 1000); // Executes sayHi after 1 second (1000 ms) You can pass arguments to the function using setTimeout.\nfunction sayHi(phrase, who) { alert(phrase + \u0026#39;, \u0026#39; + who); } setTimeout(sayHi, 1000, \u0026#34;Hello\u0026#34;, \u0026#34;John\u0026#34;); // \u0026#34;Hello, John\u0026#34; Here, sayHi is called with \u0026quot;Hello\u0026quot; and \u0026quot;John\u0026quot; after 1 second.\nIf the first argument is a string, the js creates a function from it.\nUsing Arrow Functions (Best Practice): It\u0026rsquo;s better to use arrow functions rather than passing a string of code:\nsetTimeout(() =\u0026gt; alert(\u0026#39;Hello\u0026#39;), 1000);\rPassing a string is not recommended because it has security and performance issues. It is safer and clearer to use a function or an arrow function.\nCommon Mistake (Calling Function Immediately): When you call the function immediately, it doesn\u0026rsquo;t work as expected. You need to pass the function reference, not the result of its execution.\nsetTimeout(sayHi(), 1000); // WRONG! sayHi is executed immediately // Correct way: setTimeout(sayHi, 1000); // Pass the function reference, don\u0026#39;t call it setTimeout expects a reference to a function. And here sayHi() runs the function, and the result of its execution is passed to setTimeout.\nIn the wrong example, sayHi() is executed immediately, and its return value (which is undefined) is passed to setTimeout. You should pass sayHi without parentheses to ensure it is executed later.\nclearTimeout( ) You can cancel a scheduled setTimeout() function before it executes by using clearTimeout().\nclearTimeout(timerId);\rtimerId is the identifier returned by setTimeout. let timerId = setTimeout(() =\u0026gt; alert(\u0026#34;never happens\u0026#34;), 1000); clearTimeout(timerId); // This cancels the timeout before it executes Even though clearTimeout(timerId) is called, the alert will never show because the execution was canceled.\nsetInterval( ) The setInterval() method is similar to setTimeout, but it runs the function repeatedly at the specified interval.\nlet timerId = setInterval(func, delay, [arg1], [arg2], ...);\rfunc: The function to execute repeatedly. delay: The time (in milliseconds) between each execution of the function. arg1, arg2, \u0026hellip;: Arguments to pass to the function (optional). let timerId = setInterval(() =\u0026gt; alert(\u0026#39;tick\u0026#39;), 2000); // Alerts \u0026#34;tick\u0026#34; every 2 seconds Stopping the Interval: You can stop the interval by calling clearInterval() and passing the timerId returned by setInterval.\nlet timerId = setInterval(() =\u0026gt; alert(\u0026#39;tick\u0026#39;), 2000); setTimeout(() =\u0026gt; { clearInterval(timerId); // Stops the interval after 5 seconds alert(\u0026#39;stop\u0026#39;); }, 5000);\rThe \u0026quot;tick\u0026quot; alert happens every 2 seconds. After 5 seconds, the interval is cleared, and \u0026quot;stop\u0026quot; is shown. Behavior in Browsers: In most browsers, including Chrome and Firefox, the internal timer continues to run even when a modal window (alert, confirm, etc.) is open. So, if you don’t dismiss the alert for a while, the next \u0026quot;tick\u0026quot; will be shown immediately after you close the current one, making the interval appear shorter. Nested setTimeout() Nested setTimeout\nYou can schedule the next function call within the function itself, creating a loop that behaves similarly to setInterval(), but with more flexibility.\nlet timerId = setTimeout(function tick() { alert(\u0026#39;tick\u0026#39;); timerId = setTimeout(tick, 2000); // Schedules the next tick after 2 seconds }, 2000);\rThis method allows you to control when the next function is called based on the results of the current execution. For example, you might want to vary the interval or conditionally stop the execution.\nThe key difference is that with setInterval, the next interval is always scheduled immediately, but with nested setTimeout, you can choose to delay the next call further or conditionally stop it based on some logic.\nImportant Notes on setTimeout and setInterval: Timers are not guaranteed to be precise. The delay is the minimum time before execution, and the actual execution might happen later due to factors like system load, other running scripts, or the browser\u0026rsquo;s event loop.\nAvoid using setTimeout and setInterval for high-precision tasks. For tasks that require high precision (like animations or real-time operations), it\u0026rsquo;s better to use requestAnimationFrame or other appropriate APIs.\nMemory leaks can occur. If intervals or timeouts are not cleared properly, they can continue to run in the background, consuming memory and resources.\nSummary setTimeout(func, delay) runs func once after delay milliseconds. setInterval(func, delay) runs func repeatedly every delay milliseconds. Use clearTimeout(timerId) or clearInterval(timerId) to stop a scheduled timeout or interval. Nested setTimeout() provides more flexibility over setInterval() and can help in cases where you need to control the timing more precisely. ","date":"2024-11-09","id":63,"permalink":"/personal-site/docs/java-script/js-language/3-functions/scheduling/","summary":"\u003ch2 id=\"scheduling-function-calls-with-settimeout-and-setinterval\"\u003e\u003cstrong\u003eScheduling Function Calls with \u003ccode\u003esetTimeout\u003c/code\u003e and \u003ccode\u003esetInterval\u003c/code\u003e\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eJavaScript provides the ability to schedule functions to be executed \u003cstrong\u003elater\u003c/strong\u003e or \u003cstrong\u003erepeatedly\u003c/strong\u003e using two methods: \u003cstrong\u003e\u003ccode\u003esetTimeout\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003esetInterval\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e","tags":[],"title":"Scheduling"},{"content":"Decorators and function manipulation via methods like call, apply, and bind.\n1. Decorators in JavaScript Decorators in JavaScript are a design pattern that allows you to add behavior to an existing function without modifying its structure.\nTransparent Caching Decorator using a caching decorator to cache the results of a function call.\nOriginal slow Function: function slow(x) { // Simulate a slow process (e.g., network request, heavy calculation) alert(`called with ${x}`); return x; }\rThe function slow(x) simulates some slow operation and returns the value passed to it. We want to enhance it by caching the results of function calls to avoid redundant processing.\nCaching Decorator function cachingDecorator(func) { // decorator that takes another function let cache = new Map(); // cache to store computed results return function(x) { // returns a new function if (cache.has(x)) { // check if result is cached return cache.get(x); // return the cached result } let result = func(x); // otherwise, call the original function cache.set(x, result); // store the result in the cache return result; // return the computed result }; }\rIn this cachingDecorator:\nWe create a Map called cache to store results. We return a new function that checks if the result for the argument x is already cached. If the result exists in the cache, it\u0026rsquo;s returned directly. If not, the original function (func(x)) is called, the result is cached, and then the result is returned. Applying the Decorator to slow slow = cachingDecorator(slow); alert(slow(1)); // First time, slow(1) is computed and cached alert(\u0026#34;Again: \u0026#34; + slow(1)); // Cached result returned alert(slow(2)); // First time, slow(2) is computed and cached alert(\u0026#34;Again: \u0026#34; + slow(2)); // Cached result returned In this code:\nWhen you call slow(1) for the first time, the decorator caches the result. On subsequent calls with the same argument (like slow(1) again), the result is retrieved from the cache without re-running the slow function. Limitation of Caching Decorators As you pointed out, the caching decorator may not work well with object methods. This is because when you apply a decorator to a method, it may break the this context, which is particularly important for methods in objects.\nlet obj = { name: \u0026#34;Obj\u0026#34;, slow: function(x) { alert(\u0026#39;called with \u0026#39; + x); return x; } }; obj.slow = cachingDecorator(obj.slow); obj.slow(1); // Will not work properly if we need to access `this.name` in the method To make the caching decorator work with object methods, you\u0026rsquo;d need to preserve the this context, but that\u0026rsquo;s a more advanced use case involving bind.\n2. call(), apply(), and bind() Now, let\u0026rsquo;s go over the call, apply, and bind methods — they are all used to change the this context inside a function.\ncall() The call() method allows you to explicitly set the this value in a function. It also allows you to pass arguments one by one.\nfunc.call(context, arg1, arg2, ...);\rcontext: The value of this that you want to bind. arg1, arg2, ...: Arguments to pass to the function. function sayHi() { alert(this.name); } let user = { name: \u0026#34;John\u0026#34; }; let admin = { name: \u0026#34;Admin\u0026#34; }; sayHi.call(user); // John sayHi.call(admin); // Admin In this case, calling sayHi.call(user) changes the this inside sayHi to refer to the user object, and similarly for admin.\nIf we call sayHi() directly, it would use the global this (which, in non-strict mode, would be the window object in browsers).\napply() The apply() method is very similar to call(), but instead of passing arguments one by one, you pass them as an array.\nfunc.apply(context, [argsArray]);\rfunction say(phrase) { alert(this.name + \u0026#34;: \u0026#34; + phrase); } let user = { name: \u0026#34;John\u0026#34; }; say.apply(user, [\u0026#34;Hello\u0026#34;]); // John: Hello This is equivalent to calling:\nsay.call(user, \u0026#34;Hello\u0026#34;);\rapply is useful when you have an array or a list of arguments that you want to pass to the function.\nbind() The bind() method is similar to call and apply, but instead of immediately invoking the function, it returns a new function with this bound to a specific value and optionally pre-defined arguments.\nlet boundFunction = func.bind(context, arg1, arg2, ...);\rfunction say(phrase) { alert(this.name + \u0026#34;: \u0026#34; + phrase); } let user = { name: \u0026#34;John\u0026#34; }; let boundSay = say.bind(user); // Creates a new function with `this` set to `user` boundSay(\u0026#34;Hello\u0026#34;); // John: Hello The bind() method does not invoke the function immediately. You can also pass additional arguments to bind(), which will be prepended to the arguments when the function is called. This is useful for situations where you need to create a function that can be executed later but already has a fixed this value.\nhttps://javascript.info/call-apply-decorators\nfunc.apply(context, args)\nhttps://javascript.info/bind func.bind(user)\nSummary: call() and apply() are used to invoke a function with a specific this context, but apply() takes an array of arguments while call() takes arguments one by one. bind() creates a new function with a fixed this value and optional arguments, but does not invoke the function immediately. Decorators like your caching example allow you to enhance the behavior of existing functions, and they can be used to add features like memoization (caching), logging, or validation. ","date":"2024-11-09","id":64,"permalink":"/personal-site/docs/java-script/js-language/3-functions/decorators/","summary":"\u003cp\u003e\u003cstrong\u003eDecorators\u003c/strong\u003e and function manipulation via methods like \u003ccode\u003ecall\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e, and \u003ccode\u003ebind\u003c/code\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"1-decorators-in-javascript\"\u003e\u003cstrong\u003e1. Decorators in JavaScript\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eDecorators in JavaScript are a design pattern that allows you to add behavior to an existing function without modifying its structure.\u003c/p\u003e","tags":[],"title":"Decorators"},{"content":"Functions as Objects In JavaScript, functions are first-class objects. This means that they are objects themselves, and you can treat them like any other object: assign them properties, pass them around as arguments, or even add methods to them.\nThe name Property The name property of a function refers to its name. This is especially useful for debugging or logging purposes.\nfunction sayHi() { alert(\u0026#34;Hi\u0026#34;); } alert(sayHi.name); // Outputs: sayHi Method Names in Objects Even methods defined inside objects have the name property, which reflects the name of the method.\nlet user = { sayHi() { alert(\u0026#34;Hi\u0026#34;); }, sayBye: function() { alert(\u0026#34;Bye\u0026#34;); } }; alert(user.sayHi.name); // Outputs: sayHi alert(user.sayBye.name); // Outputs: sayBye Anonymous Functions and the name Property If a function is anonymous (i.e., it doesn\u0026rsquo;t have a name), the name property will be an empty string.\nlet arr = [function() {}]; alert(arr[0].name); // Outputs: \u0026lt;empty string\u0026gt; This is because anonymous functions do not have a name by default. But interestingly, in some cases, modern JavaScript engines will try to infer the function name based on the variable or context it\u0026rsquo;s assigned to.\nThe length Property The length property of a function returns the number of parameters that the function expects (i.e., the number of parameters in its declaration). This does not include the rest parameters or any other arguments passed dynamically.\nExamples: function f1(a) {} function f2(a, b) {} function f3(a, b, ...more) {} alert(f1.length); // 1 alert(f2.length); // 2 alert(f3.length); // 2 (Rest parameters aren\u0026#39;t counted) Here, f1 has one parameter, so f1.length is 1. f3 uses a rest parameter (...more), but it still counts only the non-rest parameters (a and b), so f3.length is 2.\nhttps://javascript.info/function-object\nhttps://javascript.info/new-function Creating Functions Dynamically with new Function You can create a function dynamically from a string using the new Function() constructor. This is the only way to create functions from code that is not defined directly in your source code.\nlet func = new Function([arg1, arg2, ..., argN], functionBody);\rlet sum = new Function(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;return a + b\u0026#39;); alert(sum(1, 2)); // 3 'a' and 'b' are the arguments. 'return a + b' is the function body. Function Without Arguments: let sayHi = new Function(\u0026#39;alert(\u0026#34;Hello\u0026#34;)\u0026#39;); sayHi(); // Outputs: Hello Here, sayHi is a function that displays an alert with the string \u0026quot;Hello\u0026quot; when called.\nDynamic Functions from Strings (e.g., from a Server): You can also create functions dynamically from strings received from a server, which makes this feature quite powerful but also potentially dangerous (see below for security concerns).\nlet str = \u0026#39;alert(\u0026#34;This is dynamic!\u0026#34;)\u0026#39;; // Code string from the server let func = new Function(str); func(); // Outputs: This is dynamic! This is useful when you want to evaluate or execute code that might not be hard-coded into your script.\nSecurity Concerns with new Function While the new Function() constructor can be powerful, it introduces security risks because it allows execution of dynamically generated code (often received from external sources, like a server). This can open the door to code injection attacks if the string is not carefully validated or sanitized.\nIf you create a function from user input without sanitizing it, it could execute malicious code.\nlet userInput = \u0026#39;alert(\u0026#34;Hacked!\u0026#34;)\u0026#39;; // Simulating user input let func = new Function(userInput); // Dangerous! func(); // This will run the malicious alert! To avoid this, never use new Function() with unsanitized input from untrusted sources.\nClosure with new Function Functions created using new Function() behave slightly differently from regular functions in terms of closures. When a function is created using the new Function constructor, its lexical environment is set to the global context (window in browsers, global in Node.js), not the local context where the function is created.\nExample of new Function and Closure: function getFunc() { let value = \u0026#34;test\u0026#34;; // Creating a function with `new Function` won\u0026#39;t have access to the local `value` let func = new Function(\u0026#39;alert(value)\u0026#39;); return func; } getFunc(); // Error: value is not defined Here, value is not accessible in the function because new Function() creates the function in the global scope and doesn\u0026rsquo;t capture the local variables (value in this case) as a closure would.\nSummary: Functions are objects in JavaScript, meaning they can have properties like name and length, and can be treated as first-class objects. The name property gives the name of the function, and length tells how many parameters the function expects (excluding rest parameters). The new Function() constructor allows you to create functions from strings, enabling dynamic function generation, but this can introduce security risks if not used carefully. Closures created with new Function() have a different lexical environment and don\u0026rsquo;t capture variables from the local scope like normal functions do. ","date":"2024-11-09","id":65,"permalink":"/personal-site/docs/java-script/js-language/3-functions/function-object/","summary":"\u003ch2 id=\"functions-as-objects\"\u003e\u003cstrong\u003eFunctions as Objects\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eIn JavaScript, \u003cstrong\u003efunctions are first-class objects\u003c/strong\u003e. This means that they are \u003cstrong\u003eobjects\u003c/strong\u003e themselves, and you can treat them like any other object: assign them properties, pass them around as arguments, or even add methods to them.\u003c/p\u003e","tags":[],"title":"Function Object"},{"content":"Objects in JavaScript Primitive types: These can only hold a single value (e.g., numbers, strings, booleans). Object types: These are collections of key-value pairs and can store multiple values. An object is a collection of key-value pairs, where:\nKey is a string. Value can be any data type. Syntax for defining an object:\nlet user = { key: value };\rBraces {} in JavaScript {} can denote: A block of statements in control structures like loops or conditionals. An object literal when defining an object. Creating an empty object:\nlet user = new Object(); // \u0026#34;object constructor\u0026#34; syntax let user = {}; // \u0026#34;object literal\u0026#34; syntax References and Copies of Objects When defining objects, they hold references to the data, not copies. This means multiple variables can reference the same object. When a primitive variable is defined, it will contain a copy of the information provided to it.\nconst obj = { data: 42 }; const objCopy = obj; // objCopy points to the same object as obj objCopy.data = 43; console.log(obj); // { data: 43 } console.log(objCopy); // { data: 43 } This is how the DOM object gets edited using storing its references in js variables.\nconst element = document.querySelector(\u0026#34;#container\u0026#34;); element.style.backgroundColor = \u0026#39;red\u0026#39;; // Changes the actual DOM element Literals and Properties An object literal is a shorthand for creating objects by directly defining key-value pairs inside {}. Each property has a keyor name before the colon:\nEach property seperated by a , comma.\nEach property in an object consists of:\nA key (or property name). A value associated with that key. let user = { name: \u0026#34;John\u0026#34;, age: 30, \u0026#34;likes birds\u0026#34;: true, // property name with spaces must be in quotes }; alert(user.name); // \u0026#34;John\u0026#34; user.isAdmin = true; // Assigning a new property delete user.age; // Deletes the \u0026#39;age\u0026#39; property Note: Property names can be any string, number, or symbol, including reserved words or multi-word names. Properties whose name are not valid bindings and multi word has to be in \u0026quot;\u0026quot;quotes. \u0026quot;touch wood\u0026quot;: \u0026quot;touched\u0026quot;\nObject Literals with Functions Objects can also have methods (functions). These are functions stored as properties of an object.\nconst person = { name: [\u0026#34;Bob\u0026#34;, \u0026#34;Smith\u0026#34;], age: 32, bio: function () { console.log(`${this.name[0]} ${this.name[1]} is ${this.age} years old.`); }, introduceSelf: function () { console.log(`Hi! I\u0026#39;m ${this.name[0]}.`); }, }; // Calling the methods person.bio(); // \u0026#34;Bob Smith is 32 years old.\u0026#34; An object like this is called an object literal - we have written out the object contents as we\u0026rsquo;ve come to create it.\nsimplified syntax for functions inside an object:\nbio: function () {...}, introduceSelf: function() {...}, // simpler is omitting the function bio() { ... }, introduceSelf() { ... },\rAccessing Properties of Objects Dot Notation The dot notation is the most common way to access properties of an object:\nperson.age; // Accessing a property person.bio(); // Calling a method The object name acts as the namespace - entered first to access anything inside the object. Next is a dot . , then what needs to be accessed.\nNested Objects: Objects can contain other objects, and to access nested properties, you chain dot notations:\nconst person = { name: { first: \u0026#34;Bob\u0026#34;, last: \u0026#34;Smith\u0026#34;, }, }; console.log(person.name.first); // \u0026#34;Bob\u0026#34; // using bracket notation person[\u0026#34;name\u0026#34;][\u0026#34;first\u0026#34;];\rSquare Bracket Notation Square bracket notation is similar to array indexing but is used for object properties. Instead of index numbers to select an item, name associated with each member\u0026rsquo;s value is used. This allows:\nDynamic property names. Accessing multi-word properties (those with spaces or special characters). Objects are also called as associative arrays\nDot notation is preferred as it is more easy to read but, if an object property name is held in a variable, then dot notation cannot be used to access the value.\nconst person = { name: [\u0026#34;Bob\u0026#34;, \u0026#34;Smith\u0026#34;], age: 32, }; function logProperty(propertyName) { console.log(person[propertyName]); // Access using a variable } logProperty(\u0026#34;name\u0026#34;); // [\u0026#34;Bob\u0026#34;, \u0026#34;Smith\u0026#34;] logProperty(\u0026#34;age\u0026#34;); // 32 Multi-word Property Names When property names are multi-word or contain special characters (like spaces), you must use square bracket notation:\nlet user = {}; user[\u0026#34;likes birds\u0026#34;] = true; // valid alert(user[\u0026#34;likes birds\u0026#34;]); // true delete user[\u0026#34;likes birds\u0026#34;]; // deletes the property Using Variables to Access Properties Square bracket notation allows properties to be accessed dynamically using variables:\nlet key = \u0026#34;likes birds\u0026#34;; user[key] = true; // Same as user[\u0026#34;likes birds\u0026#34;] = true; let user = { name: \u0026#34;John\u0026#34;, age: 30 }; let key = prompt(\u0026#34;What do you know about user?\u0026#34;, \u0026#34;name\u0026#34;); // access by variable alert( user[key] ); // John ??? for..in loop [[4_for\u0026hellip;in_loop|Details here]]\nProperty Value Shorthand When creating objects, if the property name matches the variable name, you can use shorthand syntax:\nfunction makeUser(name, age) { return { name, // shorthand for name: name age, // shorthand for age: age }; } let user = makeUser(\u0026#34;John\u0026#34;, 30); alert(user.name); // \u0026#34;John\u0026#34; Shorthand Example: let user = { name, // same as name: name age: 30, };\rSummary Objects are collections of key-value pairs, often used to store structured data. Keys (or property names) are strings, and values can be any data type. Access properties using: Dot notation: obj.property Square bracket notation: obj[\u0026quot;property\u0026quot;] (use when key is dynamic or contains spaces) For-in loop can be used to iterate over object properties. Objects can have methods, and shorthand notation can simplify property definition. Additional operators:\nTo delete a property: delete obj.prop. To check if a property with the given key exists: \u0026quot;key\u0026quot; in obj. To iterate over an object: for (let key in obj) loop. What we’ve studied in this chapter is called a “plain object”, or just Object.\n","date":"2024-11-09","id":66,"permalink":"/personal-site/docs/java-script/js-language/4-objects/object/","summary":"\u003ch2 id=\"objects-in-javascript\"\u003e\u003cstrong\u003eObjects in JavaScript\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePrimitive types\u003c/strong\u003e: These can only hold a single value (e.g., numbers, strings, booleans).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eObject types\u003c/strong\u003e: These are collections of key-value pairs and can store multiple values.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn object is a collection of key-value pairs, where:\u003c/p\u003e","tags":[],"title":"Object"},{"content":"","date":"2024-11-07","id":67,"permalink":"/personal-site/docs/java-script/js-language/4-objects/","summary":"","tags":[],"title":"Objects"},{"content":"Setting Object Members 1. Assigning Values to Object Properties You can set or change the values of an object\u0026rsquo;s properties using either dot notation or bracket notation and assignment operator.\n// Using dot notation person.age = 45; person[\u0026#34;name\u0026#34;][\u0026#34;last\u0026#34;] = \u0026#34;Cratch\u0026#34;; // Using bracket notation person[\u0026#34;eyes\u0026#34;] = \u0026#34;hazel\u0026#34;; person.farewell = function () { console.log(\u0026#34;Bye everybody!\u0026#34;); };\r2. Bracket Notation for Dynamic Property Names Bracket notation allows you to use variables as property names, making it useful when property names need to be dynamic or come from user input.\nconst dataName = nameInput.value; const dataValue = nameValue.value; // Using bracket notation to set the property person[dataName] = dataValue; // Example: Setting a dynamic property name and value const dataName = \u0026#34;height\u0026#34;; const dataValue = \u0026#34;1.70m\u0026#34;; person[dataName] = dataValue; // person.height = \u0026#34;1.70m\u0026#34; Note: Dot notation cannot use variables as property names:\nperson.dataName = \u0026#34;height\u0026#34;; // This is invalid, it assigns \u0026#34;height\u0026#34; as a string literal, not the value in the variable `dataName`. Working with Objects 1. Reading Properties If a property doesn’t exist on an object, JavaScript returns undefined.\nlet day1 = { squirrel: false, events: [\u0026#34;work\u0026#34;, \u0026#34;touched tree\u0026#34;, \u0026#34;pizza\u0026#34;, \u0026#34;running\u0026#34;] }; console.log(day1.squirrel); // false console.log(day1.wolf); // undefined (property doesn\u0026#39;t exist) day1.wolf = false; // Create the \u0026#34;wolf\u0026#34; property console.log(day1.wolf); // false delete day1.squirrel; // Remove the \u0026#34;squirrel\u0026#34; property console.log(day1.squirrel); // undefined (property no longer exists) 2. The delete Operator The delete operator removes a specified property from an object.\ndelete day1.squirrel; console.log(day1.squirrel); // undefined Computed Properties in Object Literals You can use square brackets [] inside object literals to dynamically set property names. This is known as computed properties.\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); // user input with default value \u0026#34;apple\u0026#34; let bag = { [fruit]: 5, // property name is dynamically taken from the `fruit` variable }; alert(bag.apple); // If user chooses \u0026#34;apple\u0026#34;, this alerts \u0026#34;5\u0026#34; // [fruit] menas property name is taken from fruit. // so bag will have { apple: 5} This works the same as:\nlet fruit = prompt(\u0026#34;Which fruit to buy?\u0026#34;, \u0026#34;apple\u0026#34;); let bag = {}; bag[fruit] = 5; // property name taken from `fruit` variable 3. Complex Expressions in Computed Properties You can use more complex expressions within the square brackets.\nlet fruit = \u0026#34;apple\u0026#34;; let bag = { [fruit + \u0026#39;Computers\u0026#39;]: 5 // property name is \u0026#34;appleComputers\u0026#34; }; console.log(bag.appleComputers); // 5 Mutability of Objects Objects are mutable, meaning their values can be changed after they are created.\nlet object1 = {value: 10}; object1.value = 15; // Modify the existing value Immutability of Primitive Types Primitive data types like strings, numbers, and booleans are immutable. This means their values cannot be changed directly after assignment.\nlet str = \u0026#34;hello\u0026#34;; str[0] = \u0026#34;H\u0026#34;; // This has no effect, as strings are immutable. console.log(str); // \u0026#34;hello\u0026#34; (not \u0026#34;Hello\u0026#34;) Summary Dot Notation: Used for setting and accessing object properties with known names. Bracket Notation: Useful for dynamic property names and setting properties using variables or expressions. Delete Operator: Removes a property from an object. Computed Properties: Allows using dynamic names when defining object properties. Mutability: Objects are mutable, meaning their properties can be changed; primitive types (e.g., strings, numbers) are immutable. ","date":"2024-11-09","id":68,"permalink":"/personal-site/docs/java-script/js-language/4-objects/object-properties/","summary":"\u003ch2 id=\"setting-object-members\"\u003e\u003cstrong\u003eSetting Object Members\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"1-assigning-values-to-object-properties\"\u003e\u003cstrong\u003e1. Assigning Values to Object Properties\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eYou can set or change the values of an object\u0026rsquo;s properties using either dot notation or bracket notation and assignment operator.\u003c/p\u003e","tags":[],"title":"Object Properties"},{"content":"object references, cloning, and deep copying in JavaScript.\nObjects vs. Primitives Primitives (like strings, numbers, booleans, etc.) are always copied by value. This means when a primitive variable is assigned to another, a copy of the value is made.\nlet message = \u0026#34;hello\u0026#34;; let phrase = message; // phrase is a copy of message Objects are copied by reference. When you assign an object to a variable, that variable doesn\u0026rsquo;t hold the object itself but rather the memory address where the object is stored.\nlet user = { name: \u0026#34;John\u0026#34; }; let admin = user; // \u0026#39;admin\u0026#39; holds a reference to the same object as \u0026#39;user\u0026#39; admin.name = \u0026#34;Pete\u0026#34;; // Modifying \u0026#39;admin\u0026#39; also changes \u0026#39;user\u0026#39; console.log(user.name); // \u0026#34;Pete\u0026#34; Reference Behavior of Objects When you assign an object to another variable, the second variable holds a reference to the same object, meaning both variables point to the same object.\nlet object1 = { value: 10 }; let object2 = { value: 10 }; let object3 = object1; // object3 references object1 console.log(object1 == object2); // false (different objects, same structure) console.log(object1 == object3); // true (same object) Reassigning Object Variables Reassigning a variable that holds an object does not affect other variables pointing to the same object. Only the reference changes for the reassigned variable.\nlet animal = { species: \u0026#34;dog\u0026#34; }; let dog = animal; // both \u0026#39;animal\u0026#39; and \u0026#39;dog\u0026#39; reference the same object animal = { species: \u0026#34;cat\u0026#34; }; // \u0026#39;animal\u0026#39; is reassigned to a new object console.log(animal); // { species: \u0026#34;cat\u0026#34; } console.log(dog); // { species: \u0026#34;dog\u0026#34; } (dog still points to the original object) [[4_for\u0026hellip;in_loop|for..in loop]] Cloning and Merging Objects Shallow Copy (Copying References) When copying an object, only primitive values are copied by value, while objects inside the object are still copied by reference.\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let copy = {}; // Copying properties of \u0026#39;user\u0026#39; into \u0026#39;copy\u0026#39; for (let prop in user) { copy[prop] = user[prop]; } copy.name = \u0026#34;Pete\u0026#34;; // Changing copy does not affect user console.log(user.name); // \u0026#34;John\u0026#34; Using Object.assign for Shallow Copy Object.assign() performs a shallow copy. This means it copies the top-level properties, but nested objects are copied by reference. Object.assign(dest, ...sources)\rlet user = { name: \u0026#34;John\u0026#34; }; let permit1 = { canView: true }; let permit2 = { canEdit: true }; // Merging multiple objects into one Object.assign(user, permit1, permit2); console.log(user.name); // \u0026#34;John\u0026#34; console.log(user.canView); // true console.log(user.canEdit); // true Using Object.assign() to Clone Object.assign() can also be used to create a clone of an object. However, it only performs a shallow copy.\nlet user = { name: \u0026#34;John\u0026#34;, age: 30 }; let copy = Object.assign({}, user); // Creating a shallow copy console.log(copy.name); // \u0026#34;John\u0026#34; Spread syntax can also be used to clone an object.\nDeep Cloning (Nested Objects) Deep cloning is needed when an object contains other objects. A shallow copy will only copy references to nested objects, not the actual content.\nTo make a true deep copy, we must copy nested objects properly, and tools like structuredClone() can help with that. structuredClone()\nDeep Cloning with structuredClone() The structuredClone() method performs deep cloning of objects, copying both the object and its nested properties.\nlet user = { name: \u0026#34;John\u0026#34;, age: 30, sizes: { height: 182, width: 50 } }; let clone = structuredClone(user); console.log(user.sizes == clone.sizes); // false (they are different objects) user.sizes.width = 60; console.log(clone.sizes.width); // 50 (clone is unaffected) structuredClone() handles more than just objects. It can clone most data types, including arrays, primitive values, and supports circular references (where an object refers to itself).\nExample with Circular References:\nlet user = {}; user.me = user; // Circular reference let clone = structuredClone(user); console.log(clone.me === clone); // true (clone maintains circular reference) Limitations: structuredClone() cannot clone objects with functions, such as methods.\nstructuredClone({ f: function(){} }); // Error Summary Objects are stored and copied by reference, meaning variables point to the same object in memory. Primitives are copied by value, meaning variables hold independent copies of the value. Shallow copying (e.g., using Object.assign()) copies top-level properties, but nested objects are still referenced. Deep copying (e.g., using structuredClone()) creates independent copies of the object and all its nested properties. structuredClone() supports circular references but cannot clone functions. ","date":"2024-11-09","id":69,"permalink":"/personal-site/docs/java-script/js-language/4-objects/cloning-object/","summary":"\u003cp\u003e\u003cstrong\u003eobject references, cloning, and deep copying\u003c/strong\u003e in JavaScript.\u003c/p\u003e\n\u003ch2 id=\"objects-vs-primitives\"\u003e\u003cstrong\u003eObjects vs. Primitives\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePrimitives\u003c/strong\u003e (like strings, numbers, booleans, etc.) are always copied \u003cstrong\u003eby value\u003c/strong\u003e. This means when a primitive variable is assigned to another, a \u003cstrong\u003ecopy\u003c/strong\u003e of the value is made.\u003c/p\u003e","tags":[],"title":"Cloning Object"},{"content":"Object.keys(obj) Method Object.keys(obj) is a method that returns an array of the own enumerable property names (keys) of an object obj. This means it will list all the keys in the object, excluding any keys in the object\u0026rsquo;s prototype chain. let obj = { \u0026#34;a\u0026#34;: 1, \u0026#34;b\u0026#34;: 2 }; console.log(Object.keys(obj)); // [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] The object obj has two keys: \u0026quot;a\u0026quot; and \u0026quot;b\u0026quot;. The Object.keys(obj) method returns an array of those keys. Length of the Keys Array: The .length property of the array returned by Object.keys(obj) gives the number of keys (properties) in the object. If the object has no properties, the length will be 0. let emptyObj = {}; console.log(Object.keys(emptyObj).length); // 0 Usage in Code: Consider the following code:\nif (!Object.keys(obj).length) return null;\rRole of Object.keys() in the Code: Object.keys(obj) is used to get an array of the object\u0026rsquo;s own keys.\n.length checks how many keys the object has.\nif (!Object.keys(obj).length):\nThis condition checks if the object obj has no properties. If the object is empty (i.e., it has no own enumerable properties), Object.keys(obj).length will be 0, and the condition will be true. This check effectively verifies if the object is empty before proceeding with further logic. return null;:\nIf the object is empty, the function immediately returns null to avoid processing unnecessary operations for empty objects. [[2.2 modifying Practice#Create a tree from object|Question that uses this]]\nExample Use Case: This pattern is commonly used in scenarios where you need to create or process elements based on the properties of an object. For example, if you\u0026rsquo;re creating a DOM tree from an object and encounter an empty object, you might want to avoid creating any unnecessary DOM nodes.\nfunction createTree(obj) { // Check if the object is empty if (!Object.keys(obj).length) return null; // Return early if object has no properties let tree = document.createElement(\u0026#34;ul\u0026#34;); // Create list items for each property for (let key in obj) { let item = document.createElement(\u0026#34;li\u0026#34;); item.textContent = key; tree.appendChild(item); } return tree; }\rIn this example, if the obj passed to createTree() is empty, Object.keys(obj).length will be 0, and the function will return null, avoiding any DOM manipulation.\nSummary: Object.keys(obj) provides a convenient way to obtain all the keys of an object. You can check if an object is empty by checking if the length of the keys array is 0. This technique helps to optimize code by avoiding unnecessary processing or DOM manipulation for empty objects. Useful in various scenarios, like creating elements dynamically or processing data structures based on the presence of object keys.\n","date":"2024-11-09","id":70,"permalink":"/personal-site/docs/java-script/js-language/4-objects/object.keys/","summary":"\u003ch2 id=\"objectkeysobj-method\"\u003e\u003cstrong\u003e\u003ccode\u003eObject.keys(obj)\u003c/code\u003e Method\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eObject.keys(obj)\u003c/code\u003e\u003c/strong\u003e is a method that returns an \u003cstrong\u003earray\u003c/strong\u003e of the \u003cstrong\u003eown enumerable property names (keys)\u003c/strong\u003e of an object \u003ccode\u003eobj\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThis means it will list all the keys in the object, excluding any keys in the object\u0026rsquo;s prototype chain.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eThe object \u003ccode\u003eobj\u003c/code\u003e has two keys: \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e and \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e. The \u003ccode\u003eObject.keys(obj)\u003c/code\u003e method returns an array of those keys.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"length-of-the-keys-array\"\u003e\u003cstrong\u003eLength of the Keys Array\u003c/strong\u003e:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003e.length\u003c/code\u003e property of the array returned by \u003ccode\u003eObject.keys(obj)\u003c/code\u003e gives the number of keys (properties) in the object.\u003c/li\u003e\n\u003cli\u003eIf the object has no properties, the length will be \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eemptyObj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eemptyObj\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch2 id=\"usage-in-code\"\u003e\u003cstrong\u003eUsage in Code:\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eConsider the following code:\u003c/p\u003e","tags":[],"title":"Object.keys()"},{"content":"Concepts of methods, this, and chaining in JavaScript:\nMethods Method: A method is a function that is a property of an object. Methods allow objects to \u0026ldquo;act\u0026rdquo; in a specific way by performing actions based on the object’s properties or behavior. let user = { name: \u0026#34;John\u0026#34;, sayHi: function() { alert(\u0026#34;Hello\u0026#34;); } }; user.sayHi(); // Hello sayHi is a method of the user object. When user.sayHi() is called, it alerts \u0026quot;Hello\u0026quot;.\nPre-Declaring a Function and Adding it as a Method:\nfunction sayHi() { alert(\u0026#34;Hello\u0026#34;); } let user = {}; user.sayHi = sayHi; user.sayHi(); // Hello Method Shorthand In ES6, there’s a shorthand for defining methods within an object literal. You can omit the function keyword and just use the method name followed by parentheses:\nlet user = { sayHi() { alert(\u0026#34;Hello\u0026#34;); } };\rThis is equivalent to the following, but shorter:\nlet user = { sayHi: function() { alert(\u0026#34;Hello\u0026#34;); } };\rthis in Methods The this keyword is commonly used inside methods to refer to the object the method belongs to.\nthis refers to the object that owns the method. In the following example, the sayHi method uses this.name to access the name property of the user object:\nlet user = { name: \u0026#34;John\u0026#34;, sayHi() { alert(this.name); // \u0026#34;this\u0026#34; refers to the user object } }; user.sayHi(); // John During execution, the value of this will be user. this refers to the user object, and this.name accesses the name property.\nthis is Not Bound (Dynamic) In JavaScript, the value of this is determined at runtime and depends on how the function is called, not where it is declared.\nThis means that if this is used in a method, its value can change based on the context of the call. Using this, it allows for same method definition to be used in multiple objects.\nlet user = { name: \u0026#34;John\u0026#34;, introduceSelf() { console.log(`Hi! I\u0026#39;m ${this.name}`); } }; user.introduceSelf(); // \u0026#34;Hi! I\u0026#39;m John\u0026#34; However, if you call the method in a different context, this will refer to the new context:\nlet introduce = user.introduceSelf; introduce(); // \u0026#34;Hi! I\u0026#39;m undefined\u0026#34; or throws an error in strict mode. In this case, this no longer refers to the user object because the function introduce was called without an object context.\nthis in Constructors You can use this to create methods inside a constructor function, which allows for object reuse across multiple instances:\nfunction Person(name) { this.name = name; this.introduceSelf = function() { console.log(`Hi! I\u0026#39;m ${this.name}`); }; } let person1 = new Person(\u0026#34;Chris\u0026#34;); let person2 = new Person(\u0026#34;Deepthi\u0026#34;); person1.introduceSelf(); // \u0026#34;Hi! I\u0026#39;m Chris\u0026#34; person2.introduceSelf(); // \u0026#34;Hi! I\u0026#39;m Deepthi\u0026#34; In this case, this.name and this.introduceSelf work because this refers to each specific instance of Person.\nArrow Functions and this [[3.2_arrow_function#Arrow function have no this.|Arrow functions have no \u0026rsquo;this\u0026rsquo;]] Unlike regular functions, arrow functions do not have their own this. They inherit this from the surrounding context (lexical scoping). This can lead to unexpected behavior when used in methods.\nlet user = { name: \u0026#34;John\u0026#34;, sayHi: () =\u0026gt; { alert(this.name); // `this` is not bound to user, it\u0026#39;s inherited from the surrounding scope } }; user.sayHi(); // undefined (or error in strict mode) In the example above, this in the arrow function is inherited from the global context (or undefined in strict mode), not from the user object.\nA Simple Calculator Object Here\u0026rsquo;s an example of how you can use methods and this to create a simple calculator object with read(), sum(), and multiply() methods:\nlet calculator = { read() { this.a = +prompt(\u0026#39;Give a?\u0026#39;, 0); this.b = +prompt(\u0026#39;Give b?\u0026#39;, 0); }, sum() { return this.a + this.b; }, multiply() { return this.a * this.b; } }; calculator.read(); // Prompt the user for inputs alert(calculator.sum()); // Show the sum alert(calculator.multiply()); // Show the product Method Explanation: read(): Prompts the user for two values and stores them as properties a and b of the calculator object. sum(): Returns the sum of a and b. multiply(): Returns the product of a and b. Method Chaining JavaScript allows for method chaining, where multiple method calls are linked together in a single line. For this to work, each method must return the object itself (this), so the next method can be called on it.\nHere\u0026rsquo;s an example using an object that represents a ladder:\nlet ladder = { step: 0, up() { this.step++; return this; // Return the object to enable chaining }, down() { this.step--; return this; // Return the object to enable chaining }, showStep() { alert(this.step); return this; // Return the object to enable chaining } }; // Chaining method calls ladder.up().up().down().showStep().down(); // step = 1 In the example:\nladder.up() increments the step. ladder.down() decrements the step. ladder.showStep() displays the current step. By returning this from each method, you can chain calls together. Summary: Methods: Functions that are properties of an object. this: Refers to the object that owns the method and allows access to its properties. Arrow Functions: Do not have their own this; they inherit it from the surrounding context. Chaining: Multiple method calls on the same object can be chained by returning this from each method. ","date":"2024-11-09","id":71,"permalink":"/personal-site/docs/java-script/js-language/4-objects/methods-this-chaining/","summary":"\u003cp\u003eConcepts of \u003cstrong\u003emethods\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003ethis\u003c/code\u003e\u003c/strong\u003e, and \u003cstrong\u003echaining\u003c/strong\u003e in JavaScript:\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"methods\"\u003e\u003cstrong\u003eMethods\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMethod\u003c/strong\u003e: A method is a function that is a property of an object. Methods allow objects to \u0026ldquo;act\u0026rdquo; in a specific way by performing actions based on the object’s properties or behavior.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;John\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003esayHi\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esayHi\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Hello\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003ccode\u003esayHi\u003c/code\u003e is a method of the \u003ccode\u003euser\u003c/code\u003e object. When \u003ccode\u003euser.sayHi()\u003c/code\u003e is called, it alerts \u003ccode\u003e\u0026quot;Hello\u0026quot;\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Methods, this, Chaining"},{"content":"Constructor Functions and the new Operator Constructor functions are used to create multiple similar objects with the same properties and methods, without having to manually repeat the object structure each time.\nBy using a constructor function, you define the blueprint for creating objects, allowing you to instantiate them efficiently using the new operator.\nThe regular {...} syntax allows us to create one object.\nUsing constructor functions and the \u0026quot;new\u0026quot; operator, many similar objects, like multiple users or menu items can be made.\nConstructor Function Basics Naming Convention: Constructor functions should be named with an uppercase letter to distinguish them from regular functions. Usage with new: Constructor functions are meant to be invoked with the new operator. function User(name) { this.name = name; this.isAdmin = false; } // constructor function let person = new User(\u0026#34;Jack\u0026#34;); //constructor console.log(person.name); // \u0026#34;Jack\u0026#34; console.log(person.isAdmin); // false When new User(\u0026quot;Jack\u0026quot;) is called: A new object is created. The this keyword inside the constructor function refers to that new object. The constructor function runs, setting the properties and methods on the new object. The new object is returned. Creating Multiple Similar Objects A constructor function allows you to create multiple similar objects by defining the properties and methods that each object will share. For instance, you can create multiple users using the same constructor function.\nfunction User(name) { this.name = name; this.isAdmin = false; } let user1 = new User(\u0026#34;Jack\u0026#34;); let user2 = new User(\u0026#34;Anna\u0026#34;); console.log(user1.name); // \u0026#34;Jack\u0026#34; console.log(user2.name); // \u0026#34;Anna\u0026#34; In this case, user1 and user2 are separate objects with the same constructor (User), but they have different values for the name property.\nConstructor vs Regular Function for Object Creation Before the introduction of constructor functions, people would use regular functions to create objects manually:\nfunction createPerson(name) { const obj = {}; // create object obj.name = name; // add property obj.introduceSelf = function() { // add method console.log(`Hi! I\u0026#39;m ${this.name}`); }; return obj; } const frank = createPerson(\u0026#34;Frank\u0026#34;); frank.introduceSelf(); // \u0026#34;Hi! I\u0026#39;m Frank.\u0026#34; This approach works but is less efficient compared to using a constructor function. If multiple objects need the same introduceSelf method, it will be recreated each time an object is created. This can lead to inefficient memory usage.\nBenefits of Constructor Functions By using a constructor function, you can define methods that are shared by all instances, without having to recreate them for each individual object. Constructor functions allow you to define the shape of the object and instantiate multiple objects with the same properties and methods.\nfunction Person(name) { this.name = name; this.introduceSelf = function() { console.log(`Hi! I\u0026#39;m ${this.name}.`); }; } const frankie = new Person(\u0026#34;Frankie\u0026#34;); frankie.introduceSelf(); // \u0026#34;Hi! I\u0026#39;m Frankie.\u0026#34; Here, Person acts as a blueprint for creating new objects, each with their own name property and introduceSelf method.\nUnderstanding this in Constructors Inside a constructor function, the this keyword refers to the newly created object. You can use this to set properties and methods for that object.\nFor example:\nfunction Person(name) { this.name = name; this.introduceSelf = function() { console.log(`Hi! I\u0026#39;m ${this.name}.`); }; } const john = new Person(\u0026#34;John\u0026#34;); john.introduceSelf(); // \u0026#34;Hi! I\u0026#39;m John.\u0026#34; When new Person(\u0026quot;John\u0026quot;) is called, it creates a new object, and inside the constructor, this refers to that object. The properties and methods (name and introduceSelf) are assigned to that new object. Constructor for Accumulator Example Here’s an example of a constructor that uses a method to accumulate values:\nfunction Accumulator(startingValue) { this.value = startingValue; this.read = function() { this.value += +prompt(\u0026#39;How much to add?\u0026#39;, 0); }; } let accumulator = new Accumulator(1); accumulator.read(); alert(accumulator.value); // Displays the new accumulated value this.value is initialized to the startingValue. The read() method prompts the user for a value and adds it to this.value. Each time a new instance of Accumulator is created, the value property and read method are set on the object, allowing for different instances with their own accumulated values.\nObjects Are Everywhere JavaScript is an object-oriented language, and even primitive types like strings, numbers, and arrays are automatically wrapped in their respective object types. This allows them to have methods and properties associated with them.\nFor example, strings are objects, and they have methods like .split():\nlet myString = \u0026#34;apple,banana,orange\u0026#34;; let fruits = myString.split(\u0026#34;,\u0026#34;); console.log(fruits); // [\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;orange\u0026#34;] Here, myString is treated as a String object, and the .split() method is available because strings in JavaScript are instances of the String object.\nAdditional Features of Objects Optional Chaining (?.) The optional chaining operator (?.) allows you to access deeply nested properties of an object without worrying about whether intermediate properties exist. If any property in the chain is null or undefined, it safely returns undefined instead of throwing an error.\nExample:\nlet user = { name: \u0026#34;Alice\u0026#34;, address: { city: \u0026#34;New York\u0026#34; } }; console.log(user.address?.city); // \u0026#34;New York\u0026#34; console.log(user.contact?.phone); // undefined (doesn\u0026#39;t throw an error) Symbol Type as Property Key Symbol is a unique and immutable data type that can be used as a property key in objects. It is often used to create private object properties.\nconst sym = Symbol(\u0026#39;unique\u0026#39;); let obj = { [sym]: \u0026#39;value\u0026#39; }; console.log(obj[sym]); // \u0026#34;value\u0026#34; Each Symbol is unique, so even if two symbols have the same description, they will not be equal.\nObject to Primitive Conversion JavaScript allows objects to be converted into primitive values when needed. This is achieved via special methods like valueOf() and toString().\nExample:\nlet obj = { value: 5, valueOf() { return this.value; } }; console.log(obj + 1); // 6, `obj.valueOf()` is called valueOf() is used when an object needs to be converted to a number. toString() is used for string conversions. Optional Chaining \u0026lsquo;?\u0026rsquo; Feature to access properties without throwing error of it doesn\u0026rsquo;t exist. use when needed for \u0026rsquo;non existing user problem\u0026rsquo;\nSymbol type as property key\nObject to primitive conversion\nSummary Constructor Functions: Used to create multiple instances of similar objects. These functions define the properties and methods shared across all objects. this in Constructors: Refers to the newly created object inside a constructor, allowing you to set its properties and methods. Methods and Properties: By using constructors, you can define shared methods for all instances of the object. Additional Features: Optional chaining (?.), Symbols as property keys, and object-to-primitive conversion methods are important features when working with JavaScript objects. ","date":"2024-11-09","id":72,"permalink":"/personal-site/docs/java-script/js-language/4-objects/constructor-new/","summary":"\u003ch3 id=\"constructor-functions-and-the-new-operator\"\u003eConstructor Functions and the \u003ccode\u003enew\u003c/code\u003e Operator\u003c/h3\u003e\n\u003cp\u003eConstructor functions are used to create multiple similar objects with the same properties and methods, without having to manually repeat the object structure each time.\u003c/p\u003e","tags":[],"title":"Constructor new"},{"content":"JavaScript arrays are a special type of object used to store ordered sequences of values. Unlike regular objects, which use named keys (like strings), arrays use numeric indexes.\nCreating Arrays 1. Empty Arrays You can create an empty array using either of these two methods:\nlet arr = new Array(); // Using the Array constructor let arr = []; // Using array literal (preferred) 2. Array with Values An array can be initialized with values inside square brackets ([]):\nlet listOfNumbers = [2, 3, 4, 5]; console.log(listOfNumbers[2]); // 4 (indexing starts from 0) console.log(listOfNumbers[2 - 1]); // 3 (same as listOfNumbers[1]) Array elements can be accessed using their index values. Arrays are zero-indexed. You can also use arithmetic expressions as indices.\nconst cars = [\u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;Tata\u0026#34;]; let car = cars[0]; // \u0026#34;Volvo\u0026#34; const cars = []; cars[0] = \u0026#34;Volvo\u0026#34;; cars[1] = \u0026#39;BMW\u0026#39;;\rAssociative Arrays in JavaScript Although arrays in JavaScript are indexed by numbers, you can technically assign a value to a string index.\nArrays with named indexes are called associative arrays or hashes, but JavaScript does not support arrays with named indexes, it always uses Numbered Index.\nIf named indexes are used, js converts array to an object. Then array methods and properties will produce incorrect result.\nExample of incorrect usage (for associative arrays):\nconst person = []; person[\u0026#34;first\u0026#34;] = \u0026#34;John\u0026#34;; person[\u0026#34;last\u0026#34;] = \u0026#34;Doe\u0026#34;; console.log(person.length); // 0 (wrong, since it\u0026#39;s an object now) console.log(person[\u0026#34;first\u0026#34;]); // \u0026#34;John\u0026#34; console.log(person[0]); // undefined If you need associative arrays, consider using an object instead.\nArrays of Objects, Arrays in Arrays, and Functions in Arrays Arrays in JavaScript can contain any type of data, including objects, functions, and even other arrays.\n1. Array of Objects You can store objects inside an array, which is a common pattern for structured data.\nlet journal = [ {event: [\u0026#34;work\u0026#34;, \u0026#34;touched tree\u0026#34;, \u0026#34;pizza\u0026#34;, \u0026#34;running\u0026#34;], squirrel: false}, {event: [\u0026#34;work\u0026#34;, \u0026#34;ice cream\u0026#34;, \u0026#34;lasagna\u0026#34;], squirrel: false}, {event: [\u0026#34;weekend\u0026#34;, \u0026#34;cycling\u0026#34;, \u0026#34;peanuts\u0026#34;], squirrel: true} ];\r2. Array of Functions You can also store functions within an array:\nlet functionsArray = [ function() { console.log(\u0026#34;Function 1\u0026#34;); }, function() { console.log(\u0026#34;Function 2\u0026#34;); }, function() { console.log(\u0026#34;Function 3\u0026#34;); } ];\r3. Arrays within Arrays Arrays can even contain other arrays, creating nested structures:\nlet arrayOfArrays = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ];\rlength Property The length property of an array returns the number of elements in the array. It’s important to note that length is not zero-based. When using [] the expression between the brackets are evaluated to get the property name.\nconst fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;]; console.log(fruits.length); // 3 You can also use length to access the last element of an array:\nlet fruit = fruits[fruits.length - 1]; // \u0026#34;Mango\u0026#34; Looping Through Arrays 1. for Loop A traditional for loop is a common way to iterate through an array:\nfor (let i = 0; i \u0026lt; journal.length; i++) { let entry = journal[i]; console.log(entry); // Do something with each entry }\r2. for..of Loop The for..of loop is a simpler way to iterate over array elements. It gives you the value directly without needing the index.\nfor (let entry of journal) { console.log(`${entry.event.length} events.`); // logs the number of events }\r3. forEach() Method The forEach() method allows you to run a function for each item in the array:\narr.forEach(function(item, index, array) { // do something with item });\r[\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;].forEach(alert); // This will alert each fruit in the array const fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.forEach(alert);\r// making a list html item for each item const fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;]; function myFunction(value) { text += \u0026#34;\u0026lt;li\u0026gt;\u0026#34; + value + \u0026#34;\u0026lt;/li\u0026gt;\u0026#34;; } fruits.forEach(myFunction);\rYou can also access the current index and the full array within the callback function:\nfruits.forEach((item, index, array) =\u0026gt; { alert(`${item} is at index ${index} in ${array}`); });\rUsing Functions to Manipulate Array Data JavaScript provides several ways to work with arrays and manipulate their data.\n1. Function for Adding Entries to an Array If you want to simplify adding entries to an array of objects, you can use a function:\nlet journal = []; function addEntry(events, squirrel) { journal.push({events, squirrel}); } addEntry([\u0026#34;work\u0026#34;, \u0026#34;touched tree\u0026#34;, \u0026#34;pizza\u0026#34;, \u0026#34;running\u0026#34;], false); addEntry([\u0026#34;work\u0026#34;, \u0026#34;ice cream\u0026#34;, \u0026#34;lasagna\u0026#34;], false); addEntry([\u0026#34;weekend\u0026#34;, \u0026#34;cycling\u0026#34;, \u0026#34;peanuts\u0026#34;], true);\rThis is a shorthand for creating an object with properties named events and squirrel. Since the property names match the argument names, JavaScript will automatically assign them.\nSummary of Key Points Arrays in JavaScript are ordered lists of values, indexed by numbers. Arrays are not associative arrays (i.e., they cannot use string keys without being converted into objects). You can create arrays using both the array literal ([]) and the Array constructor (new Array()). Array properties and methods like length, forEach(), and push() are essential for manipulating data. JavaScript arrays can store different data types, including objects, functions, and even other arrays. Iterating through arrays can be done with for loops, for..of, and forEach() methods, each offering different levels of control and readability. ","date":"2024-11-09","id":73,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/array/","summary":"\u003cp\u003eJavaScript arrays are a special type of object used to store ordered sequences of values.   Unlike regular objects, which use named keys (like strings), arrays use numeric indexes.\u003c/p\u003e","tags":[],"title":"Array"},{"content":"","date":"2024-11-09","id":74,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/","summary":"","tags":[],"title":"Arrays"},{"content":"Basic Array Methods Properties that contain functions are called methods of the value they belong to, as in .toUpperCase is a method of a string.\nlength // gives lengt of array at() // getting element with index // String to array with delimeted split() join() toString() // array to a comma seperated string concat() // new array including other arrays reverse() // reverses order of array // Add remove items // to remove and add to end pop() push() // to remove and ad to beginning shift() unshift()\tdelete() // makes things undefined // extracting parts of array slice() // make new subarray splice() // used to insert, remove, replace elements toSpliced() // searching in array indexOf() lastIndexOf() includes() find() findIndex() findLastIndex() copyWithin() // copy elements to other positions in array flat() flatMap() // flaten multidimensional array arr.length arr.at(pos) at() method returns an indexed element from an array. similar to [] but [] does not allow getting the last index using [-1], since [] is used for both objects and arrays, obj[-1] refers to key -1, not last property of object. at() was introduced to solve this problem.\nconst fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;]; let fruit = fruits.at(2); // Mango let fruit = fruits[2]; // Mango alert( fruits[-1] ); // error alert( fruits.at(-1) ); // Mango split and join str.split(delim) comma-delimited string of receivers: John, Pete, Mary To get an array of names from this string.\nsplit() splits the string into an array by the given delimiter delim.\nlet names = `John, Pete, Mary`; let arr = names.split(\u0026#39;, \u0026#39;); for (let name of arr) { alert( \u0026#39;A message to ${name}.\u0026#39;); }\rThe split method has an optional second numeric argument – a limit on the array length. If it is provided, then the extra elements are ignored.\nSplit into letters\nlet str = \u0026#39;test\u0026#39;; alert( str.split(\u0026#39;\u0026#39;) ); // t, e, s, t arr.join(glue) The call arr.join(glue) does the reverse to split. It creates a string of arr items joined by glue between them.\njoin() method allows joining all array elements into a string similar to toString but the separator can be assigned.\nconst arr = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;]; let str = arr.join(\u0026#34; * \u0026#34;); // Bannana * Orange * Mango let str = arr.join(\u0026#39;;\u0026#39;); // glue the array into string using string using ; alert(str); // Bannana;Orange;Mango toString() Converting an Array to String of comma separated values. This is an automatic process when an outputting an array. All JavaScript objects have toString() method.\nconst fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;]; fruits.toString(); // Bannana,Orange,Mango alert(fruits) // same as above concat() arr.concat creates a new array that includes values from other arrays and additional items.\narr.cocat(arg1, arg2...)\raccepts any number of arguments - either arrays or values.\nUsed to create a new array by merging (concatenating) existing arrays and returns a new array without changing the old ones.\nconst myGirls = [\u0026#34;Cel\u0026#34;, \u0026#34;Lon\u0026#34;]; const myBoys = [\u0026#34;Em\u0026#34;, \u0026#34;Lin\u0026#34;]; const myPets = [\u0026#34;cat\u0026#34;, \u0026#39;Dog\u0026#39;]; const myChildren = myGirls.concat(myBoys); const family = myGirls.concat(myBoys, myPets); const myKids = myGirls.concat(\u0026#34;daisy\u0026#34;);\rIt can take strings also as arguments. Normally, it only copies elements from arrays. Other objects, even if they look like arrays, are added as a whole.\narr.reverse() The method arr.reverse reverses the order of elements in arr. It also returns the array after the reversal.\nlet arr = [1, 2, 3, 4, 5]; arr.reverse(); alert( arr ); // 5, 4, 3, 2, 1 Add / remove items push(...items) pop() The push method adds value to the end of an array, also returns new array length. The pop method removes the last value in the array and returns it. These are names used for stack data structure.\nlet sequence = [1, 2, 3]; sequence.push(4); sequence.push(\u0026#34;Banana\u0026#34;); console.log(sequence); // [1, 2, 3, 4, Banana] let length = sequence.push(\u0026#34;Mango\u0026#34;); // 6 console.log(sequence.pop()); // Mango let num = sequence.pop(); // Bannana sequence.pop();\runshift(...items) and shift() For adding and removing things at the start of an array. shift() method removes the first array element and shifts all other elements to a lower index. shift() returns the value that was shifted out.\nunshift() adds element to the beginning of an array and unshifts older elements. unshift() returns the new array length.\nconst fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;, \u0026#34;Kiwi\u0026#34;]; fruits.shift(); // removes Banana let fruit = fruits.shift(); // Orange fruits.unshift(\u0026#34;Lemon\u0026#34;); // adds lemon at front let num = fruits.unshift(\u0026#34;Lemon\u0026#34;); // 5 A To do list Managing a queue of stack\nlet todoList = []; function remember(task) { todoList.push(task); } function getTask() { return todoList.shift(); } function rememberUrgently(task) { todoList.unshift(task); }\rdelete() Using delete leaves undefined holes in the array. better to use pop or shift\nExtracting parts of array slice() arr.slice([start], [end])\rslice returns a new array copying to it all the elements from start to end (not including end but up to end). Doesn\u0026rsquo;t remove any element from original. makes a sub array. Both start and end can be negative, in that case position from the array end is assumed. When end index is not given, all elements after the start index is taken.\nconst fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;] // copy from index 1 upto index 3, i.e 1,2 const citrus = fruits.slice(1,3); // [Orange, Lemon] // copy from index 2 till the end, including end const citrus = fruits.slice(2); // [Lemon, apple, mango] // copy from index 2 upto 4, 2,3 console.log([0, 1, 2, 3, 4].slice(2, 4)); // [2, 3] // copy from index 2 till end console.log([0, 1, 2, 3, 4].slice(2)); // [2, 3, 4] let arr = [ \u0026#34;t\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;s\u0026#34;, \u0026#34;t\u0026#34;] // copy from -2 till end aler( arr.slice(-2) ); // s, t alert( arr.slice(1, 3) ); // e, s splice() Used to Remove elements, Add new items to an array and Returns an array with deleted items (if any)\narr.splice(start[, deleteCount, elem1, ..., eleN])\rIt modifies arr starting from the index start: removes deleteCount elements and then inserts elem1, ..., elemN at their place. Returns the array of removed elements.\nUsing for deletion\nlet arr = [\u0026#34;I\u0026#34;, \u0026#34;study\u0026#34;, \u0026#34;JS\u0026#34;]; // from index 1 remove 1 element arr.splice(1, 1); alert( arr ); // [\u0026#34;I\u0026#34;, \u0026#34;JS\u0026#34;] Using for deletion and replacing\nlet arr = [\u0026#34;I\u0026#34;, \u0026#34;study\u0026#34;, \u0026#34;JS\u0026#34;, \u0026#34;right\u0026#34;, \u0026#34;Now\u0026#34;]; // remove starting from index 0, 3 elements and replace them with these arr.splice( 0, 3, \u0026#34;Let\u0026#39;s\u0026#34;, \u0026#34;Dance\u0026#34;); alert(arr) // [\u0026#34;Let\u0026#39;s\u0026#34;, \u0026#34;Dance\u0026#34;, \u0026#34;right\u0026#34;, \u0026#34;Now\u0026#34;] Returning Deleted Items\nlet arr = [\u0026#34;I\u0026#34;, \u0026#34;study\u0026#34;, \u0026#34;JS\u0026#34;, \u0026#34;right\u0026#34;, \u0026#34;Now\u0026#34;]; // remove starting from index 0, 2 elements. arr.splice( 0, 2); alert(arr) // [\u0026#34;I\u0026#34;, \u0026#34;study\u0026#34;] Inserting without removing elements\nlet arr = [\u0026#34;I\u0026#34;, \u0026#34;study\u0026#34;, \u0026#34;JS\u0026#34;, \u0026#34;right\u0026#34;, \u0026#34;Now\u0026#34;]; // starting from index 2, delete nothing, inser two elements there arr.splice(2, 0, \u0026#34;right\u0026#34;, \u0026#34;Now\u0026#34;) alert( arr); // [\u0026#34;I\u0026#34;, \u0026#34;study\u0026#34;, \u0026#34;JS\u0026#34;, \u0026#34;right\u0026#34;, \u0026#34;Now\u0026#34;] Negative index is allowed to count from the end\nlet arr = [1, 2, 5]; // from index -1 (onestep from the end), delete nothing, insert 3, 4 arr.splice(-1, 0, 3, 4); // [1,2,3,4,5] The first parameter defines the index in which the new element should be added (spliced). The second parameter defines how many elements should be removed. The rest of the parameters define the new elements to be added.\nconst fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; // starting from index 2, remove nothing, add these two fruits.splice(2, 0, \u0026#34;Lemon\u0026#34;, \u0026#34;Kiwi\u0026#34;); // [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#39;Lemon\u0026#39;, \u0026#39;kiwi\u0026#39; \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;] const fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; // starting from index 2, remove 2, add these two fruits.splice(2, 2, \u0026#34;Lemon\u0026#34;, \u0026#34;kiwi\u0026#34;); // [Banana, Orange, Lemon, Kiwi] // removed items [apple, mango] finding range in place\n// iterate using for loop // if any one is true remove that one lement from that index // to avoid skipping an element as one element gets moved to left, move the pointer back function findInRange(arr, a, b) { for(let i =0; i\u0026lt;arr.length; i++) { if(arr[i] \u0026lt;a || arr[i] \u0026gt;b) { arr.splice(i, 1); i--; } } } // or do reverse looping using negative index function findRangeInPlace(arr, a, b) { for (let i = arr.length - 1; i \u0026gt;= 0; i--) { if (arr[i] \u0026lt; a || arr[i] \u0026gt; b) { arr.splice(i, 1); } } } let arr = [5, 3, 8, 1]; findRangeInPlace(arr, 1, 4); console.log(arr); // Output: [3, 1] arr.toSpliced() arr.splice(start[, deleteCount, elem1, ..., eleN])\rIs a safe way to splice an array without altering the original array. It creates a new array without changing the old one.\nconst fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; const spliced = fruits.toSpliced (2,0,\u0026#34;Lemon\u0026#34;,\u0026#34;Kiwi\u0026#34;); // [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#39;Lemon\u0026#39;, \u0026#39;kiwi\u0026#39; \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;] Searching in array indexOf() lastIndexOf() includes() Usually these methods are used with only one argument, the item to be found.\narr.indexOf(item, from)\rindexOf searches through the array for item starting from index from to end and returns the index at which the value was found. Otherwise -1 if not found.\nlastIndexOf searches from the end / right to left.\nconsole.log([1, 2, 3, 2, 1].indexOf(2)); // 1 console.log([1, 2, 3, 2, 1].lastIndexOf(2)); // 3 alert ( arr.indexOf(null) ); // -1 indexOf uses the strict equality === for comparison. So, if we look for false, it finds exactly false and not the zero.\nincludes() is preferred to check existence of item\narr.includes(item, from)\rsearches through the array for item starting from index from to end, and returns the true if found. It handles NaN properly.\nconst arr = [NaN]; alert( arr.indexOf(NaN) ); // -1 alert( arr.includes(NaN)); // true find() findIndex() findLastIndex() In an array of objects, to find an object with a specific condition.\nlet result = arr.find(function(item, index, array) { // if true is returned, item is returned and iteration is stopped // for falsy scenario returns undefined });\rlet users = [ {id:1, name: \u0026#34;John\u0026#34;}, {id:2, name: \u0026#34;Pete\u0026#34;}, {id:3, name: \u0026#34;John\u0026#34;}, ]; let user = users.find(item =\u0026gt; item.id == 1); alert(users.name); // John alert(users.findIndex(user =\u0026gt; user.name == \u0026#34;John\u0026#34;)); // 0 alert(users.findLastIndex(user =\u0026gt; user.name == \u0026#34;John\u0026#34;)); // 2 arr.findIndex() has the same syntax but returns the index where the element was found instead of the element itself. -1 if noting is found. arr.lastIndexOf() searches from right to left.\ncopyWithin() arr.copyWithin(target, start, end) – copies its elements from position start till position end into itself, at position target (overwrites existing).\narr.copyWithin(target, start, end)\rCopies array elements to another position in an array by overwriting the existing value.\ncopies its elements from position start till position end into itself, at position target (overwrites existing).\nIt cannot add items to an array so does not change the length of the array.\nconst fruits = [\u0026#34;Bannana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Mango\u0026#34;, \u0026#34;Kiwi\u0026#34;]; fruits.copyWithin(2,0); // copy to index[2], all elements from [0] // Bannana, Orange, Bannana, Orange fruits.copyWithin(2,0,2); //copy to index 2, the elements from 0 to 2 arr.flat(depth)/arr.flatMap(fn) create a new flat array from a multidimensional array.\nflat(depth) Creates a new flat array from a multidimensional array. The flat method creates a new array with sub-array elements concatenated to a specified depth.\nconst myArray = [ [1,2], [3,4], [5,6] ]; const newArray = myArray.flat(); // 1,2,3,4,5,6 flatMap(fn) it first maps all elements of an array and then creates a new array by flattening the array.\nconst myArray = [1,2,3,4,5,6]; const newArray = myArray.flatMap( x =\u0026gt; [x, x*10] ); // [1, 10, 2, 20, 3, 30, 4, 40, 5, 50, 6, 60] These methods are the most used ones, they cover 99% of use cases. But there are few others:\narr.some(fn) / arr.every(fn) check the array. The function fn is called on each element of the array similar to map. If any/all results are true, returns true, otherwise false.\nThese methods behave sort of like || and \u0026amp;\u0026amp; operators: if fn returns a truthy value, arr.some() immediately returns true and stops iterating over the rest of items; if fn returns a falsy value, arr.every() immediately returns false and stops iterating over the rest of items as well.\narr.fill(value, start, end) – fills the array with repeating value from index start to end.\nmanual.\n","date":"2024-11-09","id":75,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/array-methods/","summary":"\u003ch1 id=\"basic-array-methods\"\u003eBasic Array Methods\u003c/h1\u003e\n\u003cp\u003eProperties that contain functions are called methods of the value they belong to,\nas in \u003ccode\u003e.toUpperCase\u003c/code\u003e is a method of a string.\u003c/p\u003e","tags":[],"title":"Array Methods"},{"content":"filter() Method The filter() method is similar to map(), as it iterates over the array and applies a callback function on each item. However, instead of transforming the array elements, filter() returns a new array with only those elements for which the callback function returns true.\nThe callback function passed to filter() should return a boolean value (true or false). If true is returned, the element is included in the new array. If false is returned, the element is excluded from the new array. The method works without modifying the original array. This is a pure function, just like forEach(), as it does not alter the original data.\nlet results = arr.filter(function(item, index, array) { // returns true or false });\ritem: The current element being processed in the array. index: The index of the current element. array: The array filter() was called on. Example 1: Filter strings that start with \u0026ldquo;L\u0026rdquo; const cats = [\u0026#34;Lepord\u0026#34;, \u0026#34;Jaguar\u0026#34;, \u0026#34;Tiger\u0026#34;, \u0026#34;Lion\u0026#34;]; function lCat(cat) { return cat.startsWith(\u0026#34;L\u0026#34;); } const newList = cats.filter(lCat); console.log(newList); // [\u0026#34;Lepord\u0026#34;, \u0026#34;Lion\u0026#34;] Example 2: Filter out odd numbers const arr = [1, 2, 3, 4, 5]; function isOdd(num) { return num % 2 !== 0; } const oddNums = arr.filter(isOdd); console.log(oddNums); // [1, 3, 5] Example 3: Filter with a callback directly let users = [ {id: 1, name: \u0026#34;John\u0026#34;}, {id: 2, name: \u0026#34;Pete\u0026#34;}, {id: 3, name: \u0026#34;John\u0026#34;} ]; let someUser = users.filter(item =\u0026gt; item.id \u0026lt; 3); console.log(someUser.length); // 2 Example 4: Filter using an object method You can also use a method from an object to filter an array:\nlet army = { minAge: 18, maxAge: 27, canJoin(user) { return user.age \u0026gt;= this.minAge \u0026amp;\u0026amp; user.age \u0026lt; this.maxAge; } }; let users = [{age: 16}, {age: 20}, {age: 23}, {age: 30}]; let soldiers = users.filter(user =\u0026gt; army.canJoin(user)); alert(soldiers.length); // 2 alert(soldiers[0].age); // 20 alert(soldiers[1].age); // 23 You can also use filter() with a method like this:\nlet soldiers = users.filter(army.canJoin, army);\rExample 5: Filter values in a specified range You can filter values within a specific range using filter():\nfunction filterRange(arr, a, b) { return arr.filter(item =\u0026gt; item \u0026gt;= a \u0026amp;\u0026amp; item \u0026lt;= b); } let arr = [5, 3, 8, 1]; let filtered = filterRange(arr, 1, 4); console.log(filtered); // [3, 1] Key Points filter() returns a new array containing only elements that pass the test defined in the callback function. The original array remains unmodified. It is a pure function, meaning no side effects occur. You can use filter() to search for multiple matches in an array. If you need only the first matching element, use find() instead. ","date":"2024-11-09","id":76,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/filter-method/","summary":"\u003ch3 id=\"filter-method\"\u003e\u003ccode\u003efilter()\u003c/code\u003e Method\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003efilter()\u003c/code\u003e method is similar to \u003ccode\u003emap()\u003c/code\u003e, as it iterates over the array and applies a callback function on each item. However, instead of transforming the array elements, \u003ccode\u003efilter()\u003c/code\u003e returns a \u003cstrong\u003enew array\u003c/strong\u003e with only those elements for which the callback function returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Filter Method"},{"content":"Transforming Arrays with map() The map() method allows you to transform an array by applying a callback function to each element. This method returns a new array where each element has been transformed based on the function provided, without modifying the original array.\nlet result = arr.map(function(item, index, array) { // returns the transformed value instead of item });\rmap() expects a callback as an argument, which means passing a function as a argument.\nitem: The current element being processed. index: The index of the current element. array: The array map() was called on. Example 1: Add 1 to each number in an array The map() method is commonly used when you need to transform an array by applying a function to each element. For instance, if we want to add 1 to each element of an array:\nconst arr = [1, 2, 3, 4, 5]; function addOne(num) { return num + 1; } const mappedArr = arr.map(addOne); console.log(mappedArr); // [2, 3, 4, 5, 6] Alternatively, you can use an inline arrow function:\nconst mappedArr = arr.map(num =\u0026gt; num + 1);\rThis creates a new array where each value has been incremented by 1, while the original array remains unchanged.\nExample 2: Map to lengths of strings You can also use map() to derive new data from an existing array. For example, if you want an array of string lengths:\nlet names = [\u0026#34;Bilbo\u0026#34;, \u0026#34;Gandalf\u0026#34;, \u0026#34;Nazgul\u0026#34;]; let lengths = names.map(item =\u0026gt; item.length); console.log(lengths); // [5, 7, 6] Here, map() iterates over the names array and returns the length of each string.\nExample 3: Transforming Strings to Uppercase The map() function can also be used to modify strings. For example, converting all the cat names to uppercase:\nconst cats = [\u0026#34;Leopard\u0026#34;, \u0026#34;Jaguar\u0026#34;, \u0026#34;Tiger\u0026#34;, \u0026#34;Lion\u0026#34;]; function toUpper(string) { return string.toUpperCase(); } const upperCats = cats.map(toUpper); console.log(upperCats); // [\u0026#34;LEOPARD\u0026#34;, \u0026#34;JAGUAR\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;] In this case, the toUpper() function is applied to each string in the cats array, returning a new array where all strings are capitalized.\nExample 4: Map to Names You can use map() to extract specific properties from objects in an array. For example, if you have an array of user objects and want to get an array of just the names:\nlet john = { name: \u0026#34;John\u0026#34;, age: 25}; let pete = { name: \u0026#34;Pete\u0026#34;, age: 30}; let mary = { name: \u0026#34;Mary\u0026#34;, age: 28}; let users = [john, pete, mary]; let names = users.map(user =\u0026gt; user.name); console.log(names); // [\u0026#34;John\u0026#34;, \u0026#34;Pete\u0026#34;, \u0026#34;Mary\u0026#34;] Example 5: Map to Objects with New Properties If you need to transform an array of objects into a new array with different properties, map() is useful. For example, you can combine a user\u0026rsquo;s name and surname into a fullName:\nlet john = { name: \u0026#34;John\u0026#34;, surname: \u0026#34;Smith\u0026#34;, id: 1}; let pete = { name: \u0026#34;Pete\u0026#34;, surname: \u0026#34;Hunt\u0026#34;, id: 2}; let mary = { name: \u0026#34;Mary\u0026#34;, surname: \u0026#34;Key\u0026#34;, id: 3}; let users = [john, pete, mary]; let usersMapped = users.map(user =\u0026gt; ({ fullName: `${user.name} ${user.surname}`, id: user.id })); console.log(usersMapped); // [ // { fullName: \u0026#34;John Smith\u0026#34;, id: 1 }, // { fullName: \u0026#34;Pete Hunt\u0026#34;, id: 2 }, // { fullName: \u0026#34;Mary Key\u0026#34;, id: 3 } // ] there are two arrow functions: without body value =\u0026gt; expr and with body value =\u0026gt; {...}. Here JavaScript would treat { as the start of function body, not the start of the object. The workaround is to wrap them in the “normal” brackets.\nlet usersMapped = users.map(user =\u0026gt; ({ fullName: `${user.name} ${user.surname}`, id: user.id }));\rExample 6: Convert Kebab-case to camelCase You can also use map() to apply transformations to strings, such as converting from kebab-case to camelCase:\nfunction camelCase(str) { return str.split(\u0026#39;-\u0026#39;) .map((word, index) =\u0026gt; index === 0 ? word : word[0].toUpperCase() + word.slice(1)) .join(\u0026#39;\u0026#39;); } console.log(camelCase(\u0026#34;background-color\u0026#34;)); // \u0026#34;backgroundColor\u0026#34; console.log(camelCase(\u0026#34;list-style-type\u0026#34;)); // \u0026#34;listStyleType\u0026#34; split('-'): Splits the string into an array of words based on the - delimiter. map(): Capitalizes the first letter of each word (except the first one), while keeping the rest of the word in lowercase. join(''): Joins the words back together to form a single string in camelCase. Key Points map() creates a new array and does not modify the original array. It transforms each element in the array according to the function passed to it. It is ideal for tasks like transforming values, extracting properties from objects, or creating new object structures. Unlike forEach(), map() always returns a new array, which can be assigned to a variable or used further in code. ","date":"2024-11-09","id":77,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/map-method/","summary":"\u003ch3 id=\"transforming-arrays-with-map\"\u003eTransforming Arrays with \u003ccode\u003emap()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003emap()\u003c/code\u003e method allows you to transform an array by applying a callback function to each element. This method returns a \u003cstrong\u003enew array\u003c/strong\u003e where each element has been transformed based on the function provided, without modifying the original array.\u003c/p\u003e","tags":[],"title":"Map Method"},{"content":"reduce() Method The reduce() method is one of the most powerful and flexible array methods in JavaScript. It allows you to reduce an array to a single value by iterating over all elements and applying a function that combines each element with an accumulator (the result of previous calculations).\narr.reduce and arr.reduceRight\nlet value = arr.reduce(function(accumulator, currentItem, index, array) { // callback logic }, initialValue);\raccumulator: This is the cumulative value that is returned after each iteration. It’s the value that is built up as the loop progresses. currentItem: The current array item being processed. index (optional): The index of the current item. array (optional): The array reduce() was called on. initialValue: This is the value that accumulator will start with. If not provided, it defaults to the first element of the array. Basic Example: Summing an Array To sum all the elements in an array, we can use reduce():\nconst arr = [1, 2, 3, 4, 5]; let result = arr.reduce((sum, current) =\u0026gt; sum + current, 0); console.log(result); // 15 Here’s how it works:\nsum starts as the initialValue (0). current is each element of the array in turn. On each iteration, sum is updated by adding the current element. The final result after all iterations is 15. If we omit the initialValue:\nlet result = arr.reduce((sum, current) =\u0026gt; sum + current); console.log(result); // 15 In this case, the initialValue is set to the first element (1), and the sum begins from there.\nExample 2: Multiplying All Elements The reduce() method can also be used to perform a cumulative calculation, such as multiplying all the numbers in an array:\nconst arr = [1, 2, 3, 4, 5]; const product = arr.reduce((total, currentItem) =\u0026gt; total * currentItem, 1); console.log(product); // 120 The total starts at 1 (since multiplying by 1 has no effect). Each element of the array is multiplied by the accumulator (total), and the result accumulates through the iterations. Example 3: Creating a Keyed Object from an Array You can use reduce() to transform an array of objects into an object with a custom key. For example, turning an array of users into an object where the id is the key:\nlet users = [ {id: \u0026#34;john\u0026#34;, name: \u0026#34;John Smith\u0026#34;, age: 20}, {id: \u0026#34;ann\u0026#34;, name: \u0026#34;Ann Smith\u0026#34;, age: 24}, {id: \u0026#34;pete\u0026#34;, name: \u0026#34;Pete Peterson\u0026#34;, age: 31} ]; function groupById(array) { return array.reduce((obj, value) =\u0026gt; { obj[value.id] = value; return obj; }, {}); } // obj is accumilator with {} as starting value. // value are objects from the array. // value.id gives id value, to that the object is assigned. // all these are accumilated in {} a object let usersById = groupById(users); console.log(usersById); // { // \u0026#34;john\u0026#34;: {id: \u0026#34;john\u0026#34;, name: \u0026#34;John Smith\u0026#34;, age: 20}, // \u0026#34;ann\u0026#34;: {id: \u0026#34;ann\u0026#34;, name: \u0026#34;Ann Smith\u0026#34;, age: 24}, // \u0026#34;pete\u0026#34;: {id: \u0026#34;pete\u0026#34;, name: \u0026#34;Pete Peterson\u0026#34;, age: 31} // } obj is the accumulator, starting as an empty object {}. On each iteration, the id of each user is used as the key, and the user object is assigned to that key. Example 4: Getting the Average Age of Users We can also use reduce() to calculate the average of a property (e.g., age) in an array of objects:\nlet john = {id: \u0026#34;john\u0026#34;, name: \u0026#34;John Smith\u0026#34;, age: 25}; let ann = {id: \u0026#34;ann\u0026#34;, name: \u0026#34;Ann Smith\u0026#34;, age: 29}; let pete = {id: \u0026#34;pete\u0026#34;, name: \u0026#34;Pete Peterson\u0026#34;, age: 30}; let arr = [john, ann, pete]; function getAverageAge(users) { return users.reduce((acc, user) =\u0026gt; acc + user.age, 0) / users.length; } console.log(getAverageAge(arr)); // 28 acc starts at 0 and accumulates the sum of the age property of each user. After the loop, the total sum is divided by the length of the array (users.length) to compute the average. Example 5: Sum of Tripled Even Numbers You can chain reduce() with other array methods like map() and filter() to perform more complex transformations. For example, summing the tripled values of all even numbers:\nfunction sumOfTripledEvens(array) { return array .filter((num) =\u0026gt; num % 2 === 0) // filter out even numbers .map((num) =\u0026gt; num * 3) // multiply all by 3 .reduce((acc, curr) =\u0026gt; acc + curr); // get total sum } console.log(sumOfTripledEvens([1, 2, 3, 4, 5])); // 30 Here’s the breakdown:\nfilter(): Only even numbers are selected ([2, 4]). map(): Each even number is tripled ([6, 12]). reduce(): The tripled values are summed up (6 + 12 = 30). reduceRight() reduceRight() works similarly to reduce(), but it processes the array from right to left, instead of left to right. It’s useful when the direction of processing matters.\nconst arr = [1, 2, 3, 4, 5]; const result = arr.reduceRight((acc, current) =\u0026gt; acc - current, 0); console.log(result); // 3 In this case, reduceRight() starts from the last element of the array, subtracting each subsequent element from the accumulator.\nKey Points: reduce() reduces an array to a single value by iterating through all elements and accumulating the result. The first argument of the callback is the accumulator (cumulative result), and the second is the current item in the iteration. The initial value is optional; if not provided, it defaults to the first item of the array. Always specify the initial value when the array may be empty or when the calculation requires a specific starting point. reduceRight() is similar to reduce() but processes the array from right to left. ","date":"2024-11-09","id":78,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/reduce-method/","summary":"\u003ch3 id=\"reduce-method\"\u003e\u003ccode\u003ereduce()\u003c/code\u003e Method\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ereduce()\u003c/code\u003e method is one of the most powerful and flexible array methods in JavaScript. It allows you to \u003cstrong\u003ereduce\u003c/strong\u003e an array to a single value by iterating over all elements and applying a function that combines each element with an accumulator (the result of previous calculations).\u003c/p\u003e","tags":[],"title":"Reduce Method"},{"content":"sort() Method The sort() method in JavaScript is used to sort the elements of an array in place, meaning it changes the original array, and also returns the sorted array. By default, it converts array elements to strings and sorts them lexicographically (i.e., alphabetically or numerically in string order).\nsort(fn) arr.sort()\nBasic Usage let arr = [1, 2, 15]; arr.sort(); alert(arr); // \u0026#34;1, 15, 2\u0026#34; In this example, the sort() method sorts the numbers as if they were strings, which is why 1 comes first, then 15, and finally 2. This may not give the expected numeric order.\nSorting with a Custom Comparator To sort the array in a specific numeric or lexicographical order, we can pass a comparison function to sort(). The function should take two parameters (a and b) and return:\nA negative number if a should appear before b. A positive number if a should appear after b. Zero if a and b are considered equal. The arr.sort(fn) method implements a generic sorting algorithm. An optimized quicksort or Timsort most of the time) It will walk the array, compare its elements using the provided function and reorder them, all we need is to provide the fn which does the comparison.\nHere’s an example of sorting numbers in ascending order:\nlet arr = [1, 2, 15]; arr.sort(function(a, b) { return a - b; }); alert(arr); // [1, 2, 15] This comparison function returns the difference a - b, which effectively sorts the numbers numerically.\nShorter Version (Using Arrow Function) arr.sort((a, b) =\u0026gt; a - b); // Sorts in ascending order alert(arr); // [1, 2, 15] For descending order, you can reverse the comparison:\narr.sort((a, b) =\u0026gt; b - a); // Sorts in descending order alert(arr); // [15, 2, 1] Sorting Strings When sorting an array of strings, JavaScript compares them lexicographically (alphabetical order):\nlet arr = [\u0026#39;Banana\u0026#39;, \u0026#39;Apple\u0026#39;, \u0026#39;Orange\u0026#39;]; arr.sort(); alert(arr); // [\u0026#34;Apple\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;] To sort strings in reverse order, just swap a and b in the comparison function:\narr.sort((a, b) =\u0026gt; b.localeCompare(a)); alert(arr); // [\u0026#34;Orange\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Apple\u0026#34;] Copying and Sorting an Array If you need to sort an array but want to keep the original array intact, you can first make a copy of the array using slice() or the spread operator, and then apply sort():\nlet arr = [\u0026#34;HTML\u0026#34;, \u0026#34;JavaScript\u0026#34;, \u0026#34;CSS\u0026#34;]; let sorted = arr.slice().sort(); alert(sorted); // [\u0026#34;CSS\u0026#34;, \u0026#34;HTML\u0026#34;, \u0026#34;JavaScript\u0026#34;] alert(arr); // [\u0026#34;HTML\u0026#34;, \u0026#34;JavaScript\u0026#34;, \u0026#34;CSS\u0026#34;] (original array remains unchanged) Or using the spread operator:\nlet sorted = [...arr].sort();\rSorting Objects by a Property (e.g., Age) If you have an array of objects, and you want to sort by a specific property (e.g., age), you can pass a comparison function that compares the values of that property:\nlet john = {id: \u0026#34;john\u0026#34;, name: \u0026#34;John Smith\u0026#34;, age: 25}; let ann = {id: \u0026#34;ann\u0026#34;, name: \u0026#34;Ann Smith\u0026#34;, age: 29}; let pete = {id: \u0026#34;pete\u0026#34;, name: \u0026#34;Pete Peterson\u0026#34;, age: 30}; let arr = [john, pete, ann]; arr.sort((a, b) =\u0026gt; a.age - b.age); // Sort by age in ascending order alert(arr[0].name); // John Smith alert(arr[1].name); // Ann Smith alert(arr[2].name); // Pete Peterson To sort in descending order, reverse the comparison:\narr.sort((a, b) =\u0026gt; b.age - a.age); // Sort by age in descending order Shuffle an Array Shuffling is a way to randomly reorder the elements of an array. While you could use sort() with a random comparator to shuffle the array, this is not a perfect solution because sort() is not intended for randomness and can lead to non-uniform distributions.\nHere’s how to shuffle using a random comparison function (this is not fully random, but works for simple cases):\nlet arr = [1, 2, 3]; function shuffle(array) { array.sort(() =\u0026gt; Math.random() - 0.5); // Random comparator } shuffle(arr); alert(arr); // Randomly shuffled, e.g., [2, 1, 3] However, a much better approach is to use the Fisher-Yates shuffle algorithm, which is more reliable for shuffling: Fisher-Yates shuffle.\nfunction shuffle(array) { for (let i = array.length - 1; i \u0026gt; 0; i--) { let j = Math.floor(Math.random() * (i + 1)); // Random index between 0 and i [array[i], array[j]] = [array[j], array[i]]; // Swap elements } } let arr = [1, 2, 3]; shuffle(arr); alert(arr); // Array shuffled, e.g., [2, 1, 3] This method works by iterating over the array in reverse order and swapping each element with a randomly selected element from before it.\nSimulating Random Distribution If you want to test how well the Fisher-Yates shuffle distributes the results, you can run the shuffle multiple times and count the results:\nlet count = { \u0026#39;123\u0026#39;: 0, \u0026#39;132\u0026#39;: 0, \u0026#39;213\u0026#39;: 0, \u0026#39;231\u0026#39;: 0, \u0026#39;321\u0026#39;: 0, \u0026#39;312\u0026#39;: 0 }; for (let i = 0; i \u0026lt; 1000000; i++) { let array = [1, 2, 3]; shuffle(array); count[array.join(\u0026#39;\u0026#39;)]++; } for (let key in count) { alert(`${key}: ${count[key]}`); } // 123: 166693 // 132: 166647 // 213: 166628 // 231: 167517 // 312: 166199 // 321: 166316 This will give you an idea of how evenly the shuffle distributes the different possible permutations of the array [1, 2, 3].\nKey Points: sort() sorts arrays in place, meaning it modifies the original array. By default, sort() converts array elements to strings and sorts them lexicographically. To sort numerically, pass a comparison function to sort(). You can sort objects by properties (like age) by providing a custom comparator. Shuffling can be done using the Fisher-Yates shuffle for better randomness compared to using sort() with Math.random(). ","date":"2024-11-09","id":79,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/sort-method/","summary":"\u003ch3 id=\"sort-method\"\u003e\u003ccode\u003esort()\u003c/code\u003e Method\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003esort()\u003c/code\u003e method in JavaScript is used to sort the elements of an array \u003cstrong\u003ein place\u003c/strong\u003e, meaning it changes the original array, and also returns the sorted array. By default, it converts array elements to strings and sorts them lexicographically (i.e., alphabetically or numerically in string order).\u003c/p\u003e","tags":[],"title":"Sort Method"},{"content":"Rest Parameters (...) and Spread Syntax (...) In JavaScript, the rest parameters and spread syntax both use the ... syntax, but they serve different purposes.\nRest Parameters (...args) Rest parameters allow a function to accept an arbitrary number of arguments. When you use ... in the function\u0026rsquo;s parameter list, it collects all the remaining arguments into an array. This is helpful when you don\u0026rsquo;t know exactly how many arguments will be passed to a function.\nExample of Rest Parameters function sumAll(...args) { let sum = 0; for (let arg of args) { sum += arg; } return sum; } console.log(sumAll(1)); // 1 console.log(sumAll(1, 2, 3, 4)); // 10 console.log(sumAll(5, 10, 15, 20, 25)); // 75 The ...args syntax collects all arguments passed to sumAll into the args array. The function then iterates over the args array, summing the numbers. Rest Parameters with Other Parameters You can also combine regular parameters with rest parameters. The rest parameter must always be the last in the function\u0026rsquo;s argument list.\nfunction showName(first, last, ...titles) { console.log(first + \u0026#34; \u0026#34; + last); console.log(titles); // Titles as an array } showName(\u0026#34;Julius\u0026#34;, \u0026#34;Caesar\u0026#34;, \u0026#34;Consul\u0026#34;, \u0026#34;Imperator\u0026#34;); // Output: // Julius Caesar // [\u0026#34;Consul\u0026#34;, \u0026#34;Imperator\u0026#34;] first and last are regular parameters. ...titles collects the rest of the arguments into an array. function max(...numbers) { let result = -Infinity; for (let number of numbers) { if (number \u0026gt; result) result = number; } return result; } console.log(max(4, 1, 9, -2)); // 9 // using spread syntax in finction call let numbers = [5, 1, 7]; console.log(max(...numbers)); // 7 console.log(max(9, ...numbers, 2));\rSpread Syntax (...) Spread syntax, on the other hand, is used to expand an array or iterable object into individual elements. It \u0026ldquo;spreads\u0026rdquo; the elements of an array (or any iterable, like a string) into places where multiple arguments or elements are expected.\nExample of Spread Syntax in Function Calls A common use case is passing an array of arguments to a function that expects individual arguments. For example, Math.max expects multiple arguments, but if you have an array, you can use spread to pass the array elements as individual arguments.\n// function call, as function argument myFunction(a, ...iterableObj, b); // making an array, array literal [1, ...iterableObj, \u0026#39;4\u0026#39;, \u0026#39;five\u0026#39;, 6]; // making an object, object literal {...obj, key: \u0026#39;value\u0026#39;}\rlet arr = [3, 5, 1]; console.log(Math.max(...arr)); // 5 alert( Math.max(arr) ); // NaN Without spread syntax, Math.max(arr) would not work because Math.max expects individual arguments, not an array.\nPassing Multiple Iterables You can also use spread to pass multiple arrays (or iterables) to functions:\nlet arr1 = [1, -2, 3, 4]; let arr2 = [8, 3, -8, 1]; console.log(Math.max(...arr1, ...arr2)); // 8 alert( Math.max(1, 2, ...arr1, 25, 21, ...arr2) ); // 25 In this example, the spread operator ... is used to expand both arr1 and arr2 into individual arguments to Math.max.\nExample of Spread in Array Literals You can use spread syntax to merge arrays or create copies of arrays.\nlet arr1 = [1, 2, 3]; let arr2 = [4, 5, 6]; // Merging arrays let mergedArr = [...arr1, ...arr2]; console.log(mergedArr); // [1, 2, 3, 4, 5, 6] // Creating a copy of an array let copyArr = [...arr1]; console.log(copyArr); // [1, 2, 3] mergedArr contains elements from both arr1 and arr2. copyArr is a shallow copy of arr1. Example of Spread in Object Literals Spread syntax can also be used with objects to copy properties from one object to another or to merge objects.\nlet obj1 = {a: 1, b: 2}; let obj2 = {c: 3, d: 4}; let mergedObj = {...obj1, ...obj2}; console.log(mergedObj); // {a: 1, b: 2, c: 3, d: 4} let objCopy = {...obj1}; console.log(objCopy); // {a: 1, b: 2} mergedObj combines the properties of obj1 and obj2. objCopy is a shallow copy of obj1. If there are properties with the same key, the value from the later object will overwrite the earlier one:\nlet obj1 = {a: 1, b: 2}; let obj2 = {b: 3, c: 4}; let mergedObj = {...obj1, ...obj2}; console.log(mergedObj); // {a: 1, b: 3, c: 4} Differences Between Rest and Spread Syntax Feature Rest Parameters (...args) Spread Syntax (...) Usage Used in function parameters to collect arguments into an array. Used to expand an array or iterable into individual elements. Context Function parameters. Function calls, array literals, object literals. Behavior Gathers remaining arguments into an array. Expands an array or iterable into separate arguments or elements. Examples to Highlight Key Differences Rest Parameters in a Function function printAll(...args) { console.log(args); } printAll(1, 2, 3); // [1, 2, 3] Spread Syntax in a Function Call let numbers = [4, 5, 6]; console.log(Math.max(...numbers)); // 6 Merging Arrays with Spread let arr1 = [1, 2]; let arr2 = [3, 4]; let merged = [...arr1, ...arr2]; console.log(merged); // [1, 2, 3, 4] Copying an Object with Spread let obj = {name: \u0026#34;Alice\u0026#34;, age: 25}; let objCopy = {...obj}; console.log(objCopy); // {name: \u0026#34;Alice\u0026#34;, age: 25} Summary Rest Parameters (...args): Collect arguments into an array when defining a function. Spread Syntax (...): Expands an array or iterable into individual elements in function calls, array literals, or object literals. Spread syntax can be used when all elements from an object or array need to be included in a new array or object, or should be applied one-by-one in a function call\u0026rsquo;s arguments list.\nThere are three distinct places that accept the spread syntax:\nFunction arguments list (myFunction(a, ...iterableObj, b)) Array literals ([1, ...iterableObj, '4', 'five', 6]) Object literals ({ ...obj, key: 'value' }) ","date":"2024-11-09","id":80,"permalink":"/personal-site/docs/java-script/js-language/5-arrays/rest-spread/","summary":"\u003ch3 id=\"rest-parameters--and-spread-syntax-httpsjavascriptinforest-parameters-spread\"\u003e\u003ca href=\"https://javascript.info/rest-parameters-spread\"\u003eRest Parameters (\u003ccode\u003e...\u003c/code\u003e) and Spread Syntax (\u003ccode\u003e...\u003c/code\u003e)\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn JavaScript, the \u003cstrong\u003erest parameters\u003c/strong\u003e and \u003cstrong\u003espread syntax\u003c/strong\u003e both use the \u003ccode\u003e...\u003c/code\u003e syntax, but they serve different purposes.\u003c/p\u003e","tags":[],"title":"Rest \u0026 Spread"},{"content":"","date":"2024-10-22","id":81,"permalink":"/personal-site/docs/java-script/dom-manipulation/","summary":"","tags":[],"title":"DOM Manipulation"},{"content":"","date":"2024-10-22","id":82,"permalink":"/personal-site/docs/html-css/html/","summary":"","tags":[],"title":"HTML"},{"content":"","date":"2024-10-22","id":83,"permalink":"/personal-site/docs/html-css/","summary":"","tags":[],"title":"HTML \u0026 CSS"},{"content":"HTML (HyperText Markup Language) defines the structure and content of webpages. We use HTML elements to create all the paragraphs, headings, lists, images, and links that make up a typical webpage.\nElements and Tags All elements of HTML are wrapped in opening and closing HTML tags.\n\u0026lt;p\u0026gt;: Opening tag (angle brackets with keyword) marks the beginning. \u0026lt;/p\u0026gt;: Closing tag shows the element\u0026rsquo;s end, has a forward slash before the keyword. \u0026lt;p\u0026gt;paragraph text\u0026lt;/p\u0026gt;\rCatalog of Tags [[Catalog of Tags]]\nElements are containers for content, with the tags indicating what content the element contains. Using the correct element for content is referred to as semantic HTML.\nVoid Elements Void elements do not have any content, so they have a single tag:\n\u0026lt;meta\u0026gt; \u0026lt;link\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img\u0026gt; Previously, these were called self-closing tags (e.g., \u0026lt;br /\u0026gt;, \u0026lt;img /\u0026gt;), but it is no longer necessary to close them this way in HTML5.\nHTML File An HTML file containing the homepage of the website should be named index.html because servers will look for that by default.\nHTML Boilerplate All HTML documents need the same basic structure or boilerplate that should be in place before anything useful can be done.\n1. Doctype Every HTML page starts with a Doctype declaration which tells the browser what version of HTML to use for rendering the document. The latest version is HTML5, and its Doctype is:\n\u0026lt;!DOCTYPE html\u0026gt;\rThis should be the first line of the file.\n2. HTML Element \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;!-- lang attribute specifies the language of the document --\u0026gt; \u0026lt;/html\u0026gt;\rThe \u0026lt;html\u0026gt; element is the root element of the document, meaning every other element will be its descendant. \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; lang is html attribute giving additional info like language.\n3. Head Element The \u0026lt;head\u0026gt; element contains important meta-information to help render the document correctly in the browser. There should be no elements that display content within \u0026lt;head\u0026gt;.\n3.1 Meta Elements \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!-- Character encoding for the document --\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;!-- Controls layout on mobile browsers --\u0026gt; \u0026lt;/head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;: Ensures that different symbols are displayed correctly. \u0026lt;meta name=\u0026quot;viewport\u0026quot;\u0026gt;: Specifies the tag is related to viewport settings. content=\u0026quot;width=device-width, initial-scale=1.0\u0026quot;: Sets the width of the viewport to match the device\u0026rsquo;s width and the initial zoom level to 1.0. This sets the width of the viewport to match the device\u0026rsquo;s width. and sets the initial zoom level when the page is first loaded. A scale of 1.0 means that the page will be displayed at its natural size without any zooming in or out. There are other \u0026lt;meta\u0026gt; tags available for defining how the webpage behaves when shared on the web, among other functions.\n3.2 Title Element The \u0026lt;title\u0026gt; element gives the webpage a human-readable title that is displayed in the browser\u0026rsquo;s tab.\nWithout a \u0026lt;title\u0026gt;, the browser defaults to the file name, e.g., index.html.\n\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My Webpage\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\r3.3 Link Element The \u0026lt;link\u0026gt; element is used to link external stylesheets.\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;!-- Linking an external CSS file --\u0026gt;\rrel: Specifies the relationship between the current document and the linked resource. href: Specifies the location of the linked resource. 4. Body Element The \u0026lt;body\u0026gt; element contains all the content that will be displayed to users, including text, images, lists, links, etc.\n\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Line to be displayed\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt;\rComplete HTML Boilerplate Example \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;My Webpage\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;style.css\u0026#34;\u0026gt; \u0026lt;!-- Linking CSS --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Line to be displayed\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rVSCode Boilerplate Shortcut In a .html file, enter ! in an empty index.html file and select the first option to generate the full boilerplate code.\nOpening the File Drag and drop into the browser\u0026rsquo;s address bar or double-click the file. In the directory containing the file, you can open it with google-chrome index.html. Use the Live Server extension of VSCode for live preview. ","date":"2024-11-04","id":84,"permalink":"/personal-site/docs/html-css/html/boiler-plate/","summary":"\u003cp\u003e\u003cstrong\u003eHTML (HyperText Markup Language)\u003c/strong\u003e defines the structure and content of webpages. We use HTML elements to create all the paragraphs, headings, lists, images, and links that make up a typical webpage.\u003c/p\u003e","tags":[],"title":"Boiler Plate"},{"content":"Paragraphs \u0026lt;p\u0026gt; \u0026lt;/p\u0026gt; All text can be placed inside the \u0026lt;body\u0026gt;, but spaces will not be considered without using paragraph tags. The \u0026lt;p\u0026gt; tag can be used to create distinct paragraphs.\nHeadings \u0026lt;h1\u0026gt; \u0026lt;/h1\u0026gt; Headings are larger and bolder texts, with six levels of headings available from \u0026lt;h1\u0026gt; (most important) to \u0026lt;h6\u0026gt; (least important).\nStrong \u0026lt;strong\u0026gt; \u0026lt;/strong\u0026gt; The \u0026lt;strong\u0026gt; tag indicates the importance, seriousness, or urgency of a word or section of content, without altering its original meaning.\nEmphasis \u0026lt;em\u0026gt; \u0026lt;/em\u0026gt; The \u0026lt;em\u0026gt; tag places stress on a piece of content in a way that changes its meaning, often indicating verbal stress.\nItalic \u0026lt;i\u0026gt; \u0026lt;/i\u0026gt; The \u0026lt;i\u0026gt; tag is used to convey a different mood or voice from the surrounding content. It’s often applied to foreign words, idiomatic phrases, technical terms, ship names, or thoughts.\nBold \u0026lt;b\u0026gt; \u0026lt;/b\u0026gt; The \u0026lt;b\u0026gt; tag draws attention to a word or section of content for utilitarian purposes, without conveying additional importance or emphasis. It is the least semantic of the tags discussed.\nSmall \u0026lt;small\u0026gt; \u0026lt;/small\u0026gt; The \u0026lt;small\u0026gt; tag defines smaller text, typically for side comments or fine print.\nHighlight/Mark \u0026lt;mark\u0026gt; \u0026lt;/mark\u0026gt; The \u0026lt;mark\u0026gt; tag highlights text for reference or importance.\nStrike Out/Delete \u0026lt;del\u0026gt; \u0026lt;/del\u0026gt; The \u0026lt;del\u0026gt; tag represents content that has been deleted, often rendered with a strikethrough.\nInsert \u0026lt;ins\u0026gt; \u0026lt;/ins\u0026gt; The \u0026lt;ins\u0026gt; tag shows newly inserted content, typically underlined. After deletion other word can be shown as inserted, which is represented by underline.\nSubscript \u0026lt;sub\u0026gt; \u0026lt;/sub\u0026gt; The \u0026lt;sub\u0026gt; tag denotes text that appears half the size and at a lower position, similar to mathematical or chemical formulas.\nSuperscript \u0026lt;sup\u0026gt; \u0026lt;/sup\u0026gt; The \u0026lt;sup\u0026gt; tag displays text that appears half a character above the normal line and in a smaller font, useful for footnotes or exponentiation.\nNesting and Indentation Nesting is used to show parent, child, and sibling tag relationships. Indentation makes these relationships easier to see.\nHTML Comments \u0026lt;!-- text --\u0026gt; To comment out lines in VSCode, use the shortcut Ctrl + / to convert any line into a comment or revert it.\nLists Unordered Lists \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Used when the order of items doesn’t matter. Each item in the list is represented by \u0026lt;li\u0026gt;, which will typically be displayed as a bullet point (circle, square, or dot). The style is defined by CSS with the list-style-type property.\nOrdered Lists \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; For creating lists where the order and numbering are important. By default, \u0026lt;ol\u0026gt; assigns numbers to each list item.\nBoth unordered and ordered lists can be nested inside one another as needed. If a second list needs to be nested inside a list item, it should be placed within its \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt;.\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; Second item \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Second item first subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; Second item second subitem \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Second item second subitem first sub-subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item second subitem second sub-subitem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item second subitem third sub-subitem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Second item third subitem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Third item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; - first item - second item - second item first subitem - second item second subitem - second item second subitem first sub-subitem - second item second subitem second sub-subitem - second item second subitem third sub-subitem - second item third subitem - third item\rGlobal Attributes for Ordered Lists reversed: Numbering from high to low. start=\u0026quot;4\u0026quot;: Starts numbering from 4. type: Defines the numbering style (e.g., a for lowercase letters, A for uppercase letters, i for lowercase Roman numerals, I for uppercase Roman numerals). Example of starting an ordered list from 4:\n\u0026lt;ol start=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Fourth item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;ol reversed\u0026gt; \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;\rValue Attribute Used on individual \u0026lt;li\u0026gt; elements within an ordered list to change the value of that list item:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Head north on N Halsted St\u0026lt;/li\u0026gt; \u0026lt;li value=\u0026#34;9\u0026#34;\u0026gt;Turn right on W Diversey Pkwy\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Turn left on N Orchard St\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;\rDescription Lists Description lists outline multiple terms and their descriptions, useful for glossaries. They are created using the \u0026lt;dl\u0026gt; element, along with \u0026lt;dt\u0026gt; for the term and \u0026lt;dd\u0026gt; for the description.\nInstead of using a \u0026lt;li\u0026gt; element to mark up list items, the description list requires two block-level elements: the description term element, \u0026lt;dt\u0026gt;, and the description element, \u0026lt;dd\u0026gt;.\n\u0026lt;dd\u0026gt; element includes a left margin by default. The definition term and the description that directly follows it correspond to one another; thus, the order of these elements is important.\n\u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;study\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;The devotion of time and attention to acquiring knowledge on an academic subject, especially by means of books\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;design\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A plan or drawing produced to show the look and function or workings of a building, garment, or other object before it is built or made\u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;Purpose, planning, or intention that exists or is thought to exist behind an action, fact, or material object\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;business\u0026lt;/dt\u0026gt; \u0026lt;dt\u0026gt;work\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;A person\u0026#39;s regular occupation, profession, or trade\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; study The devotion of time and attention to acquiring knowledge on an academic subject, especially by means of books design A plan or drawing produced to show the look and function or workings of a building, garment, or other object before it is built or made Purpose, planning, or intention that exists or is thought to exist behind an action, fact, or material object business work A person\u0026#39;s regular occupation, profession, or trade\rList-Style-Type Property List items can be styled through CSS using the list-style-type property. The style can be applied to either \u0026lt;ul\u0026gt;, \u0026lt;ol\u0026gt;, or \u0026lt;li\u0026gt; elements. [[List Styles]]\n/* Partial list of styles */ list-style-type: disc; list-style-type: circle; list-style-type: square; list-style-type: decimal; list-style-type: georgian; list-style-type: trad-chinese-informal; list-style-type: kannada; /* Custom styling */ list-style-type: \u0026#34;-\u0026#34;; /* Custom string value */ /* Identifier matching an @counter-style rule */ list-style-type: custom-counter-style; list-style-type: none; /* No list styling */ /* Global values */ list-style-type: inherit; list-style-type: initial; list-style-type: revert; list-style-type: unset;\r","date":"2024-11-04","id":85,"permalink":"/personal-site/docs/html-css/html/texts-lists/","summary":"\u003ch3 id=\"paragraphs-p-p\"\u003eParagraphs \u003ccode\u003e\u0026lt;p\u0026gt; \u0026lt;/p\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAll text can be placed inside the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e, but spaces will not be considered without using paragraph tags. The \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e tag can be used to create distinct paragraphs.\u003c/p\u003e","tags":[],"title":"Texts \u0026 Lists"},{"content":"Anchor Elements An anchor element is defined by wrapping the text or another HTML element we want to link with an \u0026lt;a\u0026gt; tag.\n\u0026lt;a\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;!-- Needs href to point to where to go --\u0026gt; \u0026lt;a href=\u0026#34;https://www.theodinproject.com/about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\rOpening Links in a New Tab The target=\u0026quot;_blank\u0026quot; attribute opens a link in a new tab. By default, links open in the same tab, which is represented by target=\u0026quot;_self\u0026quot;.\n\u0026lt;a href=\u0026#34;https://www.theodinproject.com/about\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\rSecurity: rel=\u0026quot;noreferrer\u0026quot; Setting rel=\u0026quot;noreferrer\u0026quot; helps enhance security by preventing the linked webpage from knowing the origin of the link. It also stops the opened webpage from accessing the previous webpage\u0026rsquo;s window.\n\u0026lt;a href=\u0026#34;https://www.theodinproject.com/about\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noreferrer\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\rAbsolute and Relative Links Absolute Links: These are links to pages on other websites and always include the protocol and domain. https://www.theodinproject.com/about\nRelative Links: These link to other pages within the same website and do not include the domain name. They only include the path relative to the current page. Use ./ to denote the current folder, and ../ to move up one directory.\n\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Homepage\u0026lt;/h1\u0026gt; \u0026lt;a href=\u0026#34;https://www.theodinproject.com/about\u0026#34;\u0026gt;About The Odin Project\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;./pages/about.html\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt;\rImages The \u0026lt;img\u0026gt; tag is a void element, meaning it does not require a closing tag.\n\u0026lt;img src=\u0026#34;https://www.google.com/somepic.png\u0026#34;\u0026gt;\rFile Path for Images Use ../ to navigate up a directory when specifying a relative path. Absolute paths can also be used. src Attribute The src attribute is used to specify the location of the image file.\n\u0026lt;img src=\u0026#34;image.png\u0026#34;\u0026gt;\ralt Attribute The alt attribute provides alternate text for the image, which is displayed if the image cannot be loaded.\n\u0026lt;img src=\u0026#34;image.png\u0026#34; alt=\u0026#34;Logo of the site\u0026#34;\u0026gt;\rImage Size While not required, specifying the height and width attributes can help images load correctly.\n\u0026lt;img src=\u0026#34;https://www.theodinproject.com/mstile-310x310.png\u0026#34; alt=\u0026#34;The Odin Project Logo\u0026#34; height=\u0026#34;310\u0026#34; width=\u0026#34;310\u0026#34;\u0026gt;\rSupported Formats Common image formats include:\n.jpg .png .gif .svg File Structure A typical project file structure should look like this:\nroot/\r│\r├── index.html \u0026lt;!-- Mandatory in the root folder --\u0026gt;\r├── images/ \u0026lt;!-- Folder for images --\u0026gt;\r├── css/ \u0026lt;!-- Folder for CSS files --\u0026gt;\r└── js/ \u0026lt;!-- Folder for JavaScript files --\u0026gt;\rNaming Conventions Avoid spaces, numbers, and capital letters in file names. Keep names short and simple. Additional web pages can be placed in the root folder or in separate directories as needed. ","date":"2024-11-04","id":86,"permalink":"/personal-site/docs/html-css/html/links-images/","summary":"\u003ch2 id=\"anchor-elements\"\u003eAnchor Elements\u003c/h2\u003e\n\u003cp\u003eAn anchor element is defined by wrapping the text or another HTML element we want to link with an \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e","tags":[],"title":"Links \u0026 Images"},{"content":"The \u0026lt;input\u0026gt; HTML element is used to create interactive controls for web-based forms to accept data from users. It provides a wide variety of input types and control widgets depending on the device and user agent. The \u0026lt;input\u0026gt; element is one of the most powerful and complex in HTML due to the numerous combinations of input types and attributes available.\n\u0026lt;input\u0026gt; Element Example \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name (4 to 8 characters):\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; required minlength=\u0026#34;4\u0026#34; maxlength=\u0026#34;8\u0026#34; size=\u0026#34;10\u0026#34; /\u0026gt;\rAccessibility and Labels Using a label enhances accessibility for users with assistive technologies. It also increases the click area for mouse and touch screen users. Clicking on either the label or the input field will focus the input.\nExamples of Label Usage:\nInaccessible Input: \u0026lt;p\u0026gt;Enter your name: \u0026lt;input id=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt;\rImplicit Label: \u0026lt;p\u0026gt; \u0026lt;label\u0026gt;Enter your name: \u0026lt;input id=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt;\rExplicit Label: \u0026lt;p\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Enter your name: \u0026lt;/label\u0026gt; \u0026lt;input id=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;30\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt;\rLabels When including inputs, it is an accessibility requirement to add labels alongside. This is needed so those who use assistive technologies can tell what the input is for. Also, clicking or touching a label gives focus to the label\u0026rsquo;s associated form control. This improves the accessibility and usability for sighted users, increases the area a user can click or touch to activate the form control. This is especially useful (and even needed) for radio buttons and checkboxes, which are tiny.\nMore information about labels in general MDN Documentation on Labels.\n\u0026lt;input\u0026gt; needs an id attribute. The \u0026lt;label\u0026gt; then needs a for attribute whose value is the same as the input\u0026rsquo;s id.\n\u0026lt;label for=\u0026#34;peas\u0026#34;\u0026gt;Do you like peas?\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;peas\u0026#34; id=\u0026#34;peas\u0026#34; /\u0026gt;\rTypes of \u0026lt;input\u0026gt; The behavior of an \u0026lt;input\u0026gt; element varies based on its type attribute. If not specified, the default type is text.\nButton as \u0026lt;input\u0026gt; \u0026lt;input\u0026gt; elements of type button render as simple push buttons. However, the newer \u0026lt;button\u0026gt; element is recommended for creating buttons with more flexibility, including HTML content.\n\u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Add to favorites\u0026#34;\u0026gt; \u0026lt;!-- Same as --\u0026gt; \u0026lt;button\u0026gt;Add to favorites\u0026lt;/button\u0026gt;\rInput Types Checkbox \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Choose your monster\u0026#39;s features:\u0026lt;/legend\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;scales\u0026#34; name=\u0026#34;scales\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;scales\u0026#34;\u0026gt;Scales\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;horns\u0026#34; name=\u0026#34;horns\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;horns\u0026#34;\u0026gt;Horns\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/fieldset\u0026gt;\rValue attribute represents the value given to the data submitted with checkbox\u0026rsquo;s name.\nRadio Similar to checkbox, only one button in a given group can be selected at the same time. Generally used in radio groups (a collection of radio buttons describing set of related options) \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Select a maintenance drone:\u0026lt;/legend\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;huey\u0026#34; name=\u0026#34;drone\u0026#34; value=\u0026#34;huey\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;huey\u0026#34;\u0026gt;Huey\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;dewey\u0026#34; name=\u0026#34;drone\u0026#34; value=\u0026#34;dewey\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;dewey\u0026#34;\u0026gt;Dewey\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/fieldset\u0026gt;\rThe value attribute is a string containing the radio button\u0026rsquo;s value. The value is never shown to user, but used to identify which radio button in a group is selected.\nA radio group is defined by giving each of radio buttons in the group the same name.\nDate Opens a date picker or numeric wheels for year, month, day when active in supporting browsers. The value is normalized to the format yyyy-mm-dd.\n\u0026lt;label for=\u0026#34;start\u0026#34;\u0026gt;Start date:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;date\u0026#34; id=\u0026#34;start\u0026#34; name=\u0026#34;trip-start\u0026#34; value=\u0026#34;2018-07-22\u0026#34; min=\u0026#34;2018-01-01\u0026#34; max=\u0026#34;2018-12-31\u0026#34; /\u0026gt;\rValue is used to set a default date. The displayed date format will differ from the actual value — the displayed date is formatted based on the locale of the user\u0026rsquo;s browser, but the parsed value is always formatted yyyy-mm-dd.\nDatetime-Local\nA control for entering a date and time, with no time zone. Opens a date picker or numeric wheels for date- and time-components when active in supporting browsers. Email\nA field for entering an email address with validation. File\nA control for selecting a file, using the accept attribute to specify file types. Image\nA graphical submit button that displays an image defined by the src attribute. Number\nA control for entering a number, often displaying a spinner. Password\nA single-line text field where the input is obscured for security. Range\nA control for selecting a numeric value using a slider. Submit\nA button that submits the form. Attributes for \u0026lt;input\u0026gt; Each input type can accept different attributes, enhancing functionality and user experience. Here are some commonly used attributes:\ntype: Specifies the type of input (e.g., text, checkbox, radio). id: Associates a label with the input. name: Identifies the input for form submission. value: Defines the initial value of the input. required: Makes the input mandatory. min, max: Specifies the range of acceptable values for number and date inputs. placeholder: Provides a hint to the user about what to enter. ","date":"2024-11-04","id":87,"permalink":"/personal-site/docs/html-css/html/input-types/","summary":"\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e\u003c/strong\u003e HTML element is used to create interactive controls for web-based forms to accept data from users. It provides a wide variety of input types and control widgets depending on the device and user agent. The \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e element is one of the most powerful and complex in HTML due to the numerous combinations of input types and attributes available.\u003c/p\u003e","tags":[],"title":"Input Types"},{"content":"\u0026lt;button\u0026gt;\u0026lt;/button\u0026gt; The \u0026lt;button\u0026gt; element represents a clickable button that can be used to submit forms or trigger actions on the webpage. It can contain text, images, or other HTML elements.\n\u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; onclick=\u0026#34;alert(\u0026#39;Hello!\u0026#39;)\u0026#34;\u0026gt;Click Me!\u0026lt;/button\u0026gt;\rDrop Down Selector: \u0026lt;select\u0026gt; \u0026lt;option\u0026gt; \u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; The \u0026lt;select\u0026gt; element creates a drop-down list that allows users to choose one or more options. Each option within the list is defined using the \u0026lt;option\u0026gt; element.\n\u0026lt;label for=\u0026#34;weather\u0026#34;\u0026gt;Select the weather type today:\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;weather\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;\u0026#34;\u0026gt;--Make a Choice--\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;sunny\u0026#34;\u0026gt;Sunny\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;rainy\u0026#34;\u0026gt;Rainy\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;snowing\u0026#34;\u0026gt;Snowing\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;overcast\u0026#34;\u0026gt;Overcast\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt;\rThe first \u0026lt;option\u0026gt; with value=\u0026quot;\u0026quot; is a placeholder that prompts users to make a selection. The for attribute in the \u0026lt;label\u0026gt; element links it to the \u0026lt;select\u0026gt; element, enhancing accessibility. ","date":"2024-11-04","id":88,"permalink":"/personal-site/docs/html-css/html/button/","summary":"\u003ch3 id=\"buttonbutton\"\u003e\u003ccode\u003e\u0026lt;button\u0026gt;\u0026lt;/button\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e element represents a clickable button that can be used to submit forms or trigger actions on the webpage. It can contain text, images, or other HTML elements.\u003c/p\u003e","tags":[],"title":"Button"},{"content":"HTML DOM Events\nHTML events are actions that occur to HTML elements, which JavaScript can respond to. By using event listeners, you can execute JavaScript code in reaction to these events.\nExample of an Event Handler:\n\u0026lt;button onclick=\u0026#34;myFunction()\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt;\rUsing addEventListener:\nbutton.addEventListener(\u0026#34;click\u0026#34;, myFunction);\rHTML Events An HTML event can be triggered by various actions, either by the browser itself or by user interactions. Here are some examples:\nThe web page has finished loading. An input field\u0026rsquo;s value has changed. A button has been clicked. When these events occur, you might want to execute specific code. JavaScript allows you to run code in response to these detected events.\nEvent Handler Attributes HTML supports event handler attributes that allow you to embed JavaScript code directly into HTML elements. For example:\n\u0026lt;input type=\u0026#34;text\u0026#34; onchange=\u0026#34;alert(\u0026#39;Input changed!\u0026#39;)\u0026#34;\u0026gt;\rCommon HTML Events Here’s a list of some common HTML events along with their descriptions:\nEvent Description onchange Triggered when the value of an HTML element changes. onclick Triggered when the user clicks on an HTML element. onmouseover Triggered when the mouse moves over an HTML element. onmouseout Triggered when the mouse moves away from an HTML element. onkeydown Triggered when the user presses a key on the keyboard. onload Triggered when the browser has finished loading the page. Event Occurs When Belongs To abort The loading of a media is aborted UiEvent, Event afterprint A page has started printing Event animationend A CSS animation has completed AnimationEvent animationiteration A CSS animation is repeated AnimationEvent animationstart A CSS animation has started AnimationEvent beforeprint A page is about to be printed Event beforeunload Before a document is about to be unloaded UiEvent, Event blur An element loses focus FocusEvent canplay The browser can start playing a media (has buffered enough to begin) Event canplaythrough The browser can play through a media without stopping for buffering Event change The content of a form element has changed Event click An element is clicked on MouseEvent contextmenu An element is right-clicked to open a context menu MouseEvent copy The content of an element is copied ClipboardEvent cut The content of an element is cut ClipboardEvent dblclick An element is double-clicked MouseEvent drag An element is being dragged DragEvent dragend Dragging of an element has ended DragEvent dragenter A dragged element enters the drop target DragEvent dragleave A dragged element leaves the drop target DragEvent dragover A dragged element is over the drop target DragEvent dragstart Dragging of an element has started DragEvent drop A dragged element is dropped on the target DragEvent durationchange The duration of a media is changed Event ended A media has reach the end (\u0026ldquo;thanks for listening\u0026rdquo;) Event error An error has occurred while loading a file ProgressEvent, UiEvent, Event focus An element gets focus FocusEvent focusin An element is about to get focus FocusEvent focusout An element is about to lose focus FocusEvent fullscreenchange An element is displayed in fullscreen mode Event fullscreenerror An element can not be displayed in fullscreen mode Event hashchange There has been changes to the anchor part of a URL HashChangeEvent input An element gets user input InputEvent, Event invalid An element is invalid Event keydown A key is down KeyboardEvent keypress A key is pressed KeyboardEvent keyup A key is released KeyboardEvent load An object has loaded UiEvent, Event loadeddata Media data is loaded Event loadedmetadata Meta data (like dimensions and duration) are loaded Event loadstart The browser starts looking for the specified media ProgressEvent message A message is received through the event source Event mousedown The mouse button is pressed over an element MouseEvent mouseenter The pointer is moved onto an element MouseEvent mouseleave The pointer is moved out of an element MouseEvent mousemove The pointer is moved over an element MouseEvent mouseover The pointer is moved onto an element MouseEvent mouseout The pointer is moved out of an element MouseEvent mouseup A user releases a mouse button over an element MouseEvent mousewheel Deprecated. Use the wheel event instead WheelEvent offline The browser starts working offline Event online The browser starts working online Event open A connection with the event source is opened Event pagehide User navigates away from a webpage PageTransitionEvent pageshow User navigates to a webpage PageTransitionEvent paste Some content is pasted in an element ClipboardEvent pause A media is paused Event play The media has started or is no longer paused Event playing The media is playing after being paused or buffered Event popstate The window\u0026rsquo;s history changes PopStateEvent progress The browser is downloading media data Event ratechange The playing speed of a media is changed Event resize The document view is resized UiEvent, Event reset A form is reset Event scroll An scrollbar is being scrolled UiEvent, Event search Something is written in a search field Event seeked Skipping to a media position is finished Event seeking Skipping to a media position is started Event select User selects some text UiEvent, Event show A element is shown as a context menu Event stalled The browser is trying to get unavailable media data Event storage A Web Storage area is updated StorageEvent submit A form is submitted Event suspend The browser is intentionally not getting media data Event timeupdate The playing position has changed (the user moves to a different point in the media) Event toggle The user opens or closes the element Event touchcancel The touch is interrupted TouchEvent touchend A finger is removed from a touch screen TouchEvent touchmove A finger is dragged across the screen TouchEvent touchstart A finger is placed on a touch screen TouchEvent transitionend A CSS transition has completed TransitionEvent unload A page has unloaded UiEvent, Event volumechange The volume of a media is changed (includes muting) Event waiting A media is paused but is expected to resume (e.g. buffering) Event wheel The mouse wheel rolls up or down over an element WheelEvent ","date":"2024-11-04","id":89,"permalink":"/personal-site/docs/html-css/html/dom-events/","summary":"\u003cp\u003e\u003ca href=\"https://www.w3schools.com/jsref/dom_obj_event.asp\"\u003eHTML DOM Events\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eHTML events are actions that occur to HTML elements, which JavaScript can respond to. By using event listeners, you can execute JavaScript code in reaction to these events.\u003c/p\u003e","tags":[],"title":"DOM Events"},{"content":"CSS consists of rules, which are made up of:\nSelector: Points to a part of the HTML Declaration: A property: value pair (semicolon-separated list) Ruleset A ruleset (or rule) consists of One or more selectors and an associated declarations block\nHTML comments: \u0026lt;!-- --\u0026gt; CSS comments: /* */ Selectors Selectors refer to the HTML elements to which a particular CSS rules / declarations applies to; selectors , are conditions selecting some elements of the page.\nSelectors are used to target HTML elements for applying CSS styles. A declaration block is applied to the selected elements.\nSelectors can be simple (e.g., targeting a specific element) or more complex (e.g., selecting by class or ID).\nEach valid declaration block is preceded by one or more comma-separated selectors.\nA \u0026lt;div\u0026gt; is one of the basic HTML elements. It is an empty container. In general, it is best to use other tags such as \u0026lt;h1\u0026gt; or \u0026lt;p\u0026gt; for content but there are many cases where the thing needed is just a container for other elements.\nSelector Types 1. Universal Selector (*) The universal selector will select all elements of any type in a document, hence the name universal selector, and the syntax for it is an asterisk *.\n* { color: purple; }\rThis would apply color: purple; to all elements on the page.\n2. Type Selector A type selector (or element selector) targets all elements of a specific type (e.g., \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, etc.).\n\u0026lt;!-- index.html --\u0026gt; \u0026lt;div\u0026gt;Hello, World!\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;Hello again!\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Hi...\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt;Okay, bye.\u0026lt;/div\u0026gt;\r/* styles.css */ div { color: white; }\rThis will apply the color: white; style to all \u0026lt;div\u0026gt; elements, but not to \u0026lt;p\u0026gt; elements.\n3. Class Selector Class selectors target all elements with a specific class. The syntax uses a period (.) followed by the class name.\nClasses are reusable across multiple elements.\n\u0026lt;div class=\u0026#34;alert-text\u0026#34;\u0026gt;Please agree to our terms.\u0026lt;/div\u0026gt;\r.alert-text { color: red; }\rSyntax: .classname\na period . immediately followed by the case-sensitive value of the class attribute.\nYou can also add multiple classes to an element using a space-separated list:\n\u0026lt;div class=\u0026#34;alert-text severe-alert\u0026#34;\u0026gt;Warning!\u0026lt;/div\u0026gt;\r4. ID Selector ID selectors target an element with a specific ID. The syntax uses a hashtag (#) followed by the ID value. IDs must be unique within a page.\nExample: \u0026lt;div id=\u0026#34;title\u0026#34;\u0026gt;My Awesome 90\u0026#39;s Page\u0026lt;/div\u0026gt;\r#title { background-color: red; }\rSyntax: #idname\nA hashtag # immediately followed by the case-sensitive value of the ID attribute.\nImportant: An element can have only one ID, and an ID must be unique within a page. IDs should not contain any white space. Key Differences Between Classes and IDs Classes: Can be used on multiple elements. Can apply to any number of elements across a page. IDs: Must be unique to a single element. Cannot be used on more than one element on a page. A common mistake is overusing the ID attribute when a class would suffice.\n","date":"2024-11-06","id":90,"permalink":"/personal-site/docs/html-css/css/css-selectors/","summary":"\u003cp\u003eCSS consists of rules, which are made up of:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSelector\u003c/strong\u003e: Points to a part of the HTML\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDeclaration\u003c/strong\u003e: A \u003cstrong\u003eproperty: value\u003c/strong\u003e pair (semicolon-separated list)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ruleset\"\u003e\u003cstrong\u003eRuleset\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eA \u003cstrong\u003eruleset\u003c/strong\u003e (or \u003cstrong\u003erule\u003c/strong\u003e) consists of One or more \u003cstrong\u003eselectors\u003c/strong\u003e and an associated \u003cstrong\u003edeclarations block\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"CSS Selectors"},{"content":"","date":"2024-10-22","id":91,"permalink":"/personal-site/docs/html-css/css/","summary":"","tags":[],"title":"CSS"},{"content":"1. Grouping Selectors Grouping selectors allows for applying the same style rules to multiple elements. Instead of writing separate rules for similar selectors, they can be grouped together with a comma-separated list. This helps in reducing redundancy and makes your CSS more efficient.\nIf the .read and .unread selectors share common style declarations, we can group them together:\nExample 1: Grouping selectors without grouping\n.read { color: white; background-color: black; /* several unique declarations */ } .unread { color: white; background-color: black; /* several unique declarations */ }\rExample 2: Grouping selectors with a comma-separated list\n.read, .unread { color: white; background-color: black; } .read { /* several unique declarations for .read */ } .unread { /* several unique declarations for .unread */ }\rBy grouping them, you can apply common properties (like color and background-color) to both classes at once. This reduces repetition and makes your code easier to maintain.\n2. Chaining Selectors Chaining selectors allows for targeting elements that match multiple conditions, such as an element that has both a specific class and an ID, or multiple classes. This technique can be used to apply styles more specifically without having to create new classes or IDs.\nExample 1: Chaining two classes Chain class selectors to target elements that have both classes:\n\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;subsection header\u0026#34;\u0026gt;Latest Posts\u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;subsection preview\u0026#34;\u0026gt;This is where a preview for a post might go.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;\r.subsection.header { color: red; }\rIn this case, .subsection.header selects only the \u0026lt;div\u0026gt; element with both the subsection and header classes.\nExample 2: Chaining a class and an ID Chaining a class and an ID to target a specific element:\n\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;subsection header\u0026#34;\u0026gt;Latest Posts\u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;subsection\u0026#34; id=\u0026#34;preview\u0026#34;\u0026gt;This is where a preview for a post might go.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;\r.subsection.header { color: red; } .subsection#preview { color: blue; }\rIn this case:\n.subsection.header targets the div with both classes subsection and header. .subsection#preview targets the p element with class subsection and ID preview. Important: You cannot chain multiple type selectors (e.g., div and p) since an element can only be one type. For example, divp is not valid because it tries to target a non-existent \u0026lt;divp\u0026gt; element.\n3. Combinators Combinators in CSS are used to describe relationships between elements. They allow us to select elements based on their position or relationship in the HTML structure.\n3.1 Descendant Combinator (A B) Specifies that the element selected by B is a descendant of the element selected by A, but is not necessarily a direct child.\nThe descendant combinator (represented by a space between two selectors) selects an element that is a descendant of another element. This can be any level of nesting, not just direct children.\nchild class will only be selected if it is nested inside ancestor, regardless of how deep that nesting is.\n\u0026lt;div class=\u0026#34;ancestor\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contents\u0026#34;\u0026gt;More Content\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;contents\u0026#34;\u0026gt;No nesting\u0026lt;/div\u0026gt;\r.ancestor .contents { color: green; }\rThe .ancestor .contents selector will apply to the .contents elements inside the .ancestor element, but not the .contents element outside it. There is no limit to how many nested elements you can select with descendant combinators, e.g., .one .two .three .four. 3.2 Next-Sibling Combinator (A + B) The next-sibling combinator specifies that the elements selected by both A and B have the same parent and selects the element B that immediately follows element A as a sibling.\n\u0026lt;div class=\u0026#34;first\u0026#34;\u0026gt;First\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;second\u0026#34;\u0026gt;Second\u0026lt;/div\u0026gt;\r.first + .second { color: purple; }\rThis rule will apply color: purple to .second only if it directly follows .first. 3.3 Subsequent-Sibling Combinator (A ~ B) The subsequent-sibling combinator selects all elements B that share the same parent as element A and come after it, but not necessarily immediately.\n\u0026lt;div class=\u0026#34;first\u0026#34;\u0026gt;First\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;second\u0026#34;\u0026gt;Second\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;third\u0026#34;\u0026gt;Third\u0026lt;/div\u0026gt;\r.first ~ .third { color: orange; }\rIn this case, the rule will apply color: orange to .third because it follows .first and is within the same parent. 3.4 Child Combinator (A \u0026gt; B) The child combinator selects element B only if it is a direct child of element A.\n\u0026lt;div class=\u0026#34;parent\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt;Child\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt;Not a direct child\u0026lt;/div\u0026gt;\r.parent \u0026gt; .child { color: blue; }\rThe .parent \u0026gt; .child selector will only apply styles to .child elements that are direct children of .parent. 3.5 Column Combinator (A || B) The column combinator is used in tables to target elements within a specific column.\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Column 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Column 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Data 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Data 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;\rtd || Column 2 { color: red; }\rThe column combinator selects elements in a specified table column, including those that span multiple columns. CSS Cascade and Specificity Specificity in CSS The order of importance in CSS rules is determined by specificity. More specific selectors override less specific ones.\nSpecificity Hierarchy: Inline styles: Styles applied directly to an element via the style attribute. ID selectors: #idname (more specific than classes or elements). Class selectors: .classname Type selectors: div, p, etc. General Rule: An ID selector will always override any number of class or type selectors, and a class selector will override any number of type selectors.\n\u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; id=\u0026#34;subsection\u0026#34;\u0026gt;Blue text\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\r#subsection { color: blue; } .main .list { color: red; }\rResult: The text will appear in blue because the ID selector (#subsection) has higher specificity than the class selector (.main .list). Additional resources An interactive Scrim Video covers how selectors can be chained and used along with rules to select specific items.\nThe CSS Cascade interactive read that in detail about other factors that affect what CSS rules actually end up being applied.\nCSS Specificity Explained video from Kevin Powell about specificity of selectors and priorities.\nInteractive Scrim on the CSS Cascade.\nCSS Specificity Calculator allows you to fill in your own selectors and have their specificity calculated and visualized.\n","date":"2024-11-06","id":92,"permalink":"/personal-site/docs/html-css/css/css-multiple-selecors/","summary":"\u003ch2 id=\"1-grouping-selectors\"\u003e\u003cstrong\u003e1. Grouping Selectors\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eGrouping selectors allows for applying the same style rules to multiple elements. Instead of writing separate rules for similar selectors, they can be grouped together with a comma-separated list. This helps in reducing redundancy and makes your CSS more efficient.\u003c/p\u003e","tags":[],"title":"CSS Multiple Selecors"},{"content":"A Declaration is a key-value pair that defines a style rule in CSS. It is composed of two parts:\nProperty: An identifier (human-readable name) that specifies the feature to be styled. Value: Describes how the feature should be handled by the browser engine. Declaration Block A declaration block is a group of one or more declarations enclosed in curly braces ({}), and each declaration is separated by a semicolon (;).\ndiv.bold-text { font-weight: 700; /* Property: font-weight, Value: 700 */ text-align: center; /* Property: text-align, Value: center */ }\rThe property is font-weight and text-align. The value for font-weight is 700 and for text-align is center. CSS Properties Each CSS property has a set of valid values, defined by a formal grammar, as well as a semantic meaning, implemented by the browser engine.\nColor and Background Color The color property controls the text color, while the background-color property defines the background color of an element. Both properties can accept different kinds of values:\nKeywords (e.g., red, transparent) HEX values (e.g., #FF5733) RGB values (e.g., rgb(255, 87, 51)) HSL values (e.g., hsl(9, 100%, 60%)) [[CSS_Color_values]] p { /* HEX color */ color: #1100ff; } p { /* RGB color */ color: rgb(100, 0, 127); } p { /* HSL color */ color: hsl(15, 82%, 56%); }\rTypography Basics Font Family The font-family property defines which font to use for the text. It can be:\nA specific font family name (e.g., \u0026quot;Times New Roman\u0026quot;). A generic font family (e.g., serif, sans-serif). If a browser can\u0026rsquo;t find or support the first font in the list, it will try the next one, and so on, until it finds a valid font.\nThis is why it’s best practice to include a list of values for this property, starting with the font you want to be used most and ending with a generic font family as a fallback, e.g. font-family: \u0026quot;Times New Roman\u0026quot;, serif;\nbody { font-family: \u0026#34;Times New Roman\u0026#34;, serif; }\rIn this example, \u0026quot;Times New Roman\u0026quot; is the preferred font, and serif is the fallback.\nFont Size The font-size property sets the size of the text. This value should not contain any spaces between the number and the unit (e.g., px, em).\np { font-size: 22px; }\rFont Weight The font-weight property affects the boldness of the text. It can accept:\nKeywords like normal, bold. Numeric values (e.g., 700 for bold, 400 for normal). h1 { font-weight: bold; /* Keyword */ } h2 { font-weight: 700; /* Numeric value for bold */ }\rText Alignment The text-align property aligns text horizontally within an element. Common values include:\nleft center right justify p { text-align: center; }\rImage Size (Height and Width) By default, an \u0026lt;img\u0026gt; element’s height and width values are the same as the image’s actual dimensions.\nImages aren’t the only elements that we can adjust the height and width on. To adjust the size of the image without causing it to lose its proportions, you would use a value of “auto” for the height property and adjust the width value:\nAdjusting Image Size Without Losing Proportions\nimg { height: auto; /* Preserve aspect ratio */ width: 500px; /* Set a fixed width */ }\rThis ensures the image keeps its aspect ratio while adjusting the width to 500px.\nWhy Set Height and Width?\nWhen you explicitly set the height and width for images, you help the browser allocate space on the page before the image loads. This prevents layout shifts as images load.\nInline vs. Block Elements Inline Elements Inline elements do not start on a new line. They appear alongside other elements on the same line. \u0026lt;a\u0026gt;, \u0026lt;span\u0026gt;, \u0026lt;strong\u0026gt;, \u0026lt;em\u0026gt;. Inline elements have special behavior for padding and margin. For instance, they won’t expand vertically like block elements.\nPadding and margin behave differently on inline elements. Do not want to try to put extra padding or margin on inline elements.\nBlock Elements Block elements start on a new line and take up the full width of their parent element, stacking vertically. \u0026lt;div\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;. Block elements behave like containers that stretch across the page.\ndisplay Property Inline vs. Block Display display: inline: Makes elements appear in a line, one after another. display: block: Forces elements to take up the full width, causing each element to appear on a new line. Next item goes to the next line (stacked on each other) img { display: block; } button { display: inline; }\rimg will behave as a block element (taking up full width). button will behave inline, appearing next to other inline elements. inline-block: A Middle Ground The inline-block value combines the behavior of inline and block elements. It allows elements to sit inline, but you can still apply block-level properties like padding and margin. You’ll probably end up reaching for flexbox more often\ndiv { display: inline-block; margin: 10px; }\rinline-block elements behave like inline elements, but you can still control their dimensions and margins like block elements. Divs and Spans \u0026lt;div\u0026gt;: A block-level element used to group other elements and apply styles. It’s a generic container with no semantic meaning. Divs allow us to divide the page into different blocks and apply styling to those blocks.\n\u0026lt;span\u0026gt;: An inline-level element used to group text or inline elements for styling purposes. It’s also a generic container but doesn\u0026rsquo;t affect layout as much as \u0026lt;div\u0026gt;.\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;p\u0026gt;This is a \u0026lt;span class=\u0026#34;highlight\u0026#34;\u0026gt;highlighted\u0026lt;/span\u0026gt; word.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;\rMain reference Mozilla CSS values and units can be used to learn the various types of values possible in absolute or relative terms.\nMozilla CSS Properties Reference can be used to learn if a particular CSS property is inherited or not; look for the Inherited field inside the Formal Definition section. Here’s an example for the CSS color property.\n","date":"2024-11-06","id":93,"permalink":"/personal-site/docs/html-css/css/declaration/","summary":"\u003cp\u003eA \u003cstrong\u003eDeclaration\u003c/strong\u003e is a key-value pair that defines a style rule in CSS. It is composed of two parts:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eProperty\u003c/strong\u003e: An identifier (human-readable name) that specifies the feature to be styled.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eValue\u003c/strong\u003e: Describes how the feature should be handled by the browser engine.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"declaration-block\"\u003e\u003cstrong\u003eDeclaration Block\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eA declaration block is a group of one or more declarations enclosed in curly braces (\u003ccode\u003e{}\u003c/code\u003e), and each declaration is separated by a semicolon (\u003ccode\u003e;\u003c/code\u003e).\u003c/p\u003e","tags":[],"title":"Declaration"},{"content":"There are three primary methods to add CSS to an HTML document: External CSS, Internal CSS, and Inline CSS. Let’s break down each method:\n1. External CSS External CSS involves creating a separate CSS file and linking it to HTML document. This is done using the void \u0026lt;link\u0026gt; element inside the \u0026lt;head\u0026gt; section of the HTML.\nThe href attribute specifies the location of the CSS file, and the rel attribute defines the relationship between the HTML file and the linked CSS file (which will always be stylesheet).\n\u0026lt;!-- index.html --\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt;\r/* styles.css */ div { color: white; background-color: black; } p { color: red; }\rAdvantages of External CSS: Separation of concerns: Keeps HTML and CSS files separate, making the HTML cleaner and smaller. Reusability: You only need to edit the CSS in one place, and those styles will apply to every HTML page linked to that CSS file. This is especially useful for websites with multiple pages that share similar styles. 2. Internal CSS Internal CSS, or embedded CSS, involves placing the CSS rules directly inside the HTML document. The CSS is placed within the \u0026lt;style\u0026gt; tag inside the \u0026lt;head\u0026gt; section of the HTML.\nPlace your CSS rules between the opening and closing \u0026lt;style\u0026gt; tags in the \u0026lt;head\u0026gt; section of your HTML document. This method is useful when you want to style a single HTML page without affecting others. HTML with Internal CSS:\n\u0026lt;head\u0026gt; \u0026lt;style\u0026gt; div { color: white; background-color: black; } p { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;Sample content\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Some text\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;\rAdvantages of Internal CSS: Ideal for applying styles to a single page or when you\u0026rsquo;re testing out different styles quickly. No need to create and maintain a separate CSS file for simple styles on one page. Disadvantages of Internal CSS: Does not keep styles separate from content, which can make the HTML file larger and less maintainable, especially for larger projects. Not reusable across multiple pages (unlike External CSS). 3. Inline CSS Inline CSS applies styles directly to individual HTML elements using the style attribute. This method allows you to specify styles directly within the HTML tag itself.\nHow to Use Inline CSS Add the style attribute to an HTML element. Place the CSS declaration(s) within the style attribute. Each declaration is separated by a semicolon. HTML with Inline CSS:\n\u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;color: white; background-color: black;\u0026#34;\u0026gt;Content goes here\u0026lt;/div\u0026gt; \u0026lt;p style=\u0026#34;color: red;\u0026#34;\u0026gt;Some text here\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;\rAdvantages of Inline CSS: Useful for quickly testing or applying one-off styles to specific elements. No need to write separate CSS files or use \u0026lt;style\u0026gt; tags. Disadvantages of Inline CSS: Poor maintainability: Styles are applied directly to elements, which can make the HTML messy and harder to maintain. Redundancy: You’ll need to repeat the same styles across different elements if they share the same styling, which can lead to repetitive code. Overrides other styles: Inline styles have the highest specificity, meaning they can override other CSS rules (including external and internal styles). Summary of Methods Method When to Use Pros Cons External CSS When you have multiple pages or want separation of concerns Clean, reusable across multiple pages Requires an extra HTTP request for the CSS file Internal CSS For single-page styles or testing Easy to apply to a single page Not reusable across pages; can make HTML bulky Inline CSS For quick, one-off styling of elements Quick to implement Hard to maintain, can lead to redundancy ","date":"2024-11-06","id":94,"permalink":"/personal-site/docs/html-css/css/adding-css/","summary":"\u003cp\u003eThere are three primary methods to add CSS to an HTML document: \u003cstrong\u003eExternal CSS\u003c/strong\u003e, \u003cstrong\u003eInternal CSS\u003c/strong\u003e, and \u003cstrong\u003eInline CSS\u003c/strong\u003e. Let’s break down each method:\u003c/p\u003e","tags":[],"title":"Adding CSS"},{"content":"MDN’s lesson on the box model. Inline boxes !\nEvery element on a webpage is essentially a rectangular box, and the Box Model describes the structure of these boxes. Margin, Border, Padding and Content is what is called box model. * {outline: 2px solid red} marking boxes.\nThe model consists of the following components:\nContent: The actual content of the element, such as text or images. Padding: The space between the content and the border. Border: Surrounds the padding (if any) and content. Margin: The space outside the border, separating elements from each other. 1. Margin The margin is the space outside the element’s border, separating it from other elements. CSS Tricks page on margins\nDefault Margin The default margin for most elements (especially block-level elements) is usually 8px, but it can be removed by setting it to 0.\nCollapsing Margins If two elements have adjacent margins (i.e., one is directly above or below the other), the larger margin will \u0026ldquo;collapse\u0026rdquo; and be applied instead of combining the two. For example:\nIf the bottom margin of the first element is 15px and the top margin of the second element is 20px, the space between the two elements will be 20px (not 35px). Centering Elements Horizontally Using Margins To horizontally center a block element:\nSet display: block; to the element (block elements are naturally placed on their own line). The element must have a defined width. Set margin-left: auto; and margin-right: auto;. .element { width: 300px; margin-left: auto; margin-right: auto; }\rmargin-left: auto; pushes the element to the left. margin-right: auto; pushes it to the right, dividing the remaining space equally on both sides, thus centering the element. Margin Shorthand The margin can be set using shorthand notation:\nmargin: 10px; — applies 10px to all four sides. margin: 10px 20px 30px 40px; — follows the \u0026ldquo;clock method\u0026rdquo;: Top: 10px Right: 20px Bottom: 30px Left: 40px If only two values are given:\nmargin: 20px auto; — 20px for top and bottom, and auto for left and right (centers horizontally). 2. Padding Padding is the space between the content of an element and its border. It increases the internal space within a box.\nPadding Shorthand Padding can be applied to all four sides at once using shorthand:\npadding: 10px; — applies 10px padding to all sides. padding: 10px 20px 30px 40px; — follows the same \u0026ldquo;clock method\u0026rdquo; as margin: Top: 10px Right: 20px Bottom: 30px Left: 40px If two values are provided:\npadding: 20px 10px; — 20px for top and bottom, 10px for left and right. 3. Border and Border Radius The border is the area between the content/padding and the margin. It is often used to visually separate elements.\nThe border can be set with:\nWidth: The thickness of the border. Style: The type of border (solid, dashed, dotted, etc.). Color: The color of the border. element { border: 8px solid blue; }\rBorder Radius The border-radius property is used to round the corners of an element’s border.\nelement { border-radius: 10px; }\r4. Content The content of a box refers to the actual text, images, or other elements inside it.\nHeight and Line Height: height: 24px; — this sets the height of the content area (excluding padding and borders). line-height: 24px; — this sets the height of a line of text, which can affect vertical alignment. Box Sizing The box-sizing property controls how the width and height of an element are calculated.\ncontent-box (default) In the content-box model, the width and height of the box are applied to the content only. The padding and border are added on top of the content width and height, making the total size of the element larger than the declared width and height.\nbox-sizing: content-box;\rif you set width: 300px; and the element has padding and borders, the total width will be larger than 300px. Here the size of the box will be width + paddig + border so if width is 300px it is the width of the content of the box but not the box. border-box In the border-box model, the width and height include the padding and border. This means the total width or height is exactly what you set, with padding and borders inside the defined dimensions.\nbox-sizing: border-box;\rif width: 300px;, the padding and border will be included inside this 300px width. Best Practice To apply border-box globally (for all elements), you can use the following rule:\n* { margin: 0; padding: 0; border: 0; box-sizing: border-box; }\rThis resets the box model for all elements, making layout calculations easier.\nSummary of the Box Model Properties Property Description Shorthand Example Margin Space outside the border of an element. margin: 10px 20px 30px 40px; Padding Space between the content and the border. padding: 10px 20px; Border A line surrounding the padding and content. border: 8px solid blue; Content The actual content of the box (text, images, etc.). height: 24px; or line-height: 24px; Box-sizing Defines how the total width and height of the box are calculated. box-sizing: border-box; or content-box; Additional resources Learn CSS Box Model box-sizing: border-box Scrim on the box model. Slaying The Dragon for understanding the box model. ","date":"2024-11-06","id":95,"permalink":"/personal-site/docs/html-css/css/box-model/","summary":"\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model\"\u003eMDN’s lesson on the box model\u003c/a\u003e. Inline boxes !\u003c/p\u003e\n\u003cp\u003eEvery element on a webpage is essentially a rectangular box, and the \u003cstrong\u003eBox Model\u003c/strong\u003e describes the structure of these boxes.\nMargin, Border, Padding and Content is what is called box model.\u003ccode\u003e * {outline: 2px solid red}\u003c/code\u003e marking boxes.\u003c/p\u003e","tags":[],"title":"Box Model"},{"content":"Flexbox Resource\nFlexbox is a layout model in CSS designed to arrange items into rows or columns. It allows items to flex (grow or shrink) based on defined rules, giving us more control over the alignment, spacing, and distribution of elements in a container.\nFlex Containers and Flex Items Flexbox involves two main concepts:\nFlex Container: This is the parent element that has display: flex applied to it. It acts as a wrapper for the child elements. Flex Items: These are the child elements inside the flex container, which will be arranged based on the flex properties of the container. Any element can be both a flex container and a flex item. flex containers can be nested, applying display: flex to a flex item and then arranging its children using flexbox again (i.e., creating nested flexboxes).\nCentering Buttons with Flexbox \u0026lt;div class=\u0026#34;button-container\u0026#34;\u0026gt; \u0026lt;button\u0026gt;Button 1\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;Button 2\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;\r.button-container { display: flex; /* Establish flexbox on the container */ justify-content: center; /* Align the buttons horizontally in the center */ } button { margin: 0 10px; /* Optional: Space between buttons */ }\rExplanation:\nFlex Container: The \u0026lt;div class=\u0026quot;button-container\u0026quot;\u0026gt; is the flex container with display: flex. Flex Items: The two \u0026lt;button\u0026gt; elements are the flex items inside the container. justify-content: center is used to center the buttons horizontally. You can use margin on the buttons to add space between them, or use justify-content: space-around or justify-content: space-between to control spacing automatically. Common Flexbox Properties 1. Flex Container Properties The flex container controls the layout of its direct child elements (flex items).\ndisplay: flex: Establishes the flex container.\nflex-direction: Defines the direction in which the flex items are placed (row, column, etc.).\nrow (default): Items are placed horizontally (left to right). column: Items are placed vertically (top to bottom). justify-content: Aligns the flex items along the main axis (horizontal or vertical depending on flex-direction).\ncenter: Centers items within the container. flex-start: Aligns items to the start of the container. flex-end: Aligns items to the end of the container. space-between: Distributes items evenly with space between them. space-around: Distributes items with equal space around them. space-evenly: Distributes items with equal space between and around them. .container { display: flex; justify-content: space-between; /* Space out items evenly */ }\ralign-items: Aligns the items along the cross axis (perpendicular to the main axis).\nstretch (default): Stretches items to fill the container\u0026rsquo;s height. flex-start: Aligns items to the top (or left if flex-direction: row). flex-end: Aligns items to the bottom (or right if flex-direction: row). center: Centers items vertically (or horizontally). baseline: Aligns items based on their baseline (useful for text). .container { display: flex; align-items: center; /* Vertically centers items in the container */ }\ralign-content: Aligns the flex lines when there is extra space along the cross axis (for multi-line flex containers).\nflex-start, flex-end, center, space-between, space-around, and stretch work similarly as with align-items. 2. Flex Item Properties These properties control the layout and behavior of individual flex items inside a flex container.\nflex-grow: Defines how much a flex item should grow relative to the other items in the container. It is a proportion.\nflex-grow: 1; means the item can grow to take up any available space. A value of 0 means it will not grow. .item { flex-grow: 1; /* Allow this item to grow */ }\rflex-shrink: Defines how much a flex item should shrink relative to the other items when there is not enough space.\nflex-shrink: 1; (default) allows the item to shrink if needed. flex-shrink: 0; means the item will not shrink. .item { flex-shrink: 0; /* Prevent this item from shrinking */ }\rflex-basis: Specifies the initial size of the flex item before any space distribution.\nThis can be a fixed value (e.g., 200px) or auto (where the size is based on the item\u0026rsquo;s content). .item { flex-basis: 100px; /* Set initial size to 100px */ }\rflex: This is a shorthand property for flex-grow, flex-shrink, and flex-basis.\nflex: 1 is a common shorthand, which means the item can grow and shrink, and the initial size is 0. .item { flex: 1; /* Equivalent to flex-grow: 1; flex-shrink: 1; flex-basis: 0; */ }\ralign-self: Overrides the align-items setting for an individual flex item.\nalign-self: center; will center the item vertically (or horizontally depending on the flex-direction). .item { align-self: flex-end; /* Align this item to the end along the cross axis */ }\rColumns in Flexbox By default, Flexbox arranges items in a row. However, you can also create a column layout by using flex-direction: column;.\nCreating Columns in Flexbox When you use display: flex, it places all direct children of the container into rows or columns. However, only direct children are arranged this way. Any nested elements inside those direct children will not automatically be arranged into columns.\nCreating a Column Layout .container { display: flex; flex-direction: column; /* Arrange items in a column */ align-items: center; /* Optionally, center the items horizontally */ }\rImportant Notes:\nFlexbox uses the container\u0026rsquo;s direct children for the layout. If a container has nested elements, those elements will not be arranged in a column unless you apply display: flex to the nested container as well. To make the layout responsive, the flex container width should be set appropriately, especially in responsive designs. Summary of Key Flexbox Properties Property Description Values display: flex Establishes the flex container display: flex; flex-direction Defines the direction of the flex items row, column, row-reverse, column-reverse justify-content Aligns items along the main axis flex-start, flex-end, center, space-between, space-around, space-evenly align-items Aligns items along the cross axis flex-start, flex-end, center, baseline, stretch align-self Overrides align-items for individual flex items auto, flex-start, flex-end, center, baseline, stretch flex-grow Defines the growth factor of a flex item A number (default 0) flex-shrink Defines the shrink factor of a flex item A number (default 1) flex-basis Defines the initial size of a flex item Any valid length (e.g., auto, 100px, 20%) flex Shorthand for flex-grow, flex-shrink, and flex-basis flex: 1; or flex: [grow] [shrink] [basis] align-content Aligns multiple lines of flex items in the container flex-start, flex-end, center, space-between, space-around, stretch Interneting Is Hard tutorial on CSS layouts with flexbox. Slaying the dragon tutorial on Flexbox in 8 minutes. ","date":"2024-11-06","id":96,"permalink":"/personal-site/docs/html-css/css/flexbox/","summary":"\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox\"\u003eFlexbox Resource\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFlexbox is a layout model in CSS designed to arrange items into rows or columns. It allows items to \u003cstrong\u003eflex\u003c/strong\u003e (grow or shrink) based on defined rules, giving us more control over the alignment, spacing, and distribution of elements in a container.\u003c/p\u003e","tags":[],"title":"Flexbox"},{"content":"Flexbox makes it easy to create responsive layouts, where flex items can grow, shrink, and adjust according to the available space in the flex container.\nBy manipulating the flex-grow, flex-shrink, and flex-basis properties, we can control how items behave in the layout.\nComponents of Flexibility 1. flex-grow flex-grow determines how a flex item will grow relative to other flex items in the container.\nIt specifies the \u0026ldquo;growth factor\u0026rdquo; for an item. The flex container distributes free space among its flex items according to their flex-grow values. The greater the value of flex-grow, the more space the item will take up compared to the other items. .container { display: flex; } .item1 { flex-grow: 1; /* This item will grow to fill space */ } .item2 { flex-grow: 2; /* This item will grow twice as much as item1 */ }\rflex: 1 1 0% makes all the div grow the same amount. if flex: 2 1 0% is used in any of the other div, it will grow 2 times the size of the other.\n2. flex-shrink flex-shrink defines the \u0026ldquo;shrink factor\u0026rdquo; of a flex item. It determines how a flex item will shrink when there is not enough space in the flex container. Used to prevent overflow.\nIt specifies how much a flex item should shrink when the container is smaller than the total size of all flex items. A flex-shrink value greater than 1 will make an item shrink faster than others. A value of 0 prevents shrinking completely. .container { display: flex; } .item1 { flex-shrink: 1; /* This item will shrink normally */ } .item2 { flex-shrink: 2; /* This item will shrink twice as much as item1 */ }\rIf the total width of item1 and item2 is larger than the available space, item2 will shrink twice as fast as item1.\nThis gets applied only if the size of all flex items are larger than their parent container.\nflex-shrink: 1 is the default value, which means all items will shrink evenly. A higher number can be selected for an item to make it shrink at higher rate.\nEx: Suppose width of 3 div is set to 100 each and the parent div isn\u0026rsquo;t 300, then all div will shrink evenly to fit\nIf any specific item should not shrink below its defined size, then flex-shrink: 0 can be used. It will grow beyond this size but will not shrink below it.\n[!note] When flex-grow and flex-shrink is specified, the flex boxes wont respect the given values of width. They shrink and expand to fill the box.\nWhen flex-grow flex-shrink are 0, they will be completely inflexible.\n3. flex-basis flex-basis sets the initial size of a flex item before it starts growing or shrinking. It defines the item\u0026rsquo;s hypothetical size along the main axis (either width or height).\nIt acts like the width or height of a flex item, depending on the flex direction. The item will start at this size, and then grow or shrink based on the remaining space in the container. The flex-basis value defines the starting point for growth or shrinkage. If flex-basis is set to 0%, it means the item will ignore its natural size and shrink or grow to fill the available space. .container { display: flex; } .item1 { flex-basis: 100px; /* Item will start at 100px wide */ } .item2 { flex-basis: auto; /* Item will use its natural size */ }\rIn this example, item1 will start at 100px wide, and item2 will use its natural width based on its content.\nDefault for flex-basis is auto but in shorthand flex: 1 it will be 0%\nflex-grow, flex-shrink, and flex-basis working together When all three properties are set on a flex item, the item will:\nGrow to take up available space according to its flex-grow value. Shrink to avoid overflow according to its flex-shrink value. Start at the size specified by flex-basis. Important Note:\nIf flex-grow and flex-shrink are both set to 0, the item will not grow or shrink, and will remain at its initial size based on flex-basis. By default, flex-grow is 0, flex-shrink is 1, and flex-basis is auto. flex Shorthand The flex property is a shorthand for the three flex properties: flex-grow, flex-shrink, and flex-basis. You can use this shorthand to apply all three properties at once, making the CSS cleaner and more concise.\nBasic Values of flex 1. flex: auto .item { flex: 1 1 auto; }\rThis is equivalent to:\nflex-grow: 1; flex-shrink: 1; flex-basis: auto;\rThe item will grow and shrink as necessary, making it flexible but its size will be based on its natural size (either width or height), but it will still absorb available space if needed.\n2. flex: positive-number .item { flex: 1; /* Equivalent to flex-grow: 1, flex-shrink: 1, flex-basis: 0 */ }\rthat is flex: 1 1 0 Makes it receive the free space proportionately. This will make the item grow evenly along with others. The item will have a base size of 0, and will grow to absorb free space equally with other items that also have flex: 1.\n3. flex: initial .item { flex: initial; }\rThis is equivalent to:\nflex-grow: 0; flex-shrink: 1; flex-basis: auto;\rThe item will not grow, but it will shrink if needed to fit the container. The item will use its natural size as the basis.\n4. flex: none .item { flex: none; }\rThis is equivalent to:\nflex-grow: 0; flex-shrink: 0; flex-basis: auto;\rThe item is completely inflexible. It will maintain its natural size and will not grow or shrink, even if there is available space or overflow.\nPractical Use Cases for Flexbox Flexibility Even Growth: To have all items grow equally to fill the available space, use flex: 1 on all items. Fixed Items with Flexible Items: To make one item flexible (growing/shrinking) while others stay fixed, set flex: 1 on the flexible item and leave others with flex: none or no flex value. Prevent Shrinking: To ensure an item does not shrink below its base size, use flex-shrink: 0. Adaptive Layouts: Combine flex-grow, flex-shrink, and flex-basis to create responsive layouts that adjust based on the container\u0026rsquo;s size. Summary Property Description Example Values flex-grow Defines how much a flex item will grow relative to others 1 (grow equally), 2 (grow twice as much), 0 (no growth) flex-shrink Defines how much a flex item will shrink to prevent overflow 1 (default), 2 (shrink faster), 0 (no shrinking) flex-basis Sets the initial size of the flex item before growing/shrinking auto (natural size), 0 (ignore natural size) flex (shorthand) A shorthand for flex-grow, flex-shrink, and flex-basis 1, 0 1 auto, none (no flexibility) Resource links General Shorthand Properties Shorthand flex documentation Flex documentation\nCSS Channel Demo Video on Flexbox\n","date":"2024-11-06","id":97,"permalink":"/personal-site/docs/html-css/css/flex-flexibility/","summary":"\u003cp\u003eFlexbox makes it easy to create responsive layouts, where flex items can grow, shrink, and adjust according to the available space in the flex container.\u003cbr\u003e\nBy manipulating the \u003cstrong\u003eflex-grow\u003c/strong\u003e, \u003cstrong\u003eflex-shrink\u003c/strong\u003e, and \u003cstrong\u003eflex-basis\u003c/strong\u003e properties, we can control how items behave in the layout.\u003c/p\u003e","tags":[],"title":"Flex Flexibility"},{"content":"Flexbox operates along two main axes: the main axis and the cross axis.\nKey Flexbox Properties: justify-content: Aligns items along the main axis. (Row for row) align-items: Aligns items along the cross axis. (Column for row) Main Axis and Cross Axis Main Axis: This is the primary axis along which flex items are arranged. It is determined by the flex-direction property.\nWhen flex-direction: row (the default), the main axis runs horizontally (left to right). When flex-direction: column, the main axis runs vertically (top to bottom). Cross Axis: The axis that runs perpendicular to the main axis.\nWhen flex-direction: row, the cross axis runs vertically (top to bottom). When flex-direction: column, the cross axis runs horizontally (left to right). Changing the Orientation of Flex Items The flex-direction property defines the direction of the main axis and affects how flex items are aligned:\nflex-direction: row (default): Arranges items horizontally from left to right. flex-direction: row-reverse: Items are arranged horizontally, but from right to left. flex-direction: column: Arranges items vertically from top to bottom. flex-direction: column-reverse: Items are arranged vertically, but from bottom to top. Default Behavior of flex-direction: row Items are arranged in a row (horizontally) and take up the full width of the container. If you use flex: 1 on each item, the items will grow equally to fill the available space in the container. Behavior with flex-direction: column When flex-direction: column is set, items are stacked vertically. Here, height becomes the main dimension (instead of width). With flex: 1, the items will grow vertically and take up equal amounts of space along the column, but if flex-basis: 0 is used, the items collapse and shrink. To ensure items respect their height, use flex: 1 1 auto. Note: By default, block-level elements (like divs) in flex-direction: column will collapse to height: auto, meaning they\u0026rsquo;ll shrink to fit their content unless specified otherwise.\nGap Between Items The gap property adds spacing between flex items, similar to adding margins but specifically designed for grid and flex layouts.\ngap: 8px: Adds 8px space between all flex items. gap: 10px 20px: Adds 10px gap between rows and 20px gap between columns. This is a relatively new feature but provides a cleaner and more consistent way to manage space between items than using margins.\nUsing margin: auto for Alignment margin-left: auto;: Pushes the item to the right by taking up all available space to the left. margin-right: auto;: Pushes the item to the left by taking up all available space to the right. This is a great way to center elements (either horizontally or vertically) within a flex container.\nFlexbox Cheat Sheet Cheat Sheet for flexbox\nHere’s a quick reference for some commonly used Flexbox properties:\nGeneral Properties display: Enables Flexbox for all children\ndisplay: flex; — Applies Flexbox layout to the container. display: inline-flex; — Same as flex, but the container behaves like an inline element. flex-direction: Establishes the main axis of the flex container\nflex-direction: row; — Items are arranged horizontally (default). flex-direction: row-reverse; — Items are arranged horizontally, but reversed (right to left). flex-direction: column; — Items are arranged vertically. flex-direction: column-reverse; — Items are arranged vertically, but reversed (bottom to top). flex-wrap: Wraps items to a new line if they can\u0026rsquo;t all fit in one\nflex-wrap: nowrap; — No wrapping (all items stay in a single line). flex-wrap: wrap; — Items wrap onto multiple lines if needed. flex-wrap: wrap-reverse; — Items wrap onto multiple lines in reverse order. Alignment and Distribution justify-content: Aligns items along the main axis\njustify-content: flex-start; — Aligns items to the start of the container. justify-content: flex-end; — Aligns items to the end of the container. justify-content: center; — Centers items along the main axis. justify-content: space-evenly; — Distributes items evenly, with equal space between them. justify-content: space-between; — Distributes items with space between them, but no space at the start or end. justify-content: space-around; — Distributes items with equal space around them. align-items: Aligns items along the cross axis\nalign-items: flex-start; — Aligns items to the start of the cross axis. align-items: flex-end; — Aligns items to the end of the cross axis. align-items: center; — Centers items along the cross axis. align-items: baseline; — Aligns items based on their baseline. align-items: stretch; — Stretches items to fill the container along the cross axis. align-content: Aligns multiple lines of items (affects only when there’s more than one line)\nalign-content: flex-start; — Aligns the lines to the start of the container. align-content: flex-end; — Aligns the lines to the end of the container. align-content: center; — Centers the lines. align-content: space-between; — Distributes the lines with equal space between them. align-content: space-around; — Distributes the lines with space around them. align-content: stretch; — Stretches the lines to fill the container. For Individual Children order: integer;: Explicitly sets the order of flex items. Items with lower values will appear before those with higher values.\norder: 2; The item will appear second in the flex container. align-self: \u0026lt;alignment\u0026gt;;: Aligns individual items along the cross axis, overriding the align-items setting for that particular item.\nalign-self: flex-end; — This item will align itself at the end of the cross axis, even if the others are aligned differently. flex-grow: \u0026lt;number\u0026gt;;: Defines how much the item will grow relative to other flex items. If set to 1, it will grow to fill any available space.\nflex-grow: 1; — The item will grow to fill the available space. flex-shrink: \u0026lt;number\u0026gt;;: Defines how much the item will shrink relative to others. By default, items shrink when space is tight.\nflex-shrink: 2; — This item will shrink twice as fast as others. flex-basis: \u0026lt;value\u0026gt;;: Sets the initial size of an item before growing or shrinking.\nflex-basis: 200px; — The item starts with a size of 200px. Putting It All Together flex: 1; — This shorthand means flex-grow: 1, flex-shrink: 1, and flex-basis: 0. It allows the item to grow and shrink evenly, filling available space in the container. flex: 1 1 auto; — This allows the item to grow and shrink, but it starts at its natural size based on its content. This beautiful Interactive Guide to Flexbox Typical use cases of Flexbox is an MDN article The CSS Tricks “Guide to Flexbox” is a classic. ","date":"2024-11-06","id":98,"permalink":"/personal-site/docs/html-css/css/axes-in-flexbox/","summary":"\u003cp\u003eFlexbox operates along two main axes: the \u003cstrong\u003emain axis\u003c/strong\u003e and the \u003cstrong\u003ecross axis\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3 id=\"key-flexbox-properties\"\u003e\u003cstrong\u003eKey Flexbox Properties:\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ejustify-content\u003c/code\u003e\u003c/strong\u003e: Aligns items along the \u003cstrong\u003emain axis\u003c/strong\u003e. (Row for row)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ealign-items\u003c/code\u003e\u003c/strong\u003e: Aligns items along the \u003cstrong\u003ecross axis\u003c/strong\u003e. (Column for row)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"main-axis-and-cross-axis\"\u003e\u003cstrong\u003eMain Axis and Cross Axis\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eMain Axis\u003c/strong\u003e: This is the primary axis along which flex items are arranged. It is determined by the \u003ccode\u003eflex-direction\u003c/code\u003e property.\u003c/p\u003e","tags":[],"title":"Axes in Flexbox"},{"content":"A utility class in CSS is a class that is designed to apply a single, specific property to an element. Unlike traditional classes that might group together several properties to style an element, utility classes focus on applying a single CSS rule, which allows you to easily reuse it across different elements.\nCreate a class with one property:\n.italic { font-style: italic; }\rApply it in the HTML:\n\u0026lt;p class=\u0026#34;italic\u0026#34;\u0026gt;This is italicized text.\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;italic\u0026#34;\u0026gt;This div will also have italicized text.\u0026lt;/div\u0026gt;\rAdvantages of Utility Classes:\nSimpler and more maintainable: You define the CSS once, and then apply it wherever it\u0026rsquo;s needed. Easier to remove styles: If you decide you no longer want the style, you can simply remove the utility class from the HTML element. Faster development: You can quickly add styles without having to write a whole class for each situation. To apply the same property to multiple elements, use multi-cursor editing. In many code editors (e.g., VS Code), you can select multiple occurrences of the same text (like a class name) by pressing Ctrl + D (or Cmd + D on Mac). This allows you to edit them all simultaneously.\nInheritance in CSS CSS inheritance is a concept where certain properties applied to a parent element are automatically inherited by its child elements. This can save you time and code by applying styles once to the parent, rather than individually to each child element.\nProperties That Are Inherited Some properties are inherited by default, including many related to typography and text layout. These properties typically affect how text appears across multiple elements and are inherited by child elements automatically.\nCommon inherited properties include:\ncolor font-family font-size font-weight line-height text-align text-transform How to Use Inheritance You can apply a style to a parent element, and its children will inherit those styles without needing to explicitly set them.\nFor example:\nbody { color: darkslategray; font-family: Arial, sans-serif; } h1 { font-size: 2em; } p { font-size: 1em; }\rIn this case, both the h1 and p elements will inherit the color and font-family properties from the body tag. You only need to define them once at the parent level.\nDRY (Don’t Repeat Yourself) Principle in CSS To follow the DRY principle, apply inherited properties to the parent container and let them be inherited by the child elements. This avoids redundancy and keeps your CSS more concise.\n/* Parent element */ body { color: #333; font-family: \u0026#39;Arial\u0026#39;, sans-serif; font-size: 16px; } /* Child elements inherit these properties automatically */ h1, p, div { /* No need to define color, font-family, font-size again */ }\rThis helps reduce repetition and ensures consistency across your website.\nFont Family Stack When defining fonts on a webpage, you usually provide a font stack. This is a list of fonts that the browser should use in the specified order, falling back to the next font in the stack if the first one is unavailable.\nExample of a Font Stack: body { font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, sans-serif; }\r\u0026ldquo;Helvetica Neue\u0026rdquo; is the preferred font. If it’s not available, the browser will use Helvetica. If that’s not available either, it will try Arial. If none of these fonts are available, it will use the default sans-serif font. This ensures that your content remains readable, even if the primary font isn\u0026rsquo;t installed on the user\u0026rsquo;s device.\nMaking a Circle from a Square In CSS, you can transform a square into a circle by using the border-radius property with a value of 50%. This works because the border-radius sets how round the corners of an element are, and a value of 50% will make all four corners fully rounded, turning the shape into a circle.\n.circle { width: 100px; height: 100px; background-color: blue; border-radius: 50%; /* Makes the square a circle */ }\r\u0026lt;div class=\u0026#34;circle\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\rThe element is 100px by 100px, making it a square. The border-radius: 50% makes the square into a perfect circle. This is a simple and powerful way to create circles in web design.\n","date":"2024-11-06","id":99,"permalink":"/personal-site/docs/html-css/css/utility-class-inheritance/","summary":"\u003cp\u003eA \u003cstrong\u003eutility class\u003c/strong\u003e in CSS is a class that is designed to apply a single, specific property to an element. Unlike traditional classes that might group together several properties to style an element, utility classes focus on applying a single CSS rule, which allows you to easily reuse it across different elements.\u003c/p\u003e","tags":[],"title":"Utility Class \u0026 Inheritance"},{"content":"CSS offers various units for defining sizes in styles.\n1. Absolute Units These units are fixed and do not change based on other elements.\nPixels (px) Usage: Good for precise layout control, especially for borders, margins, and padding. Example: .box { width: 300px; height: 200px; border: 1px solid black; }\rWhen to Use: When you need exact measurements. When to Avoid: In responsive designs where scaling is required. Points (pt) Usage: Primarily for print styles. One point is 1/72 of an inch. Example: @media print { body { font-size: 12pt; } }\rWhen to Use: In printed documents. When to Avoid: On screens, as it may not scale well. Inches (in), Centimeters (cm), Millimeters (mm) Usage: Rarely used in web design but can be useful in print styles. Example: @media print { .page { width: 8.5in; height: 11in; } }\rWhen to Use: For print layout. When to Avoid: On web pages, as they may not render as expected on screens. 2. Relative Units These units are relative to another value, typically the parent element\u0026rsquo;s size or the viewport.\nPercentages (%) Usage: Useful for responsive designs, allowing elements to scale based on their container. Example: .container { width: 80%; margin: 0 auto; }\rWhen to Use: For fluid layouts. When to Avoid: When you need fixed sizes for elements. Viewport Units Viewport Width (vw): 1vw is equal to 1% of the viewport\u0026rsquo;s width. Viewport Height (vh): 1vh is equal to 1% of the viewport\u0026rsquo;s height. Example: .full-screen { width: 100vw; height: 100vh; }\rWhen to Use: For full-screen sections or elements. When to Avoid: In nested elements where context changes (e.g., within a scrolling container). Em (em) Usage: Relative to the font size of the element, good for font sizes and spacing. Example: .text { font-size: 2em; /* 2 times the font size of the parent */ }\rWhen to Use: For scalable typography. When to Avoid: In complex nested elements, as it can lead to unexpected sizes. Rem (rem) Usage: Relative to the root (html) font size, ensuring consistency across the site. Example: html { font-size: 16px; /* Base size */ } .text { font-size: 1.5rem; /* 24px */ }\rWhen to Use: For consistent scaling across different components. When to Avoid: When needing local context adjustments. Ch Usage: Relative to the width of the \u0026ldquo;0\u0026rdquo; character in the current font. Example: .input { width: 20ch; /* Width of 20 characters */ }\rWhen to Use: For inputs where character length matters. When to Avoid: For elements where the character width varies greatly. Ex Usage: Relative to the height of the lowercase \u0026ldquo;x\u0026rdquo; in the current font. Example: .text { font-size: 2ex; /* Height based on the font */ }\rWhen to Use: Rarely; not widely supported across browsers. When to Avoid: Due to inconsistencies in rendering. 3. Flex and Grid Units Flexbox:\nFlex-grow: Defines the ability for a flex item to grow. Example: .container { display: flex; } .item { flex-grow: 1; /* Item can grow to fill space */ }\rWhen to Use: When creating flexible layouts. When to Avoid: When exact sizes are needed. CSS Grid:\nFractional Units (fr): Represents a fraction of the available space. Example: .grid { display: grid; grid-template-columns: 1fr 2fr; /* 1/3 and 2/3 of available space */ }\rWhen to Use: For complex, responsive grid layouts. When to Avoid: In simple layouts where other units suffice. 4. CSS Functions calc() Usage: Allows for dynamic calculations. You can mix different units. Example: .box { width: calc(100% - 50px); /* Dynamic width */ }\rWhen to Use: For dynamic layouts. When to Avoid: When not needed for simple cases. min() and max() Usage: Set constraints on sizes. Example: .box { width: min(100%, 800px); /* Width won\u0026#39;t exceed 800px */ }\rWhen to Use: To create responsive designs with limits. When to Avoid: When fixed sizes are required. clamp() Usage: Sets a value that adjusts between a defined minimum and maximum. Example: .text { font-size: clamp(1rem, 2vw, 3rem); /* Responsive font size */ }\rWhen to Use: For responsive typography. When to Avoid: In static designs where sizes must remain unchanged. Conclusion Choosing the right sizing unit in CSS can significantly impact your layout\u0026rsquo;s responsiveness and user experience. Using relative units like em, rem, and viewport units can help create flexible designs, while absolute units like px are best for fixed layouts.\n","date":"2024-11-07","id":100,"permalink":"/personal-site/docs/html-css/css/css_resource/css-size-units/","summary":"\u003cp\u003eCSS offers various units for defining sizes in styles.\u003c/p\u003e\n\u003ch2 id=\"1-absolute-units\"\u003e1. Absolute Units\u003c/h2\u003e\n\u003cp\u003eThese units are fixed and do not change based on other elements.\u003c/p\u003e","tags":[],"title":"CSS Size Units"},{"content":"Colors in CSS can be specified by the following methods:\nPredefined/Cross-browser color names With the currentcolor keyword Hexadecimal colors Hexadecimal colors with transparency RGB colors RGBA colors HSL colors HSLA colors CSS Custom Variable Gradients CSS Color Values Overview Colors in CSS can be specified using various methods, allowing designers flexibility and precision in styling elements. Here’s a breakdown of these methods:\n1. Predefined/Cross-browser Color Names CSS supports 140 predefined color names (e.g., blue, red, coral, brown), which are widely recognized across browsers.\nExample: #p1 { background-color: blue; } /* Blue background */ #p2 { background-color: red; } /* Red background */ #p3 { background-color: coral; } /* Coral background */ #p4 { background-color: brown; } /* Brown background */\r2. The currentcolor Keyword The currentcolor keyword refers to the value of the color property of an element, ensuring that properties like borders can inherit the text color.\nExample: #myDIV { color: blue; /* Blue text color */ border: 10px solid currentcolor; /* Blue border color */ }\rThe border of Div border is blue because the div color is blue.\n3. Hexadecimal Colors Hexadecimal colors are defined using the format #RRGGBB, where RR, GG, and BB represent the intensity of red, green, and blue components, respectively.\nFormat: #RRGGBB or #RGB Example: #p1 { background-color: #ff0000; } /* Red */ #p2 { background-color: #00ff00; } /* Green */ #p3 { background-color: #0000ff; } /* Blue */ .box { background-color: #3498db; /* A specific shade of blue */ }\r4. Hexadecimal Colors With Transparency To add transparency to a hexadecimal color, you can use the format #RRGGBBAA, where AA specifies the alpha channel.\nExample: #p1a { background-color: #ff000080; } /* Red with 50% transparency */ #p2a { background-color: #00ff0080; } /* Green with 50% transparency */ #p3a { background-color: #0000ff80; } /* Blue with 50% transparency */\r5. RGB Colors An RGB color is specified with the rgb() function, using integers (0-255) or percentage values.\nFormat: rgb(red, green, blue) Example: #p1 { background-color: rgb(255, 0, 0); } /* Red */ #p2 { background-color: rgb(0, 255, 0); } /* Green */ #p3 { background-color: rgb(0, 0, 255); } /* Blue */ .box { background-color: rgb(52, 152, 219); /* A specific shade of blue */ }\r6. RGBA Colors RGBA extends RGB by adding an alpha channel for opacity. An RGBA color is specified with the rgba() function: rgba(red, green, blue, alpha)\nThe alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).\nExample: #p1 { background-color: rgba(255, 0, 0, 0.3); } /* Red with 30% opacity */ #p2 { background-color: rgba(0, 255, 0, 0.3); } /* Green with 30% opacity */ #p3 { background-color: rgba(0, 0, 255, 0.3); } /* Blue with 30% opacity */\r7. HSL Colors HSL stands for hue, saturation, and lightness, offering a cylindrical-coordinate representation of colors.\nhsl(hue, saturation, lightness)\nHue is a degree on the color wheel (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue.\nSaturation is a percentage value; 0% means a shade of gray and 100% is the full color.\nLightness is also a percentage; 0% is black, 100% is white.\nExample: #p1 { background-color: hsl(120, 100%, 50%); } /* Green */ #p2 { background-color: hsl(120, 100%, 75%); } /* Light Green */ #p3 { background-color: hsl(120, 100%, 25%); } /* Dark Green */ #p4 { background-color: hsl(120, 60%, 70%); } /* Pastel Green */\rUse: For intuitive adjustments to colors based on hue, saturation, and lightness.\n8. HSLA Colors HSLA extends HSL with an alpha channel for opacity. hsla(hue, saturation, lightness, alpha)\nExample: #p1 { background-color: hsla(120, 100%, 50%, 0.3); } /* Green with 30% opacity */ #p2 { background-color: hsla(120, 100%, 75%, 0.3); } /* Light Green with 30% opacity */ #p3 { background-color: hsla(120, 100%, 25%, 0.3); } /* Dark Green with 30% opacity */ #p4 { background-color: hsla(120, 60%, 70%, 0.3); } /* Pastel Green with 30% opacity */\r9. CSS Custom Properties (Variables) Usage: Define reusable color values throughout your CSS. Example: :root { --main-color: #3498db; /* Define a custom property */ } .box { background-color: var(--main-color); /* Use the custom property */ }\rWhen to Use: For maintaining consistent colors across a site and easy updates. When to Avoid: If you do not need to reuse colors or your project is very small. 10. Gradients Format: linear-gradient() or radial-gradient() Example (Linear): .box { background: linear-gradient(to right, #3498db, #8e44ad); /* Horizontal gradient */ }\rExample (Radial): .box { background: radial-gradient(circle, #3498db, #8e44ad); /* Circular gradient */ }\rWhen to Use: For backgrounds that require a blend of colors. When to Avoid: If the design is too busy or if it affects readability. ","date":"2024-11-07","id":101,"permalink":"/personal-site/docs/html-css/css/css_resource/css-color-values/","summary":"\u003cp\u003eColors in CSS can be specified by the following methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePredefined/Cross-browser color names\u003c/li\u003e\n\u003cli\u003eWith the \u003ccode\u003ecurrentcolor\u003c/code\u003e keyword\u003c/li\u003e\n\u003cli\u003eHexadecimal colors\u003c/li\u003e\n\u003cli\u003eHexadecimal colors with transparency\u003c/li\u003e\n\u003cli\u003eRGB colors\u003c/li\u003e\n\u003cli\u003eRGBA colors\u003c/li\u003e\n\u003cli\u003eHSL colors\u003c/li\u003e\n\u003cli\u003eHSLA colors\u003c/li\u003e\n\u003cli\u003eCSS Custom Variable\u003c/li\u003e\n\u003cli\u003eGradients\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"css-color-values-overview\"\u003eCSS Color Values Overview\u003c/h1\u003e\n\u003cp\u003eColors in CSS can be specified using various methods, allowing designers flexibility and precision in styling elements. Here’s a breakdown of these methods:\u003c/p\u003e","tags":[],"title":"CSS Color Values"},{"content":"","date":"2024-11-07","id":102,"permalink":"/personal-site/docs/html-css/css/css_resource/","summary":"","tags":[],"title":"CSS Reference"},{"content":"Keyboard Shortcuts Ctrl + P: Open Command Palette for search. Ctrl + Shift + P: to toggle left panel (Custom short key) Alt: Create multiple cursor points by holding down. Alt + Shift: Select multiple sections in different areas. Linking and Tagging Tags: #Tag\nLinking Notes:\nBasic Link: [[Note Name]] — Creates a new file if the note doesn’t exist. Alias Naming: [[link | name]] — Use a pipe | to create an alias. Header Links: [[Obsidian#Header 1 | Alias]] — Link to specific headers in a note. Tagged Sections: [[Obsidian#^352532 | toHideTheNumbers]] — Using ^ to tag any small section. Code and Comments Inline Code: code line\nCode Block:\ncode block with language insertions\rLinks:\nExternal: [name](URL) Embed Image: ![name](URL) Example: ![Google](https://www.google.com) Hover Text: [google](https://www.google.com \u0026quot;To bring up a pop up while hovering\u0026quot;)\nInformation Block:\n[!info]\nInformation Block\nFormatting text and links:\nObsidian Help\nNote Block:\n[!note] : Name\nDescription goes here.\nInline Comments: %% comments visible only in editing view %%\nText Formatting Highlighting: ==highlighting== Strikethrough: ~~Strike through~~ Lists and Checklists Unordered Lists: Start with +, -, or *\nOrdered Lists: Start with numbers\nOne Nested one Nested two Two Three Checklist:\n- [ ] for an empty checkbox - [x] for a checked box Example: Task 1 Task 2 Footnotes Creating Footnotes:\nUse [^1] to reference a footnote and [^1]: for the footnote text. Example: Footnote 1 Inline Method: Use text^[footnote] for inline footnotes.\nExample: This is a footnote^[this is the text for the footnote]. Order of numbers can be changed and numbers will change accordingly\nFoot note 1 Another one 2\nImages Embedding Images: ![link text](URL) ![link text](URL \u0026quot;Alt text\u0026quot;) Tables Creating Tables: Use | to separate columns, with --- under headers. Name Column Header Markdown to HTML Conversion Markdown can be converted to HTML for webpages. Check out: Markdown Guide Static Site Generators: Jekyll: Popular generator for building HTML websites from Markdown. GitHub Pages: Offers free hosting for Jekyll sites. Line Breaks To create a line break, leave two or more spaces after a paragraph. Or \u0026lt;br /\u0026gt; can be used. Recommended Tools and Plugins Markdown Editors:\nGhostwriter (cross-platform) Markdown Monster (Windows) ReText (Linux) VS Code Plugins:\nMarkdown Extended Prettier - Code Formatter Markdown Shortcuts Markdown Preview Enhanced Linked to the footnote\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nanother link\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-10-22","id":103,"permalink":"/personal-site/docs/tools/obsidian/","summary":"\u003ch2 id=\"keyboard-shortcuts\"\u003eKeyboard Shortcuts\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eCtrl + P\u003c/code\u003e\u003c/strong\u003e: Open Command Palette for search.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eCtrl + Shift + P\u003c/code\u003e\u003c/strong\u003e:  to toggle left panel (Custom short key)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eAlt\u003c/code\u003e\u003c/strong\u003e: Create multiple cursor points by holding down.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eAlt + Shift\u003c/code\u003e\u003c/strong\u003e: Select multiple sections in different areas.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linking-and-tagging\"\u003eLinking and Tagging\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTags\u003c/strong\u003e: \u003ccode\u003e#Tag\u003c/code\u003e\u003c/p\u003e","tags":[],"title":"Obsidian"},{"content":"Useful Links VS Code Documentation Keyboard Shortcuts Reference Shortcuts in the Editor Side Bar Toggles Ctrl + B : Toggle side bar open and close Ctrl + Shift + E : Open Explorer Ctrl + Shift + F : Open Search Ctrl + Shift + G : Open Source Control (Git) Ctrl + Shift + D : Open Debug Menu Ctrl + Shift + X : Open Extensions General Shortcuts Ctrl + Shift + P or Fn + F1 : Open Command Palette (includes Zen Mode, Minimap) Ctrl + P : Quick file search Ctrl + , : Open Settings Ctrl + Shift + N : New VS Code window Ctrl + \\ : Split Editor File Handling Ctrl + W : Close current file/editor Ctrl + Shift + T : Reopen last closed editor Ctrl + Tab or Ctrl + PgUp/PgDw : Switch through open files Ctrl + Shift + Tab : Reverse switch through open files Text Selection Ctrl + C : Copy the entire line where the cursor is located Ctrl + D : Select the exact word (can be used to select all instances when pressed multiple times) Home / End : Go to the beginning or end of the current line Ctrl + Space : Trigger suggestions Ctrl + L : Select current line Ctrl + Shift + L : Select all instances of the current selection Ctrl + Shift + H : Replace in file Ctrl + F : Find Ctrl + H : Replace Display F11 : Toggle full screen Ctrl + =/- : Zoom in or out Ctrl + Shift + C : Open Command Prompt/Terminal Plugins and Extensions Essential Extensions IntelliSense: Provides smart completions based on variable types, function definitions, and imported modules. Emmet: Offers shorthand syntax for HTML and CSS, expanding into full code snippets. Cascadia Code: A font family from Microsoft designed for coding, includes ligatures. Font Ligatures: Turns groups of characters into a single character for improved readability. Live Server: Launch a local development server with live reload for HTML/CSS previews. Markdown Plugins Markdown Extended: Enhances Markdown editing capabilities. Prettier: Automatically formats code for consistency. Markdown Shortcuts: Provides keyboard shortcuts specifically for Markdown editing. Markdown Preview Enhanced: A powerful Markdown preview tool with extra features. Custom Snippets Create snippets that translate to predefined code, customizable for individual programming languages. This feature is beneficial for advanced users who want to streamline their coding process. Advanced Customization Edit in JSON: Customize settings, shortcuts, and editor behavior in a JSON file for more granular control. Text Wrap: Configure text wrapping preferences. Cursor Customization: Set conditions for cursor behavior in specific file types or locations. Setting Sync: Sync settings, extensions, and keybindings across devices for a consistent development environment. Topics to Consider Integrated Debugging: Setting breakpoints and inspecting variables. Remote Development: Using the Remote Development extensions to work with remote servers or containers. Version Control Integration: How to effectively use Git within VS Code. Task Runner: Automate repetitive tasks like building or running scripts. Live Share: Collaborate with others in real-time through Live Share sessions. ","date":"2024-10-22","id":104,"permalink":"/personal-site/docs/tools/vs-code/","summary":"\u003ch2 id=\"useful-links\"\u003eUseful Links\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://code.visualstudio.com/docs\"\u003eVS Code Documentation\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://go.microsoft.com/fwlink/?linkid=832144\"\u003eKeyboard Shortcuts Reference\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"shortcuts-in-the-editor\"\u003eShortcuts in the Editor\u003c/h2\u003e\n\u003ch3 id=\"side-bar-toggles\"\u003eSide Bar Toggles\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + B\u003c/code\u003e  : Toggle side bar open and close\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + E\u003c/code\u003e  : Open Explorer\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + F\u003c/code\u003e  : Open Search\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + G\u003c/code\u003e  : Open Source Control (Git)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + D\u003c/code\u003e  : Open Debug Menu\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + X\u003c/code\u003e  : Open Extensions\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"general-shortcuts\"\u003eGeneral Shortcuts\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + P\u003c/code\u003e  or \u003ccode\u003eFn + F1\u003c/code\u003e  : Open Command Palette (includes Zen Mode, Minimap)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + P\u003c/code\u003e  : Quick file search\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + ,\u003c/code\u003e  : Open Settings\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + N\u003c/code\u003e  : New VS Code window\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + \\\u003c/code\u003e  : Split Editor\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"file-handling\"\u003eFile Handling\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + W\u003c/code\u003e  : Close current file/editor\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + T\u003c/code\u003e  : Reopen last closed editor\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Tab\u003c/code\u003e  or \u003ccode\u003eCtrl + PgUp/PgDw\u003c/code\u003e  : Switch through open files\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + Tab\u003c/code\u003e  : Reverse switch through open files\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"text-selection\"\u003eText Selection\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + C\u003c/code\u003e  : Copy the entire line where the cursor is located\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + D\u003c/code\u003e  : Select the exact word (can be used to select all instances when pressed multiple times)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHome / End\u003c/code\u003e  : Go to the beginning or end of the current line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Space\u003c/code\u003e  : Trigger suggestions\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + L\u003c/code\u003e  : Select current line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + L\u003c/code\u003e  : Select all instances of the current selection\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + H\u003c/code\u003e  : Replace in file\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + F\u003c/code\u003e  : Find\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + H\u003c/code\u003e  : Replace\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"display\"\u003eDisplay\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eF11\u003c/code\u003e  : Toggle full screen\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + =/-\u003c/code\u003e  : Zoom in or out\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCtrl + Shift + C\u003c/code\u003e  : Open Command Prompt/Terminal\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"plugins-and-extensions\"\u003ePlugins and Extensions\u003c/h2\u003e\n\u003ch3 id=\"essential-extensions\"\u003eEssential Extensions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIntelliSense\u003c/strong\u003e: Provides smart completions based on variable types, function definitions, and imported modules.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEmmet\u003c/strong\u003e: Offers shorthand syntax for HTML and CSS, expanding into full code snippets.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCascadia Code\u003c/strong\u003e: A font family from Microsoft designed for coding, includes ligatures.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFont Ligatures\u003c/strong\u003e: Turns groups of characters into a single character for improved readability.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLive Server\u003c/strong\u003e: Launch a local development server with live reload for HTML/CSS previews.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"markdown-plugins\"\u003eMarkdown Plugins\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMarkdown Extended\u003c/strong\u003e: Enhances Markdown editing capabilities.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePrettier\u003c/strong\u003e: Automatically formats code for consistency.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMarkdown Shortcuts\u003c/strong\u003e: Provides keyboard shortcuts specifically for Markdown editing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMarkdown Preview Enhanced\u003c/strong\u003e: A powerful Markdown preview tool with extra features.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-snippets\"\u003eCustom Snippets\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate snippets that translate to predefined code, customizable for individual programming languages. This feature is beneficial for advanced users who want to streamline their coding process.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"advanced-customization\"\u003eAdvanced Customization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEdit in JSON\u003c/strong\u003e: Customize settings, shortcuts, and editor behavior in a JSON file for more granular control.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eText Wrap\u003c/strong\u003e: Configure text wrapping preferences.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCursor Customization\u003c/strong\u003e: Set conditions for cursor behavior in specific file types or locations.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSetting Sync\u003c/strong\u003e: Sync settings, extensions, and keybindings across devices for a consistent development environment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"topics-to-consider\"\u003eTopics to Consider\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eIntegrated Debugging\u003c/strong\u003e: Setting breakpoints and inspecting variables.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemote Development\u003c/strong\u003e: Using the Remote Development extensions to work with remote servers or containers.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVersion Control Integration\u003c/strong\u003e: How to effectively use Git within VS Code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTask Runner\u003c/strong\u003e: Automate repetitive tasks like building or running scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLive Share\u003c/strong\u003e: Collaborate with others in real-time through Live Share sessions.\u003c/li\u003e\n\u003c/ol\u003e","tags":[],"title":"VS Code"},{"content":"Introduction to Git Pro Git Book: A comprehensive guide to Git. Basic Setup git --version # Check Git version # Change default branch to main git config --global init.defaultBranch main git config --global user.name \u0026#34;Your Name\u0026#34; # Set username git config --get user.name # Retrieve username git config --global user.email \u0026#34;mail@mail.com\u0026#34; # Set email git config --get user.email # Retrieve email git config --global color.ui auto # Enable colored output git config --global pull.rebase false # Disable rebase on pull\rgit pull: This command is used to fetch changes from a remote repository and merge them into your current branch. By default, it performs a merge. Rebasing: This is an alternative to merging where Git re-applies your local changes on top of the changes fetched from the remote.\nConnecting Git to GitHub with SSH Setting Up SSH Key ls ~/.ssh/id_ed25519.pub # Check if SSH key exists ssh-keygen -t ed25519 # Create a new SSH key # Press Enter for default location and no passphrase cat ~/.ssh/id_ed25519.pub # Copy the SSH key\rAdding SSH Key to GitHub Go to Settings → SSH and GPG keys. Click New SSH key and paste the SSH key. Basic Git Commands git status # Show tracked, untracked, staged files git add [file name] # Add specific file to staging area git add . # Add all files to staging area git commit -m \u0026#34;message\u0026#34; # Commit staged files with a message git log # Show commit history q # Exit log view if it\u0026#39;s too long git push # Push changes to the remote repository git push origin main # Push to the main branch\rUsing Git in VS Code Open the terminal in VS Code: code . To set VS Code as the default editor for commit messages: git config --global core.editor \u0026#34;code --wait\u0026#34;\rGitHub to Git Creating a New Repository: In GitHub, click New repository. Select Code, then copy the SSH link (not the HTTP link). Cloning a Repository mkdir repos # Create a new directory cd repos # Navigate to that directory git clone [paste the ssh link] # Clone the repo from GitHub cd [the new folder] # Navigate into the cloned folder git remote -v # Show the linked GitHub repository\rPushing Local Repository to GitHub git init # Initialize a new Git repository git add . # Stage all files git commit -m \u0026#34;message\u0026#34; # Commit the changes # Create an empty repository on GitHub (without README or license) git remote add origin [ssh key] # Link to the GitHub repository git branch -M main # Rename current branch to main (if necessary) git push -u origin main # Push changes to GitHub\rCommit Messages Follow the seven rules of a great Git commit message:\nSeparate subject from body with a blank line. Limit subject line to 50 characters. Capitalize the subject line. Do not end the subject line with a period. Use the imperative mood in the subject line. Wrap the body at 72 characters. Explain what and why in the body, not how. Tutorial Video: Conventional Commits\nBranches Use git branch to see all branches. To create a new branch: git branch \u0026lt;branch_name\u0026gt; # Create a new branch git checkout \u0026lt;branch_name\u0026gt; # Switch to the branch git checkout -b \u0026lt;branch_name\u0026gt; # Create and switch to a new branch git checkout main # Switch back to the main branch\rMerging Branches # Move to the branch you want to merge into git merge \u0026lt;branch_name\u0026gt; # Merge changes from \u0026lt;branch_name\u0026gt;\rMerge Conflicts Occur when changes to the same line in a file are made in different branches. Deleting a Branch git branch -d \u0026lt;branch_name\u0026gt; # Delete a merged branch git branch -D \u0026lt;branch_name\u0026gt; # Force delete an unmerged branch\rPushing a New Branch to GitHub git checkout -b \u0026lt;branch_name\u0026gt; # Create and switch to the new branch git push origin \u0026lt;branch_name\u0026gt; # Push the branch to GitHub git push -u origin \u0026lt;branch_name\u0026gt; # Link the local branch with the remote one\rChanging to an Old Commit git log --oneline # View commit history # Get the commit ID from the log git reset --hard [9digitId] # Reset to that commit (deletes progress) git checkout -b old-state [id] # Create a new branch at the old commit git revert [commit_id] # Revert a specific commit\rAdditional Topics to Explore Git Workflow Models:\nOverview of workflows like Git Flow, GitHub Flow, etc. Remote Management:\nHow to manage multiple remotes and their configurations. Stashing Changes:\nUsing git stash to temporarily save changes. Rebasing:\nIntroduction to rebasing vs. merging and its implications. Using Tags:\nHow to create and manage tags for releases. Working with Submodules:\nOverview of using submodules for managing dependencies. Collaborative Work:\nBest practices for collaborating on GitHub (pull requests, code reviews). Git Hooks:\nIntroduction to hooks for automating tasks at different points in the Git workflow. Git GUI Clients:\nOverview of popular GUI clients for Git and their features. Troubleshooting Common Issues:\nTips for resolving common Git issues (merge conflicts, detached HEAD, etc.). ","date":"2024-10-22","id":105,"permalink":"/personal-site/docs/tools/git-github/","summary":"\u003ch2 id=\"introduction-to-git\"\u003eIntroduction to Git\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control\"\u003ePro Git Book\u003c/a\u003e\u003c/strong\u003e: A comprehensive guide to Git.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"basic-setup\"\u003eBasic Setup\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit --version  \u003cspan class=\"c1\"\u003e# Check Git version\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Change default branch to main\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global init.defaultBranch main\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.name \u003cspan class=\"s2\"\u003e\u0026#34;Your Name\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Set username\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --get user.name                   \u003cspan class=\"c1\"\u003e# Retrieve username\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.email \u003cspan class=\"s2\"\u003e\u0026#34;mail@mail.com\u0026#34;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Set email\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --get user.email                   \u003cspan class=\"c1\"\u003e# Retrieve email\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global color.ui auto             \u003cspan class=\"c1\"\u003e# Enable colored output\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global pull.rebase \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e         \u003cspan class=\"c1\"\u003e# Disable rebase on pull\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003egit pull: This command is used to fetch changes from a remote repository and merge them into your current branch. By default, it performs a merge.\nRebasing: This is an alternative to merging where Git re-applies your local changes on top of the changes fetched from the remote.\u003c/p\u003e","tags":[],"title":"Git \u0026 Github"},{"content":"","date":"2024-10-22","id":106,"permalink":"/personal-site/docs/tools/","summary":"","tags":[],"title":"Tools \u0026 Accesories"},{"content":"","date":"2024-10-22","id":107,"permalink":"/personal-site/docs/bash-linux/","summary":"Reference points of Linux Bash scripting","tags":[],"title":"Bash - Linux Terminal"},{"content":"Bash: A User Interface A shell is a user interface that runs an interpreter. The interpreter is a program that accepts user input, determines how to execute that input, converts it into executable statements, and executes them. The environment\u0026rsquo;s role is to capture definitions and previous commands from the current session, allowing users to easily recall them and simplify their interaction with the system.\nThe development of shells has evolved over time, with major milestones including the Thompson Shell (1971), Mashey Shell, Bourne Shell (1977), C-shell (1978), and TC-Shell (1983). The Bourne Again Shell (Bash), released in 1989, is one of the most popular shells used today.\nBash - Bourne Again SHell (Git Bash - for Windows interaction with Git)\nThe grammar of a shell allows combining existing tools into powerful pipelines and handling large volumes of data automatically. Writing a sequence of commands in a script improves the reproducibility of workflows.\nTerminal Basics $ is the prompt for typing, followed by a blinking text cursor.\nCtrl + Alt + T # Launch terminal Ctrl + Shift + C # Copy from terminal Ctrl + Shift + V # Paste in terminal clear # Clear the terminal\rsu - Switch user to super user sudo - Execute a command with super user permissions apt - Package installer for Debian-based systems Switch between users using su (switch user) or sudo su to switch to root. exit to end the root session. sudo apt update # Update package index sudo apt upgrade # Upgrade installed packages\rShell Command Prompt The shell prompt shows essential information about the user, system, and their current state. A typical prompt looks like this:\nsujith @sujith-Latitude-7490 ~ $\r~ represents the home directory, $ indicates a normal user. When logged in as a root user, the prompt changes to #. The # symbol signifies that the user has root (administrator) privileges.:\nroot @sujith-Latitude-7490 :home/sujith #\rGeneral Syntax of a Shell Command The general structure for a Linux command is:\ncommand [option(s)] [parameter(s)]\r$ ls -F /\r$ is the prompt ls is the command -F is the option/flag / is the parameter (the root directory) Commands, Options, and Parameters A command does not always require arguments or options; it can be called with multiple options and arguments (collectively referred to as parameters).\nOptions change the command\u0026rsquo;s behavior:\nOptions typically follow a hyphen -. Short options start with a single dash (-), e.g., -r, -a.\nLong options start with double dashes (--), e.g., --reverse, --all.\nSome options may act differently in different commands or same way across multiple commands.\n-f / --force for force and -i / --interactive is in cp, mv, rm -r / --recursive perform recursive operation for cp rm -a for all and -h / --help are common in most commands Parameters or Arguments are often required or optional, depending on the command. These specify the target of the command, such as file names or directories.\nEach part is separated by spaces; omitting spaces causes confusion about commands, options, and arguments.\n(e.g., ls-F searches for a command called ls-F, which does not exist)\nNote that case sensitivity matters:\nls -s displays the size of files. ls -S sorts files by size. Common Shell Commands Some common shell commands and their functions include:\ncd: Change the directory\nls: List files in the current directory\npwd: Display the current directory path\nvi or emacs: Text editors for editing files\nwho: Show who is logged in\nwhoami: Display the current username\nhostname: Display the computer’s hostname\nuname: Show system information (e.g., uname -o for the operating system)\narch: Show the computer’s architecture\necho: Print text or values to the screen (e.g., echo $SHELL to display the shell being used)\nbash: Start a new Bash session within the current session\nexit: Exit the current Bash session (If it is the outermost one, it will close the window)\npasswd: Change the user password\nExecuting Multiple Commands Multiple commands can be executed on a single line by separating them with a semicolon ;. This allows you to run multiple commands consecutively, one after the other.\n$ uname -o; echo $SHELL; who; whoami; GNU/Linux /bin/bash sujith seat0 2024-12-24 08:55 (login screen) sujith tty2 2024-12-24 08:55 (tty2) sujith\runame -o shows the operating system type. echo $SHELL displays the shell being used. who lists logged-in users. whoami displays the current username. Tab Completion When typing a directory or command name, pressing Tab will auto-complete the name if there is only one option. Double pressing Tab will show all possible options.\nTyping Doc + Tab may automatically complete to Documents.\n~/Documents/Odin-Project/foundations/java-script/calculator/ Doc tab O tab f tab j tab cal tab\r. refers to the current directory.\ngit add . stages all files in the current directory for Git. In VS Code, navigate to your project directory and use code . to open it. Simply typing code in the terminal launches VS Code. ","date":"2024-10-22","id":108,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-1-basics/","summary":"\u003ch2 id=\"bash-a-user-interface\"\u003e\u003cstrong\u003eBash: A User Interface\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eA \u003cstrong\u003eshell\u003c/strong\u003e is a user interface that runs an interpreter.\nThe \u003cem\u003einterpreter\u003c/em\u003e is a program that accepts user input, determines how to execute that input, converts it into executable statements, and executes them.\nThe \u003cstrong\u003eenvironment\u003c/strong\u003e\u0026rsquo;s role is to capture definitions and previous commands from the current session, allowing users to easily recall them and simplify their interaction with the system.\u003c/p\u003e","tags":[],"title":"Bash - 1 - Basics"},{"content":"Command-Line Editing Bash supports several special keystrokes for command-line editing. These keystrokes are combinations of the Control key, Escape key, or other keys and are based on the emacs text editor.\nControl Key (Ctrl) : Hold the Control key and press the other key. Escape Key (Esc) : Press the Escape key, release it, and then press the other key.\nNavigation and Editing Keystrokes\nCtrl + p / ↑ : Move up in the history list (previous command).\nCtrl + n / ↓ : Move down in the history list (next command).\nCtrl + a : Move the cursor to the beginning of the line.\nCtrl + e : Move the cursor to the end of the line.\nCtrl + d or Delete : Delete the character at the cursor.\nBackspace : Delete the character before the cursor.\nCtrl + w : Delete one word, removing characters from the cursor to the beginning of the word.\nCtrl + k : Delete everything from the cursor to the end of the line.\nCtrl + u : Delete everything from the current command line.\nCtrl + l : Clear the terminal screen but leave the current command line intact.\nText Transformation\nCtrl + y : Yank (paste) the last deleted characters. Esc + u : Uppercase the word from the cursor position to the next space. Esc + l : Lowercase the word from the cursor position to the next space. Esc + c : Capitalize the first letter of the word at the cursor position. Redirection Redirection is the process of using operators to control where input or output from a command goes.\nWriting to a File / Capturing Output \u0026gt; : Redirects output to a file, overwriting its contents.\n$ cat *.txt \u0026gt; newfile.txt\rThis command combines all .txt files in the directory and writes them to newfile.txt. If the file already exists, it will be overwritten.\n\u0026gt;\u0026gt; : Appends output to a file if it already exists.\n$ cat *.txt \u0026gt;\u0026gt; newfile.txt\rThis command appends the content of all .txt files to newfile.txt.\n\u0026lt; : Redirect input to a command.\n$ cat \u0026lt; *.txt\rThis will feed the content of all .txt files as input to the cat command.\nHere Documents (\u0026lt;\u0026lt;) : Accepts input until a specified delimiter is reached.\n$ cat \u0026lt;\u0026lt; quit\rThis will take input until the word quit is typed.\n$ cat \u0026lt;\u0026lt; done \u0026gt; fruit.txt\rThis will take input until done is typed and save it into fruit.txt.\nList and redirect output to a file: This command lists the contents of /home/sujith and writes it to user_entries.txt.\n$ ls -l /home/sujith \u0026gt; user_entries.txt\rCount lines of .pdb files and redirect to a new file: This command counts the number of lines in each .pdb file and writes the result to lengths.txt.\n$ wc -l *.pdb \u0026gt; lengths.txt\rRead and write specific lines from a file: This creates animals-subset.csv containing the first 3 lines of animal.csv.\n$ head -n 3 animal.csv \u0026gt; animals-subset.csv\rThis appends the last 2 lines of animals.csv to animals-subset.csv.\n$ tail -n 2 animals.csv \u0026gt;\u0026gt; animals-subset.csv\rPipes Pipes (|) allow the output of one command to be used as input for another command, enabling efficient chaining of multiple commands.\nBasic Pipe Usage Sort a file and display the smallest value.\n$ sort -n lengths.txt | head -n 1\rThis command sorts lengths.txt numerically and then displays the first line (smallest value).\nChain wc with sort and head.\n$ wc -l *.pdb | sort -n | head -n 1\rThis command counts the lines in all .pdb files, sorts them, and then displays the shortest file.\nPipe output to a new file.\n$ cat *.txt | sort \u0026gt; newfile.txt\rThis command concatenates all .txt files, sorts their contents, and writes the sorted output to newfile.txt.\nUsing Tilde Expansion In Bash, tilde expansion allows the ~ symbol to represent the home directory, eliminating the need to type the full path /home/username/.\nChange to the home directory:\n$ cd ~\rList .txt files in the home directory:\n$ ls ~/*.txt\r* is a wildcard that replaces everything found and there are more. it is termed as filename expansion. ls -l *.txt the .*txt is replaced by all the files before execution.\nBrace Expansion Brace expansion allows for grouping file names or directories that share the same path. It’s useful for creating multiple files or directories in one go.\nList specific files or directories:\n$ ls -l /home/{one,two/{.,stuff},underwood,overwood/{.,lyrics,music}}\rHere the . are used to include the current directories also.\nThis will expand to:\n/home/one\r/home/two\r/home/two/.stuff\r/home/two/stuff\r/home/underwood\r/home/overwood\r/home/overwood/.lyrics\r/home/overwood/music\rHistory List All entered commands are stored in a history list. Can be viewed by typing history.\nsujith@sujith-Latitude-7490:~/Desktop$ cd Desktop/; history \u0026gt; comm.txt;\rCreates a file (comm.txt) containing all the commands typed, which can have thousands of commands.\nThe history list can store a maximum of 1000 commands. Older commands are discarded when the list exceeds this limit.\nThe number preceding the command in the history list can be used to recall it. Using !100 recalls the command at position 100 in the history list.\nRecalling Instructions from the History List !! : Recalls and runs the last instruction. !n : Recalls and runs the n-th instruction from the history list. !str : Recalls the latest instruction that uniquely starts with str. Using parameters from the last command:\ncommand !^ : Issues the command and uses the first parameter/option from the last instruction. command !$ : Issues the command and uses the last parameter/option from the last instruction. command !* : Issues the command and uses all parameters/options from the last instruction. ls -l !^ ls -l !$ ls !*\rRecalling Previous Instructions to Edit or Display \u0026lt;up arrow\u0026gt; or Ctrl + p : Retrieve the last instruction in the history list. \u0026lt;down arrow\u0026gt; or Ctrl + n : Move forward in the history list. Can also use:\n!!:p : Prints the last instruction from the history list. !:2000 : Prints the 2000th instruction from the history (may not work if there are fewer than 2000 entries). !:str : Prints the last instruction that starts with str. Options for the history Command history -c : Clears the history list.\nhistory -d n : Deletes the n-th entry from the history list, causing the remaining entries to shift up.\nhistory -r filename : Loads the history list from filename and replaces the current history list. (Note: Previous history numbers may be appended to the commands.)\nhistory -w filename : Writes the current history list to a file.\nhistory -a filename : Appends the current history list to a file.\nhistory -n filename : Reads from filename, adding any new lines not already in the current history list to the current history.\n","date":"2024-10-22","id":109,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-2-features/","summary":"\u003ch3 id=\"command-line-editing\"\u003e\u003cstrong\u003eCommand-Line Editing\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eBash supports several special keystrokes for command-line editing. These keystrokes are combinations of the \u003cstrong\u003eControl\u003c/strong\u003e key, \u003cstrong\u003eEscape\u003c/strong\u003e key, or other keys and are based on the \u003ccode\u003eemacs\u003c/code\u003e text editor.\u003c/p\u003e","tags":[],"title":"Bash - 2 - Features"},{"content":"Linux provides several forms of support, with the most commonly used being the man (manual) pages.\n--help : Pass this option to any command to see the available options.\ncd --help ls --help mkdir --help\rhelp : Provides help for built-in shell commands.\nhelp cd help echo # Works for built-in commands only\rFor commands with both long (--option) and short (-o) versions, use the short version in the terminal and the long version in scripts for clarity.\nman Pages man is the manual for a command (if it exists). It expects the name of the command as its argument and displays the corresponding man page.\nman ls man mkdir\rIn the manual:\nSpace or B to scroll down. N to navigate between search hits. Shift + N to navigate backwards. Note: man cd doesn\u0026rsquo;t exist because cd is a built-in shell function. Use --help instead.\nThe man page is displayed within the vi editor (view/search mode only).\nA man page typically contains sections like:\nName Synopsis Description Options Configuration Files Exit Codes Files Other man pages to consult Other Command Line Help whatis whatis : Provides a brief description of a command.\nsujith@sujith-Latitude-7490:~$ whatis ls pwd rm rmdir mkdir touch echo ls (1) - list directory contents pwd (1) - print name of current/working directory rm (1) - remove files or directories rmdir (1) - remove empty directories rmdir (2) - delete a directory mkdir (1) - make directories mkdir (2) - create a directory touch (1) - change file timestamps echo (1) - display a line of text\rwhatis also supports the -w option for wildcards.\nsujith@sujith-Latitude-7490:~$ whatis -w mkd* mkdir (1) - make directories mkdir (2) - create a directory mkdirat (2) - create a directory mkdosfs (8) - create an MS-DOS FAT filesystem mkdtemp (3) - create a unique temporary directory\rSearching in /usr/bin To see all available commands which are present in contents of /usr/bin.\nUsing apropos apropos allows finding commands using a description. It takes a string and searches for commands that has description that match the string provided as an argument.\napropos delete apropos delete directory\rUsing \u0026quot; \u0026quot; can help narrow down the search to specific phrases:\napropos \u0026#34;remove directory\u0026#34;\rUsing regular expressions (e.g., .*) to match anything between words:\napropos \u0026#34;remove .* directory\u0026#34; apropos \u0026#34;delete .* directory\u0026#34;\rsujith@sujith-Latitude-7490:~$ apropos \u0026#34;virtual memory\u0026#34; mremap (2) - remap a virtual memory address proc_sys_vm (5) - virtual memory subsystem proc_vmstat (5) - virtual memory statistics tmpfs (5) - a virtual memory filesystem vmstat (8) - Report virtual memory statistics rmdir (2) - delete a directory\rsujith@sujith-Latitude-7490:~$ apropos \u0026#34;user account\u0026#34; userdel (8) - delete a user account and related files usermod (8) - modify a user account\r","date":"2024-10-22","id":110,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-3-help-pages/","summary":"\u003cp\u003eLinux provides several forms of support, with the most commonly used being the \u003cstrong\u003eman (manual)\u003c/strong\u003e pages.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e--help\u003c/code\u003e\u003c/strong\u003e : Pass this option to any command to see the available options.\u003c/p\u003e","tags":[],"title":"Bash - 3 - help pages"},{"content":"Variables and Environment Variables In Bash, variables can be defined from the command line and used later in the same shell session or from within a script.\nAll variables are typically capitalized.\nWhen a variable is available throughout the environment for use, not just one session or script, it is called an environment variable.\nenv The env command can be used to see all the environment variables defined (these can vary across distributions).\nsujith@sujith-Latitude-7490:~/Desktop$ env SHELL=/bin/bash SESSION_MANAGER=local/sujith-Latitude-7490:@/tmp/.ICE-unix/1537,unix/sujith-Latitude-7490:/tmp/.ICE-unix/1537 QT_ACCESSIBILITY=1 PWD=/home/sujith/Desktop LOGNAME=sujith HOME=/home/sujith USERNAME=sujith IM_CONFIG_PHASE=1 LANG=en_US.UTF-8 USER=sujith GNOME_TERMINAL_SERVICE=:1.132 DISPLAY=:0 SHLVL=1 PATH=/home/sujith/.nvm/versions/node/v20.17.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin GDMSESSION=ubuntu DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus NVM_BIN=/home/sujith/.nvm/versions/node/v20.17.0/bin _=/usr/bin/env OLDPWD=/home/sujith\rThese environment variables can also be viewed by using echo where string is the name of the environment variable. To output the value of a variable, use the $ sign before the variable name.\nsujith@sujith-Latitude-7490:~/Desktop$ echo $USER; echo $SHELL; echo $PWD; echo $OLDPWD; sujith /bin/bash /home/sujith/Desktop /home/sujith\rCommon Bash Environment Variables DESKTOP_SESSION: Name of the desktop GUI (e.g., gnome) HISTSIZE: Size of the history list (e.g., 1000) LANG: The specified language and character encoding (e.g., en_US.UTF-8) MAIL: Location of the user\u0026rsquo;s main mail storage OLDPWD: The previous working directory (prior to the current one) PATH: List of directories to search for executable programs PS1: Defines the user prompt SHELL: The user’s default shell PATH is a crucial environment variable in Linux. It contains a list of directories in which the shell searches for executable programs. Most are found in /user/bin /user/sbin\nPATH=/home/sujith/.nvm/versions/node/v20.17.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin\rWithout the PATH variable, you would need to specify the full path to the executable before running any command.\nDefining Variables To store a value in a variable, use an assignment statement.\nThe syntax is VAR=VALUE with no spaces around the equal sign.\nWe can define new variables or redefine existing ones.\n$ FIRST=Sujith $ LAST=kumar $ echo $FIRST $LAST Sujith Kumar\rUsing Single Quotes:\nWhen using single quotes (' '), the Bash interpreter treats the content literally and does not expand the value of variables. So it will not apply $ to retrieve the value from variables.\n$ FULL_NAME=\u0026#39;$FIRST $LAST\u0026#39; $ echo $FULL_NAME $FIRST $LAST\rUsing Double Quotes:\nIf there is any blank space in the Value being assigned, then value has to be in \u0026quot; \u0026quot; When using double quotes (\u0026quot; \u0026quot;), the Bash interpreter will expand variables.\n$ FULL_NAME=\u0026#34;$FIRST $LAST\u0026#34; $ echo $FULL_NAME Sujith Kumar\rIf a command like pwd is stored in a variable and called, Bash will execute it.\nEscape Character (\\):\nThe escape character is used to tell the Bash interpreter to treat the following character literally and not interpret it.\n\\$$AMOUNT escapes the first $, so it is not interpreted as a variable.\nOther Escape Characters:\n\\\\ : outputs a backslash (\\) \\b : backspace \\n : newline \\t : tab \\! , \\$ , \\\u0026amp; , \\; , \\' , \\\u0026quot; : escaping special symbols Aliases An alias is used to define a shortcut for a command.\nSimilar to defining a variable, name can be assigned to a command to shorten its execution.\nTo define an alias, use an assignment statement:\nalias name=\u0026quot;command\u0026quot;\nThe name is the alias, and the command is the Linux command it represents.\nalias ..=\u0026#34;cd ..\u0026#34; alias ~=\u0026#34;cd ~\u0026#34; alias lss=less alias sl=ls alias rm=\u0026#39;rm -i\u0026#39; # -i for interactive mode\rrm is given in single quotes to input the interactive version.\nYou can view all the predefined aliases by typing alias:\nalias egrep=\u0026#39;egrep --color=auto\u0026#39; alias fgrep=\u0026#39;fgrep --color=auto\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; alias l=\u0026#39;ls -CF\u0026#39; alias la=\u0026#39;ls -A\u0026#39; alias ll=\u0026#39;ls -alF\u0026#39; alias ls=\u0026#39;ls --color=auto\u0026#39; alias alert=\u0026#39;notify-send --urgency=low -i \u0026#34;$([ $? = 0 ] \u0026amp;\u0026amp; echo terminal || echo error)\u0026#34; \u0026#34;$(history|tail -n1|sed -e \u0026#39;\\\u0026#39;\u0026#39;s/^\\s*[0-9]\\+\\s*//;s/[;\u0026amp;|]\\s*alert$//\u0026#39;\\\u0026#39;\u0026#39;)\u0026#34;\u0026#39;\rTo remove an alias, use the unalias command:\nunalias ll\r","date":"2024-10-22","id":111,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-4-variables-and-aliases/","summary":"\u003ch3 id=\"variables-and-environment-variables\"\u003e\u003cstrong\u003eVariables and Environment Variables\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eIn Bash, variables can be defined from the command line and used later in the same shell session or from within a script.\u003cbr\u003e\nAll variables are typically capitalized.\u003c/p\u003e","tags":[],"title":"Bash - 4 - Variables and Aliases"},{"content":"The ls command is used to list files and directories in the current directory.\nBasic Usage ls ~/Desktop/trial # Using absolute path ls /Users/sujith/Desktop/trial # Another way using absolute path ls -F Desktop # List contents of Desktop directory\rThese commands display the contents of the Desktop directory (or any specified directory). The -F option appends a character to each file to indicate its type (e.g., / for directories, * for executables).\nUsing ls with Multiple Directories sujith@sujith-Latitude-7490:~$ ls ./ Desktop/ Documents/ Downloads/\rIn this example, the ls command lists the contents of multiple directories. However, using semicolons ; between the commands might not work as intended because semicolons separate commands rather than options.\nsujith@sujith-Latitude-7490:~$ ls .; Desktop/; Documents/; Downloads/; Desktop Downloads Music Public snap Videos Documents grep.txt Pictures repos Templates bash: Desktop/: Is a directory bash: Documents/: Is a directory bash: Downloads/: Is a directory\rThe ls command should be executed separately for each directory or with valid options that do not cause errors.\nLong Listing Format -l option to get a more detailed view of files and directories:\nsujith@sujith-Latitude-7490:~/Desktop$ ls -l\rtotal 24 drwxrwxr-x 4 sujith sujith 4096 Sep 3 15:29 courses drwxr-xr-x 2 sujith sujith 4096 Dec 22 16:11 \u0026#39;MCA Sem1 Text Books\u0026#39; drwxr-xr-x 4 sujith sujith 4096 Dec 18 19:56 obsidian-vaults drwxrwxr-x 7 sujith sujith 4096 Oct 6 15:21 Opage drwxrwxr-x 6 sujith sujith 4096 Dec 24 10:09 pylab drwxrwxr-x 8 sujith sujith 4096 Oct 26 09:04 websites -rw-rw-r-- 1 sujith sujith 68146 Dec 24 12:43 sujith.jpeg -rw-rw-r-- 1 sujith sujith 2957628 Oct 30 13:52 \u0026#39;Option WorkSheet.pdf\u0026#39;\rUnderstanding the Output of ls -l File Type: The first part of file permissions. d represents a directory - represents a regular file l represents a symbolic link\nPermissions (Mode): Shows the file’s access permissions for the owner, group, and others. rw- r-- --- 9 characters combined with file type becomes 10 characters. (. at end of permissions to indicate the SELinux content)\nHard Links: The number of hard links pointing to the file. For files, it is usually 1, and for directories, it is typically 2 but can be more.\nUser, Group: The user who owns the file and the group to which it belongs. For most users the group is the user\u0026rsquo;s private group. sujith sujith\nSize: The size of the file or directory in bytes. 68146 for the sujith.jpeg file.\nLast Modified Date: The last modification date and time of the file or directory. (creation date/time if not modified)\nName: The name of the file or directory. For a symbolic link, the name is followed by -\u0026gt;\nUseful Options for ls Options combined with ls to modify its output:\n-a Show hidden files (those starting with .) and the . (current directory) and .. (parent directory). -A Similar to -a but excludes . and ..\n-g Similar to -l but the owner is not shown -G Group owner is hidden (along with -l)\n-h Displays file sizes in human readable format (KB, MB) (along with -l) -i Shows inode numbers for the files\n-r Reverse alphabetical order of file listing -R Recursive listing (listing all contents of all sub directories)\n-s Size shown in blocks instead of bytes (along with -l) -S Sort files by size (used with -l)\n-t Sorts files by modification time (along with -l) -X Extension based sorting (along with -l)\n-C Displays the output in columns (default behavior). -1 Displays 1 file per line (not to use columns)\nThese options an be combined in any order:\nls -Fal # Combined options (file types, human-readable sizes, and long listing) ls -la # Long listing with hidden files ls -al # Another variation\r","date":"2024-10-22","id":112,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-5-listing-files/","summary":"\u003cp\u003eThe \u003cstrong\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/ls-list\"\u003e\u003cem\u003els\u003c/em\u003e\u003c/a\u003e\u003c/strong\u003e command is used to list files and directories in the current directory.\u003c/p\u003e\n\u003ch4 id=\"basic-usage\"\u003e\u003cstrong\u003eBasic Usage\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els ~/Desktop/trial\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Using absolute path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els /Users/sujith/Desktop/trial\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Another way using absolute path\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -F Desktop\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# List contents of Desktop directory\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThese commands display the contents of the \u003ccode\u003eDesktop\u003c/code\u003e directory (or any specified directory).\nThe \u003ccode\u003e-F\u003c/code\u003e option appends a character to each file to indicate its type (e.g., \u003ccode\u003e/\u003c/code\u003e for directories, \u003ccode\u003e*\u003c/code\u003e for executables).\u003c/p\u003e","tags":[],"title":"Bash - 5 - Listing Files"},{"content":"A shell session consists of an environment that includes all the variables, functions, and other entities defined during the session.\nWhen a session ends (using exit), or when a new session is started within a session (e.g., using bash), the entities defined in that session are no longer available.\nHowever, it is possible to create a new session inside the current one, which is referred to as a subshell or a nested shell.\nA subshell allows you to create a new environment for performing tasks without affecting the parent shell. This is useful for executing commands or running scripts without modifying the original session.\nA item defined in a shell can be made to persist in the subshell by using export. exporting variables from the parent shell to the subshell, ensuring that they are available within the subshell. However, changes made to variables within the subshell will not affect the parent shell.\nexport VAR=value # Exports the variable to the subshell\rexport -f: Exports a function to the subshell. export -p: Displays all exported variables. export -n: Removes the export property from a variable. Configuration Files for Shell Sessions There are four important configuration files in Linux, two for users and two for system administrators:\nThe two profile files execute for both interactive and non interactive sessions. Non interactive session is one where a shell is needed to run a script but there is no user interaction.\nWhen we login to Linux and open a window, we are running an interactive shell. Then both the profile and bashrc scripts will execute.\nFor System Administrators: /etc/profile: This file is executed for all users when they log in. It defines a function called pathmunge. It sets up environment variables such as USER, LOGNAME, MAIL, HOSTNAME, PATH, and other system-wide variables. It is primarily used for system-wide settings. All defined variables are exported. A umask instruction is executed.\n/etc/bashrc: This file is executed for interactive non-login shells. It sets additional environment variables, defines system-wide aliases, and modifies the PATH variable. It is a good place to define system-wide functions and aliases.\nFor Users: ~/.bash_profile: This file is executed for login shells. It typically contains an if statement that checks if the user’s .bashrc exists, and if so, runs it. It can also be used for user-specific environment variables.\n~/.bashrc: This file is executed for non-login interactive shells. It is where users can define their own functions, aliases, and environment variables. It also sources /etc/bashrc to include system-wide settings.\nHow Shell Configuration Files Work When a user logs in:\n/etc/profile is executed first. This file typically contains functions like pathmunge to construct the PATH variable and defines environment variables like USER, LOGNAME, MAIL, and others. It also executes umask to set file creation permissions. /etc/bashrc is executed next, setting additional environment variables and modifying the PATH. It is where system-wide aliases and functions should be defined. Then, ~/.bash_profile executes:\nIt checks if the .bashrc file exists in the user’s home directory, and if so, sources it to run the user-specific configuration. ~/.bashrc:\nIt checks if /etc/bashrc exists and sources it, even though it may have already been executed by /etc/profile. This file concludes by adding local bin directories ($HOME/.local/bin and $HOME/bin) to the PATH variable. You can add custom aliases and functions in this file. Logout and Session Cleanup ~/.bash_logout: This file is invoked when a Bash session is closed. Users can define commands to run before the session ends, such as cleaning up temporary files or logging out of remote sessions. Changes made to these configuration files do not take effect until a new session is started. To apply changes immediately within the current session, the source command can be used to reload a script:\nsource ~/.bashrc\rText Editors: vi and vim vi (or its improved version vim) is the default text editor found in most Linux distributions. It is used for editing text files from the command line. vim (Vi IMproved) offers additional features like syntax highlighting, better search functionalities, and more. While vi is still widely used, vim is recommended due to its enhanced capabilities.\nCompiler vs Interpreter Compiler: A compiler translates the entire source code of a program into machine code (binary code) that can be executed by the computer. It produces an independent executable file. Interpreter: An interpreter directly executes instructions written in a programming language, without converting them into machine code beforehand. It processes the code line by line. Some languages, like Java, use an intermediate bytecode, which is platform-independent. The bytecode is then interpreted by the Java Virtual Machine (JVM), making the code portable across different systems.\n","date":"2024-10-22","id":113,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-6-environment-and-subshell/","summary":"\u003cp\u003eA shell session consists of an environment that includes all the variables, functions, and other entities defined during the session.\u003c/p\u003e","tags":[],"title":"Bash - 6 - Environment and Subshell"},{"content":"Key concepts related to storage and file management in Linux.\nFile Space File space is the physical collection of storage devices (like hard drives or SSDs) used to store files and makes up the locations of all files and directories. This space can be viewed in two ways:\nLogical View: This is the way we interact with files and directories. Files and directories are organized hierarchically and accessed by logical names (e.g., home/user/documents).\nPhysical View: This is the actual layout of the files on physical storage devices. We can view the file space as devices, partitions, mountings and breakdown of the files into their disk block. The files are stored as blocks scattered across disk surfaces.\nOS have commands to show both views but we prefer to see logical view.\nFiles and Directories Files: A file is the smallest logical unit within the file space. It has properties like name, type, and data. Files are stored as a collection of disk blocks. These blocks might not be stored contiguously on the disk and can be scattered.\nDirectories: Directories are used to organize files in a hierarchical structure. Subdirectories can be created within a directory to form a deeper organizational structure.\nPartitioning A partition is a physical division of storage on a device. Linux allows partitions to be mounted into specific locations (directories) in the filesystem. Partitions can be used to separate system files, user files, and virtual memory (swap space).\nMounting: The process of associating a partition with a directory so that the files on the partition are accessible through that directory. For backing up, we can unmount a specific partition containing that content and while unmounted, no one can access it. Other partitions will not be affected.\nLogical Volume Manager (LVM): An alternative to physical partitioning that allows more flexible management of disk space so no restriction on partition growth. It can dynamically allocate disk space without the need for physical partitions, but it may introduce overhead to disk access and also problem loading kernel files.\nLinux offers three separate partitions: /boot, LVM and swap /boot must be separated from LVM and also swap as swap space (virtual memory) is treated differently from rest of the file space and not directly accessed by the user.\nInode An inode is additional part of Linux file space, it is a data structure that stores metadata about a file, such as:\nFile type (regular file, directory, symbolic link, etc.) File owner and group Permissions Timestamps (creation, modification, access times) Pointers to the data blocks on disk that store the file\u0026rsquo;s content Each file, directory, and symbolic link has an associated inode. The inode does not contain the file\u0026rsquo;s name, but the name is associated with the inode through directory entries.\nLinks link is a pointer which points from a file in a directory to its inode which contains pointers to point at the files\u0026rsquo;s physical blocks.\nHard Link: Points directly at the file\u0026rsquo;s inode. A hard link is a direct reference to the inode of a file. Multiple hard links can point to the same inode, and they are indistinguishable from the original file. When the link count of a file (i.e., the number of hard links) is greater than one, the file is still accessible as long as one link exists.\nSymbolic (Soft) Link: Points at a hard link. A symbolic link is a reference to another file or directory by its path. A symbolic link can point to a file in another directory and is distinguishable from regular files by the leading l in the file permissions (lrwxrwxrwx).\nThe name is indicated as link -\u0026gt; file where link is the symbolic link and the file is the item being pointed at. The file will be in another directory.\nThe Top-Level Directory Structure Every Linux distribution has a standard set of top-level directories. Some of the common top-level directories include:\n/boot: Contains files required to boot the system, such as the Linux kernel. /dev: Contains device files, which represent hardware devices. /etc: Contains system configuration files. /home: The home directory for users. /proc: A virtual filesystem providing information about processes and kernel parameters. /var: Contains variable data such as log files and databases. /usr: Contains user binaries, libraries, and documentation. [image of top-level directory structure of Linux]\nRelative and Absolute Paths We will be in current working directory and accessing files in another directory needs specifying a directory path.\nThere are two primary ways to access files:\nAbsolute Path: Starts from the root directory (/) and specifies the full path to a file or directory. /home/user/Documents/file.txt\nRelative Path: Describes the location relative to the current working directory. It does not start with a / and uses . for the current directory and .. for the parent directory. ../Documents/file.txt (moving up one directory and then down into Documents).\nSpecial Directory References:\n. : Represents the current directory. .. : Represents the parent directory. The path can be omitted for executable files if the file is stored in our PATH variable. PATH Variable The PATH environment variable holds a list of directories where executable files are located. When you type a command like ls or cat, the system checks these directories to find the corresponding executable.\n/home/sujith/.nvm/versions/node/v20.17.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin\rPATH variable can be modified, to add new directories:\nPATH=$PATH:/new/directory PATH=new_directory:$PATH\rFilename Arguments and Wildcards Wildcard Expansion (Globbing): Bash allows the use of wildcards (also called globbing) to match multiple files. *: Matches any number of characters. ?: Matches exactly one character. [chars]: Matches one character from the specified list. [char1-char2]: Matches one character within the specified range. [0-9] [a-e] [A-Z] {word1,word2, word3}: Matches any of the specified words. [!chars] match any one character not in the list ls [!a]* means first character not a ls *.txt: Lists all files with a .txt extension. ls f*: Lists all files starting with f.\nls [abc]*: Lists all files starting with either a, b, or c. [] is for one character only. ls [abc][abc][abc]\nls file?.{dat,txt}: Lists files like file1.dat, file2.txt, etc.\n","date":"2024-12-29","id":114,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-7-storage-terminology-in-linux/","summary":"\u003cp\u003eKey concepts related to storage and file management in Linux.\u003c/p\u003e\n\u003ch4 id=\"file-space\"\u003e\u003cstrong\u003eFile Space\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003eFile space is the physical collection of storage devices (like hard drives or SSDs) used to store files and makes up the locations of all files and directories. This space can be viewed in two ways:\u003c/p\u003e","tags":[],"title":"Bash - 7 - Storage Terminology in Linux"},{"content":"Many file commands can operate on many different types of items because Linux treats them all as files. Linux treats various entities such as regular files, directories, symbolic links, pipes, sockets, and device files as files.\nfile Command The file command is used to determine the type of a file. It analyzes the contents of a file and returns a description of its type.\nfile \u0026lt;filename\u0026gt;\rsujith@sujith-Latitude-7490:~$ file /home/sujith/Downloads/Print\\ Resume.pdf /home/sujith/Downloads/Print Resume.pdf: PDF document, version 1.4, 1 page(s) sujith@sujith-Latitude-7490:~$ file /etc/passwd /etc/passwd: ASCII text sujith@sujith-Latitude-7490:~$ file -i /etc/passwd /etc/passwd: text/plain; charset=us-ascii\rThe -i flag adds MIME type information along with the file description.\nCommon File Commands pwd (Print Working Directory) pwd - Displays the current working directory. ~ tilde character at the start of a path mean the current users home directory ~/data refers to /Users/sujith/data, useful for absolute path typing.\ncd (Change Directory) cd - Used to change the current directory.\ncd /home/user/Documents cd ~ # Go to the home directory cd .. # Go to the parent directory cd - # Toggle to previous directory cd / # goes to root directory cd ../.. # goes up two levels (parent of parent)\rls (List Directory Contents) Lists files in the current directory with several options:\nmv (Move or Rename Files) Used to move or rename files and directories.\n-f: Force move (overwrite without prompting). -i: Interactive move (prompt before overwriting). -n: Do not overwrite existing files. mv oldfile.txt newfile.txt mv file1 /home/user/dir/ # Move file1 to a directory\rcp (Copy Files) Copies files or directories.\n-r: Recursive copy (used for directories). -b: Create backups of each destination file. -L: Follow symbolic links. -p: Preserve the original file’s metadata (permissions, timestamps). -v: Verbose mode (shows each step). -I -s Create hard/symbolic link rather than physical copy -u copy only if source is newer than the destination or destination missing cp file1.txt file2.txt # Copy a file cp -r dir1 dir2 # Copy a directory recursively\rrm (Remove Files) Deletes files and directories.\n-f: Force removal (no confirmation). -i: Interactive removal (prompt before each deletion). -r: Recursive removal (for directories). rm file1.txt rm -r dir1 # Remove a directory and its contents\rmkdir (Make Directory) Creates a new directory.\nmkdir newdir\rrmdir (Remove Directory) Removes an empty directory.\nrmdir emptydir\rcat (Concatenate and Display Files) Displays the contents of files.\n-n: Add line numbers to output. -T: Show tab characters as ^I. cat file.txt cat -n file.txt # Display with line numbers\rless (View File Content Page by Page) Displays a file\u0026rsquo;s content one screen at a time.\n-c: Clear the screen before displaying content. -f: Open non-regular files. less file.txt\rmore (View File Content Page by Page) Similar to less, but with fewer features.\n-num #: Specify screen size in rows. +#: Start viewing at a specific line number. more file.txt more -10 file.txt # View file starting at line 10\rhead (Display the First Part of a File) Displays the first 10 lines of a file by default.\n-n #: Specify the number of lines to display. -c #: Display the first number of bytes. head file.txt head -n 5 file.txt # Display the first 5 lines\rtail (Display the End of a File) Displays the last 10 lines of a file by default.\n-n #: Specify the number of lines to display. -c #: Display the last number of bytes. tail file.txt tail -n 5 file.txt # Display the last 5 lines\rfind (Locate Files) Searches for files based on conditions like name, type, size, etc.\nfind /home/user/ -name \u0026#34;*.txt\u0026#34; # Find all .txt files find / -type d -name \u0026#34;mydir\u0026#34; # Find a directory named \u0026#34;mydir\u0026#34;\rcmp (Compare Files) Compares two files byte by byte.\n-i : Ignore case differences. -E : Ignore tabs. -Z : Ignore trailing space -b : Ignore white space -B : Ignore blank lines cmp file1.txt file2.txt\rcut (Remove Portions of Each Line) Extracts parts of lines from a file based on specified delimiters.\n-b: Select bytes. -c: Select characters. -d: Specify a delimiter. -f: Select specific fields. cut -d: -f1 /etc/passwd # Extract first field of /etc/passwd\rwc (Word Count) Counts lines, words, and characters in a file.\n-c: Count characters. -w: Count words. -l: Count lines. wc file.txt wc -l file.txt # Count lines in file\rtouch (Create/Modify File Timestamps) Creates a new empty file or updates the access/modification timestamp of an existing file.\n-a: Update access time. -m: Update modification time. touch newfile.txt # Create a new empty file\rDirectory Stack Commands If you need to manage multiple directories you frequent, you can use the directory stack:\npushd \u0026lt;dirname\u0026gt;: Adds a directory to the stack and changes to it. popd: Removes the top directory from the stack and switches to it. dirs: Displays the contents of the directory stack. ","date":"2024-12-29","id":115,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-8-basic-file-commands/","summary":"\u003cp\u003eMany file commands can operate on many different types of items because Linux treats them all as files.\nLinux treats various entities such as regular files, directories, symbolic links, pipes, sockets, and device files as files.\u003c/p\u003e","tags":[],"title":"Bash - 8 - Basic File Commands"},{"content":"Naming Conventions Avoid spaces; use _ or - instead. Do not start names with - to prevent confusion with options/flags. Stick to characters: 0-9, a-z, ., -, _. Special characters can have different meanings. Use single quotes ' ' for names with spaces or special characters. File Movement and Copy Command Moving (mv), renaming (mv), copying (cp), creating, deleting (rm) files and directories.\nmv mv is used to move or rename both files and directories.\nmv [options] source destination\rTo rename a file, source is the old name and destination is the new name. Otherwise, both need to be in different directories. If destination is a directory without a file name, the file\u0026rsquo;s name is not changed.\nmv fo1.txt ~/temp # moves to temp mv fo1.txt ~/temp/fo2.txt # moves and renames mv *.txt /home/zapp\rTo move a file into the current directory, . can be used as the destination.\nRenaming Files To rename a file or move it to a new location:\nmv [old] [new] # Moves or renames a file\rmv trial/draft.txt trial/quotes.txt # Renames draft.txt to quotes.txt mv draft.txt quotes.txt # Renames within the same directory\rNote: Moving a file to a directory with the same name will silently overwrite the original. Use mv -i to prompt for confirmation.\nTo move files to a different directory:\nmv trial/quotes.txt . # Moves to the current directory mv sucrose.dat maltase.dat ../raw # Moves files to the parent directory\u0026#39;s raw folder\rWe are not allowed to rename multiple files using a single mv command as it has only a single destination parameter. mv *.txt *.dat will cause an error because *.dat means multiple destinations, but it needs to be a single directory or file name.\n-i and -f are interactive and force modes. The difference occurs when a file being moved has the same name at the destination. If not interactive, the destination file is overwritten.\ncp The format is the same as mv:\ncp [options] source destination\rcp [old] [new] # Copies a file cp quotes.txt thesis/quotation.txt # Copies to a new location\rThere are three combinations that can be used:\nDestination is another directory, then the file name remains the same after copying. Destination is a directory and a file name, then the file is copied with a new name. Destination is a filename, then the file is copied into the current directory with a new name. cp fo.txt ~zap/fo1.txt cp *.txt ~ cp ~zapp/foo.txt .\r-i and -f remain the same as mv.\n-b: Creates a backup of every destination file. -I/-s: Creates a hard or symbolic link rather than a physical copy. -u: Copies only if the source is newer than the destination or if the destination is missing. -L: If the source is a symbolic link, it follows the link to the actual file and copies that file, not the link. -v: Provides output for each file copied. (verbose) -p: Preserves the original ownership, permissions, and timestamps. (When cp creates a copy, it\u0026rsquo;s ownership and permissions are updated to that pf the user who issued the command.) -r: Recursive copy for directories and their contents. To copy a directory and all its contents, use -r:\ncp -r thesis thesis_backup # Copies the entire directory\rOperations with Multiple Files and Directories To copy or move multiple files, list the files followed by the target directory. If given more than one file name followed by a directory name, the directory must be the last argument.\ncp file1.txt file2.txt target_directory/ # Copy multiple files mv file1.txt file2.txt target_directory/ # Move multiple files\rUsing wildcards simplifies this process:\ncp *.txt backup/ # Copies all .txt files to backup/\r$ mkdir backup $ cp cretures/minotaur.dat creatures/unicorn.dat backup/ $ cp minotaur.dat unicorn.dat basilisk.dat # Error occurs with multiple files; use wildcards instead\rWildcards Wildcards represent unknown characters in commands.\nCommon wildcards include:\n*: Represents zero or more characters.\n*.pdb matches all files ending with .pdb. *ethane.pdb matches ethane and methane. p*.pdb matches files starting with p and ending with .pdb. ?: Represents exactly one character.\n?ethane.pdb matches methane.pdb. Using Wildcards in Commands ls *t*ane.pdb # Lists files with \u0026#39;t\u0026#39; and \u0026#39;ane\u0026#39; in their names cp *dataset* backup/datasets # Copies all files with \u0026#39;dataset\u0026#39; in the name ls *t?ne.* # matches octane, pentane ls *t??ne.pdb # matches ethane, methane ls ethane.* # only ethane\rWildcards can be combined for more specific patterns:\nls ???ane.pdb # Matches any three characters followed by \u0026#39;ane.pdb\u0026#39;\rWhen a shell sees a wildcard, it expands the wildcard to create a list of matching filenames before running the preceding command.\nNote: Be cautious when using wildcards, as errors can occur if not handled properly (e.g., *.pdf in a directory with .pdb files).\nUsing Wildcards for Copying $ cp *dataset* backup/datasets # Copy anything with \u0026#39;dataset\u0026#39; in the name to the datasets directory inside backups $ cp *calibration.txt backup/calibration # Copy all calibration files $ cp 2015-11-* send_to_bob/all_november_files/ # Copy just November files $ cp *-23-dataset* send_to_bob/all_datasets_created_on_23rd/ # Copy only 23rd files\rrm rm is the delete command.\nrm [options] file(s)\rIt can work on multiple files by listing, using wildcards, or both.\nrm my_file.txt # Deletes the specified file\rUse rm -i to prompt for confirmation before deletion. rm permanently deletes files, so it\u0026rsquo;s advisable to use -i to ask for confirmation before deleting. The alias for rm can be set as rm -i\nIf too many files are being deleted and you want to override the prompts, use -f, but this can be dangerous: rm -f *.txt.\nrm cannot remove directories directly. To remove a directory and its contents, use the recursive -r option:\nrm -r directory_name # Deletes the directory and all its contents\rTo delete a complete sub-hierarchy and override the prompts, use rm -fr *.\nTo remove files matching a pattern (e.g., all .txt files) with confirmation: rm -i *.txt # Prompts for each .txt file\rNote: The shell does not have a trash bin, so deleted files are permanently removed.\nrmdir is the only way to delete an empty directory. Use rmdir -p to recursively delete parent and current directories.\nmkdir Creating Directories Used to create a directory, in the current directory or a specified path.\n-m --mode: Specify the initial permissions of the directory. -z --context: Specify the SELinux context. mkdir [name] # Create a directory\rThe -p option is used to create multiple directories:\nmkdir -p [path/to/nested/directories] # Creates nested directories mkdir -p ../project/data ../project/results\rTo list all nested subdirectories within a directory, use ls -R.\nTo create multiple directories at once:\nmkdir north south pacific # Creates three separate directories\rExample: To create a directory 2016 with a sub-directory data that contains two directories, processed and raw:\nMethod 1: Step-by-Step Creation\nmkdir 2016 mkdir 2016/data mkdir 2016/data/processed mkdir 2016/data/raw\rMethod 2: Navigating and Creating\nmkdir 2016 cd 2016 mkdir data cd data mkdir processed raw\rMethod 3: Using -p\nmkdir -p 2016/data/{processed,raw} # Creates the full structure in one command\r","date":"2024-12-29","id":116,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-9-file-movement-and-copy-commands/","summary":"\u003ch4 id=\"naming-conventions\"\u003eNaming Conventions\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAvoid spaces; use \u003ccode\u003e_\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e instead.\u003c/li\u003e\n\u003cli\u003eDo not start names with \u003ccode\u003e-\u003c/code\u003e to prevent confusion with options/flags.\u003c/li\u003e\n\u003cli\u003eStick to characters: \u003ccode\u003e0-9\u003c/code\u003e, \u003ccode\u003ea-z\u003c/code\u003e, \u003ccode\u003e.\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e_\u003c/code\u003e. Special characters can have different meanings.\u003c/li\u003e\n\u003cli\u003eUse single quotes \u003ccode\u003e' '\u003c/code\u003e for names with spaces or special characters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"file-movement-and-copy-command\"\u003eFile Movement and Copy Command\u003c/h4\u003e\n\u003cp\u003eMoving (\u003ccode\u003emv\u003c/code\u003e), renaming (\u003ccode\u003emv\u003c/code\u003e), copying (\u003ccode\u003ecp\u003c/code\u003e), creating, deleting (\u003ccode\u003erm\u003c/code\u003e) files and directories.\u003c/p\u003e","tags":[],"title":"Bash - 9 - File Movement and Copy Commands"},{"content":"1. File Creation and Editing Creating a Text File Using the Nano Editor To create a text file with the nano editor:\nnano draft.txt # Opens nano for editing\rEditing in Nano:\nType your content, then save using Ctrl + O, followed by Enter, and exit with Ctrl + X. Note: nano is a simple text editor suitable for plain text files. For more complex editing, consider Emacs, Vim, or graphical editors like Gedit or VS Code. Alternatives: On Windows, you can use editors like Notepad++ or Notepad.\nCreating a Blank File with touch touch my_file.txt # Creates a blank text file\rtouch primarily modifies the last access or modification time of a file. If the file doesn’t exist, it creates an empty one.\n-a: Modifies only the access time. -m: Modifies only the modification time. -t: Allows you to specify a custom timestamp in the format [[CC]YY]MMDDhhmm[.ss]. 2. Text File Viewing and Analysis Word Count with wc The wc command outputs the count of characters (bytes), words (whitespace between characters), and lines (\\n) in a text file.\n-c, -m: Limits count to characters. -l: Line count. -w: Word count. -L: Displays the length of the longest line. wc -l *.pdb # Displays the word count for all .pdb files in the current directory\rPiping the result of a command to wc: Counts the number of lines in the output of ls -l\nls -l | wc -l\rIf wc -l is run without specifying a filename, it waits for input, can exit using Ctrl + C.\nFinding Printable Characters with strings strings sujith.jpeg -n 10\rstrings extracts printable characters from a file, even from binary files like .jpeg. -n number can override the length of strings to search for. 6*\u0026amp;\u0026amp;*6\u0026gt;424\u0026gt;LDDL_Z_|| 6*\u0026amp;\u0026amp;*6\u0026gt;424\u0026gt;LDDL_Z_|| Bm\u0026amp;EmvX{2; !1 0AQ@Paq\r3. Text File Navigation Commands Viewing Files with more, less, and cat cat: Displays the entire content of a file. Best for small files.\nmore: Displays a screen of content at a time. Press \u0026lt;space\u0026gt; to scroll forward, and q to quit.\n-n: Specify the number of lines to show per screen.\n+linenumber: Start viewing from a specific line number.\nless: Similar to more, but allows both forward and backward navigation with arrow keys. To quit, press q.\nBonus: less works like a vi browser, allowing vi-style navigation.\nViewing Specific Parts of a File with head and tail head and tail head: By default, shows the first 10 lines of a file. We can precede the integer with a minus sign to indicate that the program should skip that number of bytes or lines.\nhead -n 5 file.txt: Displays the first 5 lines. head -n -3 file.txt: Shows all but the last 3 lines. head -c -20 file.txt: Stops at the 21st byte of the file. tail: By default, shows the last 10 lines of a file. Precede the integer with plus to indicate the starting point within the file.\ntail -n 5 file.txt: Displays the last 5 lines. tail -n +12 file.txt: Displays the file starting from line 12. 4. Sorting and Manipulating Files Sorting Files with sort The sort command sorts lines of text files / output:\nsort lengths.txt # Sorts alphanumerically by default sort -n # Sorts numerically sort -r # Sorts in reverse order\r-r: Reverse order. -f: Ignore case differences. -n: Numeric sorting. Sort doesn\u0026rsquo;t change the file, but sends results to screen. To sort a file and redirect the output to a new file:\nsort -n lengths.txt \u0026gt; sorted-lengths.txt\r5. File Comparison and Difference Commands Comparing Files with cmp, comm, and diff cmp cmp: Compares two files byte by byte. It stops when the first difference is found, showing the byte and line number.\ncmp file1 file2 -i 100:150 -n 1024\rCompares files one and two, starting at 101 of file1 and 151 of file2. Comparing 1024 bytes.\ncmp can be forced to skip over a specified number of bytes for each file or stop after reaching a specified limit. If no mismatch then no output. The default counting used with cmp -i (--ignore-initial) is a value in bytes (characters)\ncomm comm: Compares two sorted files and outputs three columns:\nColumn 1: Lines only in the first file. Column 2: Lines common to both files. Column 3: Lines only in the second file. -1: Suppress lines unique to the first file. -2: Suppress lines unique to the second file. -3: Suppress lines common to both files.\ndiff diff: Compares two files or directories and outputs differences. Useful for checking changes between files.\n-i: Case-insensitive comparison. -b: Ignore differences in spaces. -y: Output in columns for side-by-side comparison.\nRemoving Duplicate Lines with uniq It operates on a single file, searching for consecutive duplicate lines. Parameters can be used to remove duplicate lines. It does not overwrite the file but the output can be can be moved to a new file.\nuniq file.txt \u0026gt; file_without_duplicates.txt\r-c for counting occurrences, -d for displaying only duplicate lines.\n6. File Manipulation Commands Joining Files with join Joins two sorted files based on a common field (default is field 1).\njoin file1.txt file2.txt\rWhen the two files contain a row that contains that same value, then those two lines are joined together. Lines that do not contain a matching first field are not joined. (Joining tables using a matching keys)\n-1 NUM: Specifies which field to join on in the first file. -2 NUM: Specifies which field to join on in the second file. -i: Ignore case differences. -e uses STRING in place of an empty field -a 1 or -a 2 outputs lines from the first or second file which did not contain a match to the other file.\nMerging Files with paste paste file1.txt file2.txt\rpaste merges files line by line without requiring a common field. The first line is appended to the first line of other file.\nSplitting Files with split split -b 1000 file.txt prefix\rsplit divides a large file into smaller files. By default, each file is 1000 bytes. We specify the file to split and a prefix which is name used for new files.\n-b value: Specifies the byte size per file. -d: Use numeric suffixes (e.g., 00, 01).\nExtracting Data with cut The cut command is used to remove or extract specific sections of each line in a file:\ncut -d , -f 2 animals.csv # Extracts the second field from a comma-delimited file\r-d: Specifies the delimiter (e.g., comma, space). -f: Specifies the field(s) to extract. --complement: Returns everything except the specified fields.\nTo get the three (fields)columns of data within a table which are delimited by tab\ncut -f 3,4,6 file\rif the delimiter was space then it has to specified using -d ' '\nWe can pipe the results of other command to reduce the output.\nTo remove duplicates from the output, you can pipe cut into sort and uniq:\n$ cut -d , -f 2 animals.csv | sort | uniq\rRemoving the duplicates using uniq Using uniq -c gives the count of occurrences for each line in input.\nls -l | cut -c 2-10 outputs only the permissions of the files which starts from 2nd character to 10th.\nsujith@sujith-Latitude-7490:~/Desktop$ ls -l | cut -c 2-10 otal 56 rw-rw-r-- rwxrwxr-x rw-rw-r-- rwxr-xr-x rwxr-xr-x rwxrwxr-x rwxrwxr-x rwxrwxr-x\rTo get the permissions and the file name (getting the first 2-10 chars and also the 9th field where the names are present, with delimiter being space.) ls -l | cut -f 1,9 -d ' ' won\u0026rsquo;t work properly due to unevenness.\n(awk offers better solution that cut for selecting fields)\nExample Workflow cd nart-pacific-gyre wc -l *.txt # Get the word count for all .txt files wc -l *.txt | sort -n | head -n 5 # Display the first five file line counts wc -l *.txt | sort -n | tail -n 5 # Display the last five file line counts\r","date":"2024-12-29","id":117,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-10-file-viewing-and-editing-commands/","summary":"\u003ch2 id=\"1-file-creation-and-editing\"\u003e1. \u003cstrong\u003eFile Creation and Editing\u003c/strong\u003e\u003c/h2\u003e\n\u003ch3 id=\"creating-a-text-file-using-the-nano-editor\"\u003e\u003cstrong\u003eCreating a Text File Using the Nano Editor\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eTo create a text file with the \u003ccode\u003enano\u003c/code\u003e editor:\u003c/p\u003e","tags":[],"title":"Bash - 10 - File Viewing and Editing Commands"},{"content":"File permissions are a mechanism that supports operating system protection, ensuring that users do not misuse system resources like CPU, memory, or the network.\nSince users primarily interact with files, the resources that we protect with permissions are files and directories.\nAccess Control Mechanism Many operating systems implement file permissions using Access Control Lists (ACLs). An ACL is attached to a specific file or directory and lists the users and groups that have access rights to that resource. The list can become lengthy, depending on the number of users.\nEach user or group can have specific access rights to a file.\nThe owner might have read, write, and execute permissions. Other users (members of the group or the world) might have different levels of access, such as read or execute only. Permission Types and Access Rights In Linux, file permissions are defined for three categories:\nOwner (u) Group (g) Others (o), also known as world Access Rights: r (read):\nFor files: Allows viewing, copying, or opening as read-only. For directories: Allows listing the contents with ls. w (write):\nFor files: Allows overwriting or modifying the file. For directories: Allows creating, modifying, or deleting files in the directory. x (execute):\nFor files: Allows executing the file (important for programs or shell scripts). For directories: Allows cd into the directory. Changing Permissions from the Command Line Using the chmod Command chmod (change mode) is used to alter the permissions of a file or directory.\nchmod permissions file(s)\rfile(s) refers to the file(s) or directories to which you want to apply the permissions.\npermissions can be specified in three ways: using symbols (+, -, =), or numeric values (3-digit numbers).\n1. Using + and - for Permission Changes This approach adds (+) or removes (-) specific permissions for the user (u), group (g), or others (o) along with r, w, x\nTo remove write permission for the group and read permission for others:\nchmod g-w,o-r file.txt\rTo add execute permission for the owner and group:\nchmod u+x,g+x file.txt\rTo apply changes to all categories (owner, group, others) at once using a:\nchmod a+x file.txt\r2. Using = to Set Exact Permissions Instead of adding or removing permissions, you can assign permissions directly using =.\nTo assign rwx (read, write, and execute) permissions to the owner, r (read) to the group, and no permissions to others:\nchmod u=rwx,g=r,o= file.txt\rIf you do not specify a category (like u=), it will not change the permissions for that category:\nchmod g=,o= file.txt # Does not change owner permissions\rYou can combine = with + or -:\nchmod u=rwx,g-w,o-r file chmod u=rwx,g-w,o= file chmod u+x,g=r,o-r file chmod u+x,g-w,o= file\r3. Using Numeric Permissions This approach uses 3-digit numbers to represent permissions. Each digit corresponds to the permissions for owner, group, and others, respectively.\nThe numbers are calculated by adding:\n4 for read (r) 2 for write (w) 1 for execute (x) To set rwx (7), r-x (5), and no permissions (0) for owner, group, and others respectively:\nchmod 750 file.txt # rwx (7) for owner, r-x (5) for group, no permissions (0) for others\rBreakdown of Permission Calculation: rwx = 4 + 2 + 1 = 7 r-x = 4 + 1 = 5 --- = 0 = 0 So, 750 represents the permissions rwx r-x ---.\n----- 000\n--x--x--x 111 r----- 400 Many more combinations\n[table of 3 digit permission meaning]\nPermission rwx rw- r-x --- Owner 7 6 5 0 Group 7 6 5 0 Others 7 6 5 0 Changing Ownership and Group Note: Only the root user can change ownership of files. Non-root users can only change the group of a file they own, provided they are a member of the target group.\nCommands to Change Ownership chown is used to change both owner and group of a file or directory.\nchown newowner file(s) chown newowner:newgroup file(s)\rchgrp is used to change only the group of a file.\nchgrp newgroup file(s)\rchown fox /home/fox/*.txt chown www:www /usr/local/apache/htdocs/* chgrp citg /home/fox/citg/project-data.txt\rChanging Permissions from the GUI Many File Browsers allow you to view and change file permissions graphically. You can typically right-click on a file or directory, select Properties, and then navigate to the Permissions tab to make changes.\nAdvanced Permissions There are additional, advanced permission types in Linux that provide more complex control over file access:\n1. SELinux (Security-Enhanced Linux) SELinux provides a more complex and granular mechanism for defining access policies compared to the traditional ugo/rwx permission system. SELinux operates at a higher level, allowing administrators to enforce security policies that go beyond basic file permissions.\n2. User ID (Setuid) and Group ID (Setgid) Setuid (s in the owner’s execute position) is used for executable files. When a user runs a setuid program, it executes with the privileges of the file owner, not the user running it. Setgid (s in the group’s execute position) is used for executable files or directories. When a setgid program is run, it executes with the privileges of the file\u0026rsquo;s group, not the user\u0026rsquo;s group. 3. Sticky Bit The sticky bit is used for directories. When set on a directory, it restricts the deletion of files within the directory so that only the owner of a file can delete or modify it, even if other users have write permissions for the directory.\nSetting the sticky bit on a directory: chmod +t /some/directory\rExample Scenario: A directory with 777 permissions would allow anyone to read, write, or execute files in it. However, when the sticky bit is set, only the file owner can delete or modify their files, even though others can still read and write.\n","date":"2024-12-29","id":118,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-11-file-permissions/","summary":"\u003cp\u003eFile permissions are a mechanism that supports operating system protection, ensuring that users do not misuse system resources like CPU, memory, or the network.\u003c/p\u003e","tags":[],"title":"Bash - 11 - File Permissions"},{"content":"In a filesystem, directories store links to files and subdirectories.\nThese links are primarily categorized into hard links and symbolic links (also called soft links). Both types of links allow files to have multiple names or references, but they function in different ways.\nHard Links A hard link is essentially an additional directory entry that associates a file name with the same inode number.\nAn inode is a data structure that stores information about a file, including its physical location on the disk.\nHow Hard Links Work A hard link consists of a file\u0026rsquo;s name and its associated inode number. Each file and directory has at least one hard link that connects its name in the directory to the inode, which contains the pointers to the actual file data on disk. Inodes contain metadata, such as the file\u0026rsquo;s size, permissions, and the physical disk block locations where the data is stored. A directory typically contains links to files and other directories. These links are always associated with inodes. A file can have multiple hard links, meaning it can be referenced by different names from different locations in the filesystem. All links point to the same inode, and thus, the same data. Characteristics of Hard Links Hard links are efficient because they don’t require additional storage for the content of the file, only another directory entry pointing to the same inode. Hard links can only be created within the same partition. For example, a hard link in /home cannot point to a file in /etc, as these are typically separate partitions. Deleting one hard link does not delete the file. The file will remain in the filesystem until all hard links to it are removed. Example: If a file has two hard links, the link count will be 2. Deleting one link reduces the count to 1, but the file still exists. Only when the last link is deleted does the file get removed from the filesystem. Permissions with Hard Links When creating a hard link, it inherits the permissions of the original file. The link does not have its own permissions; it simply points to the same inode, which determines access. Symbolic Links (Soft Links) A symbolic link (also known as a soft link) is a special type of file that contains a reference to another file or directory in the form of a path. Unlike hard links, symbolic links can span across partitions and point to files or directories located elsewhere in the filesystem.\nHow Symbolic Links Work A symbolic link is essentially a pointer to the original file or directory. It does not point directly to the inode of the target file; instead, it contains a path to the file or directory. This makes symbolic links more flexible but also less efficient than hard links. Symbolic links are identified by the l file type when viewed using the ls -l command. Symbolic links do not increase the link count of the original file, unlike hard links. Characteristics of Symbolic Links Symbolic links can point to files or directories that are located on different partitions or even remote systems. If the target of a symbolic link is deleted or moved, the symbolic link becomes a \u0026ldquo;dead link\u0026rdquo; (i.e., a broken reference that no longer points to an existing file). Deleting a symbolic link does not affect the target file or its link count, as the symbolic link is just a reference to the target, not part of the actual file structure. Permissions with Symbolic Links Symbolic links themselves have their own set of permissions, but they are typically not used to control access to the target file. Instead, permissions are controlled on the target file or directory. If a user does not have permission to access the original file, they won’t be able to follow the symbolic link to access it either. Creating Hard and Symbolic Links The ln command is used to create both hard and symbolic links.\nln [-s] existingfile newfile\rexistingfile: The file that you want to create a link to. newfile: The new link that you want to create. -s: (Optional) This flag is used to create a symbolic link. If omitted, the link created will be a hard link by default. Creating a Hard Link:\nln file1.txt file2.txt\rThis creates a hard link file2.txt that points to the same inode as file1.txt.\nCreating a Symbolic Link:\nln -s /path/to/original/file /path/to/link\rThis creates a symbolic link pointing to /path/to/original/file.\nKey Differences Between Hard and Symbolic Links Feature Hard Link Symbolic Link (Soft Link) Reference Points to the same inode as the original file. Points to the file path, not directly to the inode. Link Count Increases the link count of the file. Does not affect the original file\u0026rsquo;s link count. Cross-Partition Links Cannot span across partitions. Can span across partitions. Target File Deletion File is not deleted until all hard links are removed. If the target is deleted, the symlink becomes a dead link. Efficiency More efficient as it directly refers to the inode. Less efficient due to storing the file path. File Type Representation Displays as a regular file. Displays as a symbolic link (indicated by l in ls -l). Permissions Inherits permissions from the original file. Has its own permissions, but does not control access to the target file. Target Can only link to files within the same filesystem. Can link to files or directories across different filesystems. Common Use Cases Hard Links: Backup systems: Hard links are often used in backup systems to create multiple references to files, saving space without duplicating the data. File management: Allowing multiple names for the same file, useful in cases where you want to organize or move files but keep the same content under different names. Symbolic Links: Shortcut creation: Symbolic links are commonly used to create shortcuts to files or directories. For example, in user directories or for frequently used files. Redirecting files: Symbolic links can be used to point to files that have been moved to a different location, helping maintain compatibility with existing scripts or applications. Cross-partition linking: Because symbolic links can span filesystems, they are useful for linking files across different partitions. ","date":"2024-12-29","id":119,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-12-hard-and-soft-links/","summary":"\u003cp\u003eIn a filesystem, directories store links to files and subdirectories.\u003c/p\u003e\n\u003cp\u003eThese links are primarily categorized into \u003cstrong\u003ehard links\u003c/strong\u003e and \u003cstrong\u003esymbolic links\u003c/strong\u003e (also called soft links). Both types of links allow files to have multiple names or references, but they function in different ways.\u003c/p\u003e","tags":[],"title":"Bash - 12 - Hard and Soft Links"},{"content":"A regular expression (regex) is a string that expresses a pattern. Contains combination of literal characters and meta-characters. The meta-characters modify the literal characters to provide variability.\nThe result is that a regex can match more than just a literal string. regex are used to search for strings for pattern of interest.\n\u0026quot;aeiou\u0026quot; matches only a string. \u0026quot;[aeiou]{5}\u0026quot; this regex will match any string of vowels in lower case (word with five consecutive vowels in any order) using pattern matching\nWild cards allow one way to express patterns, but regex allow for expressing more complex patterns. Some wild card characters are used but their usage differs.\nMetacharacters The regex of Linux was adopted from POSIX (Portable Operating System Interface for Unix) which was the series of standards that OS developers should impliment to ensure Unix or Unix like OS shared features.\nOriginal metacharacters described by POSIX make up the basic regularexpression set. Later extended regular expression was defined by POSIX with same set of metacharacters but without the \\ for some characters.\n","date":"2024-12-29","id":120,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-13-regular-expressions/","summary":"\u003cp\u003eA regular expression (regex) is a string that expresses a pattern.\nContains combination of literal characters and meta-characters.\nThe meta-characters modify the literal characters to provide variability.\u003c/p\u003e","tags":[],"title":"Bash - 13 - Regular Expressions"},{"content":"Linux offers several methods to search for files or directories, with the find command being one of the most powerful and versatile tools.\nFile Browser A file browser provides a graphical interface for searching files. It includes:\nA search bar where you can enter search terms. Drop-down menus to filter by criteria such as modification date, file type, or size. In some cases, file browsers also allow full-text searching, where the search examines both the filename and the contents of text files.\nfind Command The find command is used to search for files and directories based on specific criteria. It’s a flexible and powerful tool with many options and actions.\nBasic Usage To start using find, specify the directory in which to search and the search criteria:\nfind [directory] [expression]\rTo list all files and directories under the current directory:\n$ find .\rThis command will recursively list all files and directories starting from the current directory.\nFiltering by Type You can filter the search results by file type using the -type option:\n-type d: Lists only directories.\n$ find . -type d\r-type f: Lists only files.\n$ find . -type f\rSearching by Name To search for files based on their name, use the -name option with the string or pattern you\u0026rsquo;re looking for.\n$ find . -name \u0026#34;*.txt\u0026#34;\rThis finds all .txt files in the current directory and all its subdirectories. (* gets expanded before expansion)\nNote: Enclose the pattern in quotes to prevent shell expansion of *. Otherwise, it will only search for files named literally *.txt.\nfind /etc -name \u0026#34;*.conf\u0026#34;\rto locate files ending in .conf in the /etc directory.\nTo search case-insensitively, use -iname:\n$ find . -iname \u0026#34;*.txt\u0026#34;\rCombining find with Other Commands You can use find with other commands. For example, to count the lines in all .txt files found by find, use command substitution:\n$ wc -l $(find . -name \u0026#34;*.txt\u0026#34;)\rThis will pass all .txt files to wc -l to count their lines.\nTo count lines in all .dat files and sort the results numerically:\n$ wc -l $(find . -name \u0026#34;*.dat\u0026#34;) | sort -n\rThis command finds all .dat files, counts their lines, and sorts the results.\nThere are three categories of options\nSearch criteria: which -name and -iname are part Options that alter find\u0026rsquo;s behavior. Actions: which control what should happen when it has located an item. The search criteria options Most but not all search expression require a parameter. n indicates an integer (time, size or UID/GID) file indicates filename. test indicates a set of permissions type represents file type or file system type. name is user or group name pattern is regular expression.\n[+-]n for time and size, if the number is by itself then it tries to find an exact match. If the integer is preceded by + then find looks for matches where the property is greater than the integer. -5 looks for property values less than 5.\nSearch Criteria Options find offers many search criteria to refine searches, including time-based, size-based, and type-based options.\nTime-Based Options These options let you search for files based on when they were last accessed or modified:\n-amin [+-]n: Files accessed n minutes ago (use + for older, - for more recent). $ find . -amin -5 # Files accessed in the last 5 minutes\r-mmin [+-]n: Files modified n minutes ago. $ find . -mmin -100 # Files modified in the last 100 minutes\r-atime [+-]n: Files accessed n days ago. -mtime [+-]n: Files modified n days ago. $ find . -mtime +10 # Files modified more than 10 days ago\rSize-Based Options You can search for files based on their size:\n-size [+-]n: Files of a specific size. Use suffixes like c (bytes), k (kilobytes), M (megabytes), etc. $ find . -size +1M # Files larger than 1MB\rn can be followed by b (512-byte blocks), c (byte), w (2-word bytes), k (kilobytes), M (megabytes) and G (Gigabytes) -size +1024c -size +1k -size 1000c means exactly 1000 bytes in size. -size -1000c means less than 1000 bytes in size.\nFile Type Options You can filter by file type:\n-type d: Directories -type f: Regular files -type l: Symbolic links (s - socket, p - pipe, c - characters, b - block) $ find . -type f # Regular files\rPermission-Based Options Search for files based on their permissions:\n-perm: Files with specific permissions. For example, to find files with 755 permissions: $ find . -perm 755\rOwner and Group Search Search for files based on their owner or group:\n-user username: Files owned by a specific user. $ find . -user alice # Files owned by \u0026#39;alice\u0026#39;\r-group groupname: Files belonging to a specific group. $ find . -group staff # Files belonging to the \u0026#39;staff\u0026#39; group\rLogical Operators You can combine multiple conditions using logical operators:\n-and or -a: Represents ANDed conditions.\n$ find . -size +100c -and -size -200c $ find . -size +100c -size -200c $ find . -size +100c -a -200c # Files between 100 and 200 bytes\r-or or -o: Represents ORed conditions.\n$ find . -size +100c -o -name \u0026#34;*.txt\u0026#34; # Files larger than 100 bytes OR .txt files\r-not or !: Negates a condition.\n$ find . -not -type d # Files that are not directories\rfind /dev ! -type c find /dev -not -type c # All files that are not character type.\rWithout parenthesis, not is applied first, followed by and, then or.\nDepth and Mounting Options -maxdepth: Limit the search to a certain depth. $ find . -maxdepth 2 # Search only two levels deep\r-mount: Prevents find from descending into other mounted filesystems. $ find . -mount -name \u0026#34;*.txt\u0026#34; # Only search the current filesystem\r3. Actions with find You can specify actions to take on the found files using options like -exec, -delete, and others.\n-delete: Deletes all files that match the criteria. $ find . -empty -delete # Delete all empty files and directories\r-exec: Executes a command on each found file. For example, to count lines in each file: $ find . -type f -exec wc -l {} \\; # Count lines in each file\r-ok: Similar to -exec, but asks for confirmation before executing the command on each file. $ find . -type f -exec chmod 755 {} \\; # Change permissions, with confirmation\r-ls: Lists the files using ls -l format. $ find . -name \u0026#34;*.txt\u0026#34; -ls\r-prune: Prevents find from descending into directories. $ find . -name \u0026#34;*.txt\u0026#34; -prune # Skip directories\r-quit: Stops the search after finding the first match. $ find . -name \u0026#34;*.txt\u0026#34; -quit # Stop after finding the first .txt file\r4. Other Methods of Locating Files which: Finds the path of an executable file which is present in PATH.\n$ which name $ which ls # Locate the \u0026#39;ls\u0026#39; command\rwhereis: Locates binary, source, and man pages for a command (not reliant on PATH).\n$ whereis man # Locate the \u0026#39;man\u0026#39; command and its files\rlocate: Uses a database to quickly find files. The database must be updated with updatedb.\n$ locate man # Locate files related to \u0026#39;man\u0026#39;\r","date":"2024-12-29","id":121,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-14-file-searching/","summary":"\u003cp\u003eLinux offers several methods to search for files or directories, with the \u003ccode\u003efind\u003c/code\u003e command being one of the most powerful and versatile tools.\u003c/p\u003e","tags":[],"title":"Bash - 14 - File Searching"},{"content":"grep grep stands for \u0026ldquo;global/regular expression/print.\u0026rdquo; It is a powerful tool for searching text and is commonly used in Unix text editors. grep finds and prints lines in files that match a specified pattern.\nBasic Usage To search for a word in a file:\n$ grep not haiku.txt # This retrieves all lines containing \u0026#39;not\u0026#39; in it.\rSearching for Phrases To search for a specific phrase:\n$ grep \u0026#34;is not\u0026#34; haiku.txt\rUsing quotes makes it easier to search for phrases or single words:\n$ grep \u0026#34;not\u0026#34; haiku.txt\rOptions Word Boundary (-w): Limits matches to whole words only. $ grep -w \u0026#34;The\u0026#34; haiku.txt\rLine Numbers (-n): Numbers the results with the line numbers. $ grep -n \u0026#34;it\u0026#34; haiku.txt\rCase Insensitivity (-i): Makes the search case insensitive. $ grep -n -w -i \u0026#34;the\u0026#34; haiku.txt\rInvert Match (-v): Inverts the search to get all lines without the specified pattern. $ grep -v -n -w \u0026#34;the\u0026#34; haiku.txt\rRecursive Search (-r): Searches through all files in the directory and subdirectories. $ grep -r \u0026#34;Yesterday\u0026#34;\rWildcards in grep Searches Regular expressions (regex) allow for more complex pattern matching.\nTo find lines with words having \u0026lsquo;o\u0026rsquo; in the second position:\n$ grep -E \u0026#34;^.o\u0026#34; haiku.txt\r^ anchors the match to the start of the line. . matches any single character. o matches the letter \u0026lsquo;o\u0026rsquo;. Example Breakdown ^.o: Matches any line starting with any character followed by \u0026lsquo;o\u0026rsquo;. ","date":"2024-12-29","id":122,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-15-grep/","summary":"\u003ch2 id=\"greppersonal-sitedocsbash-linuxcommand-docsgrep\"\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/grep\"\u003e\u003cem\u003egrep\u003c/em\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003egrep\u003c/code\u003e stands for \u0026ldquo;global/regular expression/print.\u0026rdquo; It is a powerful tool for searching text and is commonly used in Unix text editors. \u003ccode\u003egrep\u003c/code\u003e finds and prints lines in files that match a specified pattern.\u003c/p\u003e","tags":[],"title":"Bash - 15 - grep"},{"content":"","date":"2024-12-29","id":123,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-16-awk/","summary":"","tags":[],"title":"Bash - 16 - awk"},{"content":"Most commonly used Bash commands:\nls - List directory contents. cd - Change the current directory. pwd - Print the current working directory. cp - Copy files and directories. mv - Move or rename files and directories. rm - Remove files or directories. touch - Create an empty file or update the timestamp of an existing file. mkdir - Create a new directory. rmdir - Remove an empty directory. cat - Concatenate and display file contents. echo - Display a line of text or variables. grep - Search for patterns in files. find - Search for files and directories in a directory hierarchy. chmod - Change file permissions. chown - Change file owner and group. tar - Archive files. wget - Download files from the web. curl - Transfer data to or from a server. man - Display the manual for a command. history - Show the command history. These commands form the backbone of file management and system navigation in the Bash shell.\nhelp These shell commands are defined internally. Type `help\u0026#39; to see this list. Type `help name\u0026#39; to find out more about the function `name\u0026#39;. Use `info bash\u0026#39; to find out more about the shell in general. Use `man -k\u0026#39; or `info\u0026#39; to find out more about commands not in this list. A star (*) next to a name means that the command is disabled. job_spec [\u0026amp;] history [-c] [-d offset] [n] or hist\u0026gt; (( expression )) if COMMANDS; then COMMANDS; [ elif C\u0026gt; . filename [arguments] jobs [-lnprs] [jobspec ...] or jobs \u0026gt; : kill [-s sigspec | -n signum | -sigs\u0026gt; [ arg... ] let arg [arg ...] [[ expression ]] local [option] name[=value] ... alias [-p] [name[=value] ... ] logout [n] bg [job_spec ...] mapfile [-d delim] [-n count] [-O or\u0026gt; bind [-lpsvPSVX] [-m keymap] [-f file\u0026gt; popd [-n] [+N | -N] break [n] printf [-v var] format [arguments] builtin [shell-builtin [arg ...]] pushd [-n] [+N | -N | dir] caller [expr] pwd [-LP] case WORD in [PATTERN [| PATTERN]...)\u0026gt; read [-ers] [-a array] [-d delim] [-\u0026gt; cd [-L|[-P [-e]] [-@]] [dir] readarray [-d delim] [-n count] [-O \u0026gt; command [-pVv] command [arg ...] readonly [-aAf] [name[=value] ...] o\u0026gt; compgen [-abcdefgjksuv] [-o option] [\u0026gt; return [n] complete [-abcdefgjksuv] [-pr] [-DEI]\u0026gt; select NAME [in WORDS ... ;] do COMM\u0026gt; compopt [-o|+o option] [-DEI] [name .\u0026gt; set [-abefhkmnptuvxBCEHPT] [-o optio\u0026gt; continue [n] shift [n] coproc [NAME] command [redirections] shopt [-pqsu] [-o] [optname ...] declare [-aAfFgiIlnrtux] [name[=value\u0026gt; source filename [arguments] dirs [-clpv] [+N] [-N] suspend [-f] disown [-h] [-ar] [jobspec ... | pid \u0026gt; test [expr] echo [-neE] [arg ...] time [-p] pipeline enable [-a] [-dnps] [-f filename] [na\u0026gt; times eval [arg ...] trap [-lp] [[arg] signal_spec ...] exec [-cl] [-a name] [command [argume\u0026gt; true exit [n] type [-afptP] name [name ...] export [-fn] [name[=value] ...] or ex\u0026gt; typeset [-aAfFgiIlnrtux] name[=value\u0026gt; false ulimit [-SHabcdefiklmnpqrstuvxPRT] [\u0026gt; fc [-e ename] [-lnr] [first] [last] o\u0026gt; umask [-p] [-S] [mode] fg [job_spec] unalias [-a] name [name ...] for NAME [in WORDS ... ] ; do COMMAND\u0026gt; unset [-f] [-v] [-n] [name ...] for (( exp1; exp2; exp3 )); do COMMAN\u0026gt; until COMMANDS; do COMMANDS-2; done function name { COMMANDS ; } or name \u0026gt; variables - Names and meanings of so\u0026gt; getopts optstring name [arg ...] wait [-fn] [-p var] [id ...] hash [-lr] [-p pathname] [-dt] [name \u0026gt; while COMMANDS; do COMMANDS-2; done help [-dms] [pattern ...] { COMMANDS ; }\rinfo * Menu: Basics * Common options: (coreutils)Common options. * Coreutils: (coreutils). Core GNU (file, text, shell) utilities. * Date input formats: (coreutils)Date input formats. * Ed: (ed). The GNU line editor * File permissions: (coreutils)File permissions. Access modes. * Finding files: (find). Operating on files matching certain criteria. * Time: (time). time Compression * Gzip: (gzip). General (de)compression of files (lzw). Development * SSIP: (ssip). Speech Synthesis Interface Protocol. * Speech Dispatcher: (speech-dispatcher). Speech Dispatcher. Editors * nano: (nano). Small and friendly text editor. GNU organization * Maintaining Findutils: (find-maint). Maintaining GNU findutils GNU Utilities * dirmngr-client: (gnupg). X.509 CRL and OCSP client. * dirmngr: (gnupg). X.509 CRL and OCSP server. * gpg-agent: (gnupg). The secret key daemon. * gpg2: (gnupg). OpenPGP encryption and signing tool. * gpgsm: (gnupg). S/MIME encryption and signing tool. Individual utilities * arch: (coreutils)arch invocation. Print machine hardware name. * b2sum: (coreutils)b2sum invocation. Print or check BLAKE2 digests. * base32: (coreutils)base32 invocation. Base32 encode/decode data. * base64: (coreutils)base64 invocation. Base64 encode/decode data. * basename: (coreutils)basename invocation. Strip directory and suffix. * basenc: (coreutils)basenc invocation. Encoding/decoding of data. * cat: (coreutils)cat invocation. Concatenate and write files. * chcon: (coreutils)chcon invocation. Change SELinux CTX of files. * chgrp: (coreutils)chgrp invocation. Change file groups. * chmod: (coreutils)chmod invocation. Change access permissions. * chown: (coreutils)chown invocation. Change file owners and groups. * chroot: (coreutils)chroot invocation. Specify the root directory. * cksum: (coreutils)cksum invocation. Print POSIX CRC checksum. * cmp: (diffutils)Invoking cmp. Compare 2 files byte by byte. * comm: (coreutils)comm invocation. Compare sorted files by line. * cp: (coreutils)cp invocation. Copy files. * csplit: (coreutils)csplit invocation. Split by context. * cut: (coreutils)cut invocation. Print selected parts of lines. * date: (coreutils)date invocation. Print/set system date and time. * dd: (coreutils)dd invocation. Copy and convert a file. * df: (coreutils)df invocation. Report file system usage. * diff: (diffutils)Invoking diff. Compare 2 files line by line. * diff3: (diffutils)Invoking diff3. Compare 3 files line by line. * dir: (coreutils)dir invocation. List directories briefly. * dircolors: (coreutils)dircolors invocation. Color setup for ls. * dirname: (coreutils)dirname invocation. Strip last file name component. * du: (coreutils)du invocation. Report file usage. * echo: (coreutils)echo invocation. Print a line of text. * env: (coreutils)env invocation. Modify the environment. * expand: (coreutils)expand invocation. Convert tabs to spaces. * expr: (coreutils)expr invocation. Evaluate expressions. * factor: (coreutils)factor invocation. Print prime factors * false: (coreutils)false invocation. Do nothing, unsuccessfully. * find: (find)Invoking find. Finding and acting on files. * fmt: (coreutils)fmt invocation. Reformat paragraph text. * fold: (coreutils)fold invocation. Wrap long input lines. * groups: (coreutils)groups invocation. Print group names a user is in. * gunzip: (gzip)Overview. Decompression. * gzexe: (gzip)Overview. Compress executables. * head: (coreutils)head invocation. Output the first part of files. * hostid: (coreutils)hostid invocation. Print numeric host identifier. * hostname: (coreutils)hostname invocation. Print or set system name. * id: (coreutils)id invocation. Print user identity. * install: (coreutils)install invocation. Copy files and set attributes. * join: (coreutils)join invocation. Join lines on a common field. * kill: (coreutils)kill invocation. Send a signal to processes. * link: (coreutils)link invocation. Make hard links between files. * ln: (coreutils)ln invocation. Make links between files. * locate: (find)Invoking locate. Finding files in a database. * logname: (coreutils)logname invocation. Print current login name. * ls: (coreutils)ls invocation. List directory contents. * md5sum: (coreutils)md5sum invocation. Print or check MD5 digests. * mkdir: (coreutils)mkdir invocation. Create directories. * mkfifo: (coreutils)mkfifo invocation. Create FIFOs (named pipes). * mknod: (coreutils)mknod invocation. Create special files. * mktemp: (coreutils)mktemp invocation. Create temporary files. * mv: (coreutils)mv invocation. Rename files. * nice: (coreutils)nice invocation. Modify niceness. * nl: (coreutils)nl invocation. Number lines and write files. * nohup: (coreutils)nohup invocation. Immunize to hangups. * nproc: (coreutils)nproc invocation. Print the number of processors. * numfmt: (coreutils)numfmt invocation. Reformat numbers. * od: (coreutils)od invocation. Dump files in octal, etc. * paste: (coreutils)paste invocation. Merge lines of files. * patch: (diffutils)Invoking patch. Apply a patch to a file. * pathchk: (coreutils)pathchk invocation. Check file name portability. * pr: (coreutils)pr invocation. Paginate or columnate files. * printenv: (coreutils)printenv invocation. Print environment variables. * printf: (coreutils)printf invocation. Format and print data. * ptx: (coreutils)ptx invocation. Produce permuted indexes. * pwd: (coreutils)pwd invocation. Print working directory. * readlink: (coreutils)readlink invocation. Print referent of a symlink. * realpath: (coreutils)realpath invocation. Print resolved file names. * rm: (coreutils)rm invocation. Remove files. * rmdir: (coreutils)rmdir invocation. Remove empty directories. * runcon: (coreutils)runcon invocation. Run in specified SELinux CTX. * sdiff: (diffutils)Invoking sdiff. Merge 2 files side-by-side. * seq: (coreutils)seq invocation. Print numeric sequences * sha1sum: (coreutils)sha1sum invocation. Print or check SHA-1 digests. * sha2: (coreutils)sha2 utilities. Print or check SHA-2 digests. * shred: (coreutils)shred invocation. Remove files more securely. * shuf: (coreutils)shuf invocation. Shuffling text files. * sleep: (coreutils)sleep invocation. Delay for a specified time. * sort: (coreutils)sort invocation. Sort text files. * split: (coreutils)split invocation. Split into pieces. * stat: (coreutils)stat invocation. Report file(system) status. * stdbuf: (coreutils)stdbuf invocation. Modify stdio buffering. * stty: (coreutils)stty invocation. Print/change terminal settings. * sum: (coreutils)sum invocation. Print traditional checksum. * sync: (coreutils)sync invocation. Sync files to stable storage. * tac: (coreutils)tac invocation. Reverse files. * tail: (coreutils)tail invocation. Output the last part of files. * tee: (coreutils)tee invocation. Redirect to multiple files. * test: (coreutils)test invocation. File/string tests. * timeout: (coreutils)timeout invocation. Run with time limit. * touch: (coreutils)touch invocation. Change file timestamps. * tr: (coreutils)tr invocation. Translate characters. * true: (coreutils)true invocation. Do nothing, successfully. * truncate: (coreutils)truncate invocation. Shrink/extend size of a file. * tsort: (coreutils)tsort invocation. Topological sort. * tty: (coreutils)tty invocation. Print terminal name. * uname: (coreutils)uname invocation. Print system information. * unexpand: (coreutils)unexpand invocation. Convert spaces to tabs. * uniq: (coreutils)uniq invocation. Uniquify files. * unlink: (coreutils)unlink invocation. Removal via unlink(2). * updatedb: (find)Invoking updatedb. Building the locate database. * uptime: (coreutils)uptime invocation. Print uptime and load. * users: (coreutils)users invocation. Print current user names. * vdir: (coreutils)vdir invocation. List directories verbosely. * wc: (coreutils)wc invocation. Line, word, and byte counts. * who: (coreutils)who invocation. Print who is logged in. * whoami: (coreutils)whoami invocation. Print effective user ID. * xargs: (find)Invoking xargs. Operating on many files. * yes: (coreutils)yes invocation. Print a string indefinitely. * zcat: (gzip)Overview. Decompression to stdout. * zdiff: (gzip)Overview. Compare compressed files. * zforce: (gzip)Overview. Force .gz extension on files. * zgrep: (gzip)Overview. Search compressed files. * zmore: (gzip)Overview. Decompression output by pages. Kernel * grub-dev: (grub-dev). The GRand Unified Bootloader Dev * grub-install: (grub)Invoking grub-install. Install GRUB on your drive * grub-mkconfig: (grub)Invoking grub-mkconfig. Generate GRUB configuration * grub-mkpasswd-pbkdf2: (grub)Invoking grub-mkpasswd-pbkdf2. * grub-mkrelpath: (grub)Invoking grub-mkrelpath. * grub-mkrescue: (grub)Invoking grub-mkrescue. Make a GRUB rescue image * grub-mount: (grub)Invoking grub-mount. Mount a file system using GRUB * grub-probe: (grub)Invoking grub-probe. Probe device information * grub-script-check: (grub)Invoking grub-script-check. * GRUB: (grub). The GRand Unified Bootloader Libraries * RLuserman: (rluserman). The GNU readline library User\u0026#39;s Manual. Math * bc: (bc). An arbitrary precision calculator language. Miscellaneous * dc: (dc). Arbitrary precision RPN \u0026#34;Desktop Calculator\u0026#34;. Network applications * Wget: (wget). Non-interactive network downloader. Sound * SSIP: (ssip). Speech Synthesis Interface Protocol. * Say for Speech Dispatcher: (spd-say). Say. * Speech Dispatcher: (speech-dispatcher). Speech Dispatcher. Texinfo documentation system * info stand-alone: (info-stnd). Read Info documents without Emacs. Text creation and manipulation * Diffutils: (diffutils). Comparing and merging files. * grep: (grep). Print lines that match patterns. * sed: (sed). Stream EDitor. info bash Total manual\r","date":"2024-10-22","id":124,"permalink":"/personal-site/docs/bash-linux/command-docs/bash-commands/","summary":"\u003cp\u003eMost commonly used Bash commands:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/ls-list\"\u003e\u003cstrong\u003els\u003c/strong\u003e\u003c/a\u003e - List directory contents.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/cd-change-directory\"\u003e\u003cstrong\u003ecd\u003c/strong\u003e\u003c/a\u003e - Change the current directory.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/pwd\"\u003e\u003cstrong\u003epwd\u003c/strong\u003e\u003c/a\u003e - Print the current working directory.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/cp-copy\"\u003e\u003cstrong\u003ecp\u003c/strong\u003e\u003c/a\u003e - Copy files and directories.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/mv-move\"\u003e\u003cstrong\u003emv\u003c/strong\u003e\u003c/a\u003e - Move or rename files and directories.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/rm-remove\"\u003e\u003cstrong\u003erm\u003c/strong\u003e\u003c/a\u003e - Remove files or directories.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/touch\"\u003e\u003cstrong\u003etouch\u003c/strong\u003e\u003c/a\u003e - Create an empty file or update the timestamp of an existing file.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/mkdir\"\u003e\u003cstrong\u003emkdir\u003c/strong\u003e\u003c/a\u003e - Create a new directory.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ermdir\u003c/strong\u003e - Remove an empty directory.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/cat-concatenate\"\u003e\u003cstrong\u003ecat\u003c/strong\u003e\u003c/a\u003e - Concatenate and display file contents.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/echo\"\u003e\u003cstrong\u003eecho\u003c/strong\u003e\u003c/a\u003e - Display a line of text or variables.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/personal-site/docs/bash-linux/command-docs/grep\"\u003e\u003cstrong\u003egrep\u003c/strong\u003e\u003c/a\u003e - Search for patterns in files.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efind\u003c/strong\u003e - Search for files and directories in a directory hierarchy.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003echmod\u003c/strong\u003e - Change file permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003echown\u003c/strong\u003e - Change file owner and group.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etar\u003c/strong\u003e - Archive files.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ewget\u003c/strong\u003e - Download files from the web.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecurl\u003c/strong\u003e - Transfer data to or from a server.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eman\u003c/strong\u003e - Display the manual for a command.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehistory\u003c/strong\u003e - Show the command history.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThese commands form the backbone of file management and system navigation in the Bash shell.\u003c/p\u003e","tags":[],"title":"Bash Commands"},{"content":"cat \u0026ndash;help Usage: cat [OPTION]... [FILE]... Concatenate FILE(s) to standard output. With no FILE, or when FILE is -, read standard input. -A, --show-all equivalent to -vET -b, --number-nonblank number nonempty output lines, overrides -n -e equivalent to -vE -E, --show-ends display $ at end of each line -n, --number number all output lines -s, --squeeze-blank suppress repeated empty output lines -t equivalent to -vT -T, --show-tabs display TAB characters as ^I -u (ignored) -v, --show-nonprinting use ^ and M- notation, except for LFD and TAB --help display this help and exit --version output version information and exit Examples: cat f - g Output f\u0026#39;s contents, then standard input, then g\u0026#39;s contents. cat Copy standard input to standard output.\rman cat NAME cat - concatenate files and print on the standard output SYNOPSIS cat [OPTION]... [FILE]... DESCRIPTION Concatenate FILE(s) to standard output. With no FILE, or when FILE is -, read standard input. -A, --show-all equivalent to -vET -b, --number-nonblank number nonempty output lines, overrides -n -e equivalent to -vE -E, --show-ends display $ at end of each line -n, --number number all output lines -s, --squeeze-blank suppress repeated empty output lines -t equivalent to -vT -T, --show-tabs display TAB characters as ^I -u (ignored) -v, --show-nonprinting use ^ and M- notation, except for LFD and TAB --help display this help and exit --version output version information and exit EXAMPLES cat f - g Output f\u0026#39;s contents, then standard input, then g\u0026#39;s contents. cat Copy standard input to standard output.\r","date":"2024-10-22","id":125,"permalink":"/personal-site/docs/bash-linux/command-docs/cat-concatenate/","summary":"\u003ch2 id=\"cat---help\"\u003ecat \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: cat \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eConcatenate FILE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -A, --show-all           equivalent to -vET\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -b, --number-nonblank    number nonempty output lines, overrides -n\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -e                       equivalent to -vE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -E, --show-ends          display $ at end of each line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --number             number all output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --squeeze-blank      suppress repeated empty output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -t                       equivalent to -vT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -T, --show-tabs          display TAB characters as ^I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -u                       \u003cspan class=\"o\"\u003e(\u003c/span\u003eignored\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --show-nonprinting   use ^ and M- notation, except \u003cspan class=\"k\"\u003efor\u003c/span\u003e LFD and TAB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eExamples:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  cat f - g  Output f\u003cspan class=\"s1\"\u003e\u0026#39;s contents, then standard input, then g\u0026#39;\u003c/span\u003es contents.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  cat        Copy standard input to standard output.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-cat\"\u003eman cat\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cat - concatenate files and print on the standard output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cat \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Concatenate FILE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -A, --show-all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              equivalent to -vET\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -b, --number-nonblank\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              number nonempty output lines, overrides -n\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -e     equivalent to -vE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -E, --show-ends\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              display $ at end of each line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n, --number\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              number all output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --squeeze-blank\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              suppress repeated empty output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -t     equivalent to -vT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -T, --show-tabs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              display TAB characters as ^I\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -u     \u003cspan class=\"o\"\u003e(\u003c/span\u003eignored\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --show-nonprinting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use ^ and M- notation, except \u003cspan class=\"k\"\u003efor\u003c/span\u003e LFD and TAB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEXAMPLES\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cat f - g\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Output f\u003cspan class=\"s1\"\u003e\u0026#39;s contents, then standard input, then g\u0026#39;\u003c/span\u003es contents.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cat    Copy standard input to standard output.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"cat - Concatenate"},{"content":"cd \u0026ndash;help cd: cd [-L|[-P [-e]] [-@]] [dir] Change the shell working directory. Change the current directory to DIR. The default DIR is the value of the HOME shell variable. If DIR is \u0026#34;-\u0026#34;, it is converted to $OLDPWD. The variable CDPATH defines the search path for the directory containing DIR. Alternative directory names in CDPATH are separated by a colon (:). A null directory name is the same as the current directory. If DIR begins with a slash (/), then CDPATH is not used. If the directory is not found, and the shell option `cdable_vars\u0026#39; is set, the word is assumed to be a variable name. If that variable has a value, its value is used for DIR. Options: -L\tforce symbolic links to be followed: resolve symbolic links in DIR after processing instances of `..\u0026#39; -P\tuse the physical directory structure without following symbolic links: resolve symbolic links in DIR before processing instances of `..\u0026#39; -e\tif the -P option is supplied, and the current working directory cannot be determined successfully, exit with a non-zero status -@\ton systems that support it, present a file with extended attributes as a directory containing the file attributes The default is to follow symbolic links, as if `-L\u0026#39; were specified. `..\u0026#39; is processed by removing the immediately previous pathname component back to a slash or the beginning of DIR. Exit Status: Returns 0 if the directory is changed, and if $PWD is set successfully when -P is used; non-zero otherwise.\r","date":"2024-10-22","id":126,"permalink":"/personal-site/docs/bash-linux/command-docs/cd-change-directory/","summary":"\u003ch2 id=\"cd---help\"\u003ecd \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecd: \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e-L\u003cspan class=\"p\"\u003e|\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e-P \u003cspan class=\"o\"\u003e[\u003c/span\u003e-e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e-@\u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003edir\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Change the shell working directory.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Change the current directory to DIR.  The default DIR is the value of the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    HOME shell variable. If DIR is \u003cspan class=\"s2\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e, it is converted to \u003cspan class=\"nv\"\u003e$OLDPWD\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    The variable CDPATH defines the search path \u003cspan class=\"k\"\u003efor\u003c/span\u003e the directory containing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    DIR.  Alternative directory names in CDPATH are separated by a colon \u003cspan class=\"o\"\u003e(\u003c/span\u003e:\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    A null directory name is the same as the current directory.  If DIR begins\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    with a slash \u003cspan class=\"o\"\u003e(\u003c/span\u003e/\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003ethen\u003c/span\u003e CDPATH is not used.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    If the directory is not found, and the shell option \u003cspan class=\"sb\"\u003e`\u003c/span\u003ecdable_vars\u003cspan class=\"s1\"\u003e\u0026#39; is set,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    the word is assumed to be  a variable name.  If that variable has a value,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    its value is used for DIR.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    Options:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      -L\tforce symbolic links to be followed: resolve symbolic\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    \t\tlinks in DIR after processing instances of `..\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      -P\tuse the physical directory structure without following\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\tsymbolic links: resolve symbolic links in DIR before\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\tprocessing instances of \u003cspan class=\"sb\"\u003e`\u003c/span\u003e..\u003cspan class=\"s1\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      -e\tif the -P option is supplied, and the current working\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    \t\tdirectory cannot be determined successfully, exit with\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    \t\ta non-zero status\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      -@\ton systems that support it, present a file with extended\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    \t\tattributes as a directory containing the file attributes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e    The default is to follow symbolic links, as if `-L\u0026#39;\u003c/span\u003e were specified.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"sb\"\u003e`\u003c/span\u003e..\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e is processed by removing the immediately previous pathname component\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    back to a slash or the beginning of DIR.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Exit Status:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Returns \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e the directory is changed, and \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nv\"\u003e$PWD\u003c/span\u003e is \u003cspan class=\"nb\"\u003eset\u003c/span\u003e successfully when\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    -P is used\u003cspan class=\"p\"\u003e;\u003c/span\u003e non-zero otherwise.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"cd - Change Directory"},{"content":"cp \u0026ndash;help Usage: cp [OPTION]... [-T] SOURCE DEST or: cp [OPTION]... SOURCE... DIRECTORY or: cp [OPTION]... -t DIRECTORY SOURCE... Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY. Mandatory arguments to long options are mandatory for short options too. -a, --archive same as -dR --preserve=all --attributes-only don\u0026#39;t copy the file data, just the attributes --backup[=CONTROL] make a backup of each existing destination file -b like --backup but does not accept an argument --copy-contents copy contents of special files when recursive -d same as --no-dereference --preserve=links --debug explain how a file is copied. Implies -v -f, --force if an existing destination file cannot be opened, remove it and try again (this option is ignored when the -n option is also used) -i, --interactive prompt before overwrite (overrides a previous -n option) -H follow command-line symbolic links in SOURCE -l, --link hard link files instead of copying -L, --dereference always follow symbolic links in SOURCE -n, --no-clobber do not overwrite an existing file and do not fail (overrides a -u or previous -i option). See also --update; equivalent to --update=none. -P, --no-dereference never follow symbolic links in SOURCE -p same as --preserve=mode,ownership,timestamps --preserve[=ATTR_LIST] preserve the specified attributes --no-preserve=ATTR_LIST don\u0026#39;t preserve the specified attributes --parents use full source file name under DIRECTORY -R, -r, --recursive copy directories recursively --reflink[=WHEN] control clone/CoW copies. See below --remove-destination remove each existing destination file before attempting to open it (contrast with --force) --sparse=WHEN control creation of sparse files. See below --strip-trailing-slashes remove any trailing slashes from each SOURCE argument -s, --symbolic-link make symbolic links instead of copying -S, --suffix=SUFFIX override the usual backup suffix -t, --target-directory=DIRECTORY copy all SOURCE arguments into DIRECTORY -T, --no-target-directory treat DEST as a normal file --update[=UPDATE] control which existing files are updated; UPDATE={all,none,older(default)}. See below -u equivalent to --update[=older] -v, --verbose explain what is being done -x, --one-file-system stay on this file system -Z set SELinux security context of destination file to default type --context[=CTX] like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX --help display this help and exit --version output version information and exit ATTR_LIST is a comma-separated list of attributes. Attributes are \u0026#39;mode\u0026#39; for permissions (including any ACL and xattr permissions), \u0026#39;ownership\u0026#39; for user and group, \u0026#39;timestamps\u0026#39; for file timestamps, \u0026#39;links\u0026#39; for hard links, \u0026#39;context\u0026#39; for security context, \u0026#39;xattr\u0026#39; for extended attributes, and \u0026#39;all\u0026#39; for all attributes. By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file whenever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files. UPDATE controls which existing files in the destination are replaced. \u0026#39;all\u0026#39; is the default operation when an --update option is not specified, and results in all existing files in the destination being replaced. \u0026#39;none\u0026#39; is similar to the --no-clobber option, in that no files in the destination are replaced, but also skipped files do not induce a failure. \u0026#39;older\u0026#39; is the default operation when --update is specified, and results in files being replaced if they\u0026#39;re older than the corresponding source file. When --reflink[=always] is specified, perform a lightweight copy, where the data blocks are copied only when modified. If this is not possible the copy fails, or if --reflink=auto is specified, fall back to a standard copy. Use --reflink=never to ensure a standard copy is performed. The backup suffix is \u0026#39;~\u0026#39;, unless set with --suffix or SIMPLE_BACKUP_SUFFIX. The version control method may be selected via the --backup option or through the VERSION_CONTROL environment variable. Here are the values: none, off never make backups (even if --backup is given) numbered, t make numbered backups existing, nil numbered if numbered backups exist, simple otherwise simple, never always make simple backups As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file.\rman cp NAME cp - copy files and directories SYNOPSIS cp [OPTION]... [-T] SOURCE DEST cp [OPTION]... SOURCE... DIRECTORY cp [OPTION]... -t DIRECTORY SOURCE... DESCRIPTION Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY. Mandatory arguments to long options are mandatory for short options too. -a, --archive same as -dR --preserve=all --attributes-only don\u0026#39;t copy the file data, just the attributes --backup[=CONTROL] make a backup of each existing destination file -b like --backup but does not accept an argument --copy-contents copy contents of special files when recursive -d same as --no-dereference --preserve=links --debug explain how a file is copied. Implies -v -f, --force if an existing destination file cannot be opened, remove it and try again (this option is ignored when the -n option is also used) -i, --interactive prompt before overwrite (overrides a previous -n option) -H follow command-line symbolic links in SOURCE -l, --link hard link files instead of copying -L, --dereference always follow symbolic links in SOURCE -n, --no-clobber do not overwrite an existing file and do not fail (overrides a -u or pre‐ vious -i option). See also --update; equivalent to --update=none. -P, --no-dereference never follow symbolic links in SOURCE -p same as --preserve=mode,ownership,timestamps --preserve[=ATTR_LIST] preserve the specified attributes --no-preserve=ATTR_LIST don\u0026#39;t preserve the specified attributes --parents use full source file name under DIRECTORY -R, -r, --recursive copy directories recursively --reflink[=WHEN] control clone/CoW copies. See below --remove-destination remove each existing destination file before attempting to open it (con‐ trast with --force) --sparse=WHEN control creation of sparse files. See below --strip-trailing-slashes remove any trailing slashes from each SOURCE argument -s, --symbolic-link make symbolic links instead of copying -S, --suffix=SUFFIX override the usual backup suffix -t, --target-directory=DIRECTORY copy all SOURCE arguments into DIRECTORY -T, --no-target-directory treat DEST as a normal file --update[=UPDATE] control which existing files are updated; UPDATE={all,none,older(de‐ fault)}. See below -u equivalent to --update[=older] -v, --verbose explain what is being done -x, --one-file-system stay on this file system -Z set SELinux security context of destination file to default type --context[=CTX] like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX --help display this help and exit --version output version information and exit ATTR_LIST is a comma-separated list of attributes. Attributes are \u0026#39;mode\u0026#39; for permissions (including any ACL and xattr permissions), \u0026#39;ownership\u0026#39; for user and group, \u0026#39;timestamps\u0026#39; for file timestamps, \u0026#39;links\u0026#39; for hard links, \u0026#39;context\u0026#39; for security context, \u0026#39;xattr\u0026#39; for extended attributes, and \u0026#39;all\u0026#39; for all attributes. By default, sparse SOURCE files are detected by a crude heuristic and the corre‐ sponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file whenever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files. UPDATE controls which existing files in the destination are replaced. \u0026#39;all\u0026#39; is the default operation when an --update option is not specified, and results in all existing files in the destination being replaced. \u0026#39;none\u0026#39; is similar to the --no-clobber option, in that no files in the destination are replaced, but also skipped files do not induce a failure. \u0026#39;older\u0026#39; is the default operation when --update is specified, and results in files being replaced if they\u0026#39;re older than the corresponding source file. When --reflink[=always] is specified, perform a lightweight copy, where the data blocks are copied only when modified. If this is not possible the copy fails, or if --reflink=auto is specified, fall back to a standard copy. Use --re‐ flink=never to ensure a standard copy is performed. The backup suffix is \u0026#39;~\u0026#39;, unless set with --suffix or SIMPLE_BACKUP_SUFFIX. The version control method may be selected via the --backup option or through the VERSION_CONTROL environment variable. Here are the values: none, off never make backups (even if --backup is given) numbered, t make numbered backups existing, nil numbered if numbered backups exist, simple otherwise simple, never always make simple backups As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file.\r","date":"2024-10-22","id":127,"permalink":"/personal-site/docs/bash-linux/command-docs/cp-copy/","summary":"\u003ch2 id=\"cp---help\"\u003ecp \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: cp \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003e-T\u003cspan class=\"o\"\u003e]\u003c/span\u003e SOURCE DEST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  or:  cp \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... SOURCE... DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  or:  cp \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... -t DIRECTORY SOURCE...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCopy SOURCE to DEST, or multiple SOURCE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to DIRECTORY.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -a, --archive                same as -dR --preserve\u003cspan class=\"o\"\u003e=\u003c/span\u003eall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --attributes-only        don\u003cspan class=\"s1\"\u003e\u0026#39;t copy the file data, just the attributes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --backup[=CONTROL]       make a backup of each existing destination file\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -b                           like --backup but does not accept an argument\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --copy-contents          copy contents of special files when recursive\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -d                           same as --no-dereference --preserve=links\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --debug                  explain how a file is copied.  Implies -v\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -f, --force                  if an existing destination file cannot be\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                                 opened, remove it and try again (this option\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                                 is ignored when the -n option is also used)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -i, --interactive            prompt before overwrite (overrides a previous -n\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                                  option)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -H                           follow command-line symbolic links in SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -l, --link                   hard link files instead of copying\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -L, --dereference            always follow symbolic links in SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -n, --no-clobber             do not overwrite an existing file and do not fail\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                                 (overrides a -u or previous -i option). See also\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                                 --update; equivalent to --update=none.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -P, --no-dereference         never follow symbolic links in SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -p                           same as --preserve=mode,ownership,timestamps\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --preserve[=ATTR_LIST]   preserve the specified attributes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --no-preserve=ATTR_LIST  don\u0026#39;\u003c/span\u003et preserve the specified attributes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --parents                use full \u003cspan class=\"nb\"\u003esource\u003c/span\u003e file name under DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -R, -r, --recursive          copy directories recursively\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --reflink\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e         control clone/CoW copies. See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --remove-destination     remove each existing destination file before\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 attempting to open it \u003cspan class=\"o\"\u003e(\u003c/span\u003econtrast with --force\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003eWHEN            control creation of sparse files. See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --symbolic-link          make symbolic links instead of copying\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -S, --suffix\u003cspan class=\"o\"\u003e=\u003c/span\u003eSUFFIX          override the usual backup suffix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -t, --target-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003eDIRECTORY  copy all SOURCE arguments into DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -T, --no-target-directory    treat DEST as a normal file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eUPDATE\u003cspan class=\"o\"\u003e]\u003c/span\u003e            control which existing files are updated\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 \u003cspan class=\"nv\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003eall,none,older\u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)}\u003c/span\u003e.  See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -u                           equivalent to --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eolder\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --verbose                explain what is being \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -x, --one-file-system        stay on this file system\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -Z                           \u003cspan class=\"nb\"\u003eset\u003c/span\u003e SELinux security context of destination\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 file to default \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --context\u003cspan class=\"o\"\u003e[=\u003c/span\u003eCTX\u003cspan class=\"o\"\u003e]\u003c/span\u003e          like -Z, or \u003cspan class=\"k\"\u003eif\u003c/span\u003e CTX is specified \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 SELinux or SMACK security context to CTX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eATTR_LIST is a comma-separated list of attributes. Attributes are \u003cspan class=\"s1\"\u003e\u0026#39;mode\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epermissions \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluding any ACL and xattr permissions\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;ownership\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e user\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eand group, \u003cspan class=\"s1\"\u003e\u0026#39;timestamps\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e file timestamps, \u003cspan class=\"s1\"\u003e\u0026#39;links\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e hard links, \u003cspan class=\"s1\"\u003e\u0026#39;context\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e security context, \u003cspan class=\"s1\"\u003e\u0026#39;xattr\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e extended attributes, and \u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eattributes.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBy default, sparse SOURCE files are detected by a crude heuristic and the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecorresponding DEST file is made sparse as well.  That is the behavior\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eselected by --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003eauto.  Specify --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003ealways to create a sparse DEST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efile whenever the SOURCE file contains a long enough sequence of zero bytes.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUse --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003enever to inhibit creation of sparse files.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUPDATE controls which existing files in the destination are replaced.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e is the default operation when an --update option is not specified,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eand results in all existing files in the destination being replaced.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;none\u0026#39;\u003c/span\u003e is similar to the --no-clobber option, in that no files in the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edestination are replaced, but also skipped files \u003cspan class=\"k\"\u003edo\u003c/span\u003e not induce a failure.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;older\u0026#39;\u003c/span\u003e is the default operation when --update is specified, and results\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ein files being replaced \u003cspan class=\"k\"\u003eif\u003c/span\u003e they\u003cspan class=\"s1\"\u003e\u0026#39;re older than the corresponding source file.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003eWhen --reflink[=always] is specified, perform a lightweight copy, where the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003edata blocks are copied only when modified.  If this is not possible the copy\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003efails, or if --reflink=auto is specified, fall back to a standard copy.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003eUse --reflink=never to ensure a standard copy is performed.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003eThe backup suffix is \u0026#39;\u003c/span\u003e~\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e, unless \u003cspan class=\"nb\"\u003eset\u003c/span\u003e with --suffix or SIMPLE_BACKUP_SUFFIX.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe version control method may be selected via the --backup option or through\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ethe VERSION_CONTROL environment variable.  Here are the values:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  none, off       never make backups \u003cspan class=\"o\"\u003e(\u003c/span\u003eeven \u003cspan class=\"k\"\u003eif\u003c/span\u003e --backup is given\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  numbered, t     make numbered backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  existing, nil   numbered \u003cspan class=\"k\"\u003eif\u003c/span\u003e numbered backups exist, simple otherwise\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  simple, never   always make simple backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eAs a special \u003cspan class=\"k\"\u003ecase\u003c/span\u003e, cp makes a backup of SOURCE when the force and backup\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eoptions are given and SOURCE and DEST are the same name \u003cspan class=\"k\"\u003efor\u003c/span\u003e an existing,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eregular file.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-cp\"\u003eman cp\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cp - copy files and directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cp \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003e-T\u003cspan class=\"o\"\u003e]\u003c/span\u003e SOURCE DEST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cp \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... SOURCE... DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cp \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... -t DIRECTORY SOURCE...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Copy SOURCE to DEST, or multiple SOURCE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to DIRECTORY.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -a, --archive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              same as -dR --preserve\u003cspan class=\"o\"\u003e=\u003c/span\u003eall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --attributes-only\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              don\u003cspan class=\"s1\"\u003e\u0026#39;t copy the file data, just the attributes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --backup[=CONTROL]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              make a backup of each existing destination file\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -b     like --backup but does not accept an argument\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --copy-contents\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              copy contents of special files when recursive\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -d     same as --no-dereference --preserve=links\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --debug\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              explain how a file is copied.  Implies -v\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -f, --force\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              if an existing destination file cannot be opened, remove it and try again\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              (this option is ignored when the -n option is also used)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -i, --interactive\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              prompt before overwrite (overrides a previous -n option)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -H     follow command-line symbolic links in SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -l, --link\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              hard link files instead of copying\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -L, --dereference\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              always follow symbolic links in SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -n, --no-clobber\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              do not overwrite an existing file and do not fail (overrides a -u or pre‐\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              vious -i option). See also --update; equivalent to --update=none.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -P, --no-dereference\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              never follow symbolic links in SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -p     same as --preserve=mode,ownership,timestamps\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --preserve[=ATTR_LIST]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              preserve the specified attributes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --no-preserve=ATTR_LIST\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              don\u0026#39;\u003c/span\u003et preserve the specified attributes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --parents\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use full \u003cspan class=\"nb\"\u003esource\u003c/span\u003e file name under DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -R, -r, --recursive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              copy directories recursively\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --reflink\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              control clone/CoW copies. See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --remove-destination\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              remove  each existing destination file before attempting to open it \u003cspan class=\"o\"\u003e(\u003c/span\u003econ‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              trast with --force\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003eWHEN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              control creation of sparse files. See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --strip-trailing-slashes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              remove any trailing slashes from each SOURCE argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --symbolic-link\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              make symbolic links instead of copying\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -S, --suffix\u003cspan class=\"o\"\u003e=\u003c/span\u003eSUFFIX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              override the usual backup suffix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -t, --target-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003eDIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              copy all SOURCE arguments into DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -T, --no-target-directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              treat DEST as a normal file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eUPDATE\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              control which  existing  files  are  updated\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"nv\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003eall,none,older\u003cspan class=\"o\"\u003e(\u003c/span\u003ede‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              fault\u003cspan class=\"o\"\u003e)}\u003c/span\u003e.  See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -u     equivalent to --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eolder\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --verbose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              explain what is being \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -x, --one-file-system\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              stay on this file system\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -Z     \u003cspan class=\"nb\"\u003eset\u003c/span\u003e SELinux security context of destination file to default \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --context\u003cspan class=\"o\"\u003e[=\u003c/span\u003eCTX\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              like  -Z,  or  \u003cspan class=\"k\"\u003eif\u003c/span\u003e CTX is specified \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e the SELinux or SMACK security\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              context to CTX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       ATTR_LIST is a comma-separated list of attributes.  Attributes  are  \u003cspan class=\"s1\"\u003e\u0026#39;mode\u0026#39;\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       permissions  \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluding any ACL and xattr permissions\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;ownership\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e user and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       group, \u003cspan class=\"s1\"\u003e\u0026#39;timestamps\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e file timestamps, \u003cspan class=\"s1\"\u003e\u0026#39;links\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e hard links,  \u003cspan class=\"s1\"\u003e\u0026#39;context\u0026#39;\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       security context, \u003cspan class=\"s1\"\u003e\u0026#39;xattr\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e extended attributes, and \u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e all attributes.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       By default, sparse SOURCE files are detected by a crude heuristic and the corre‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sponding  DEST  file  is  made sparse as well.  That is the behavior selected by\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003eauto.  Specify --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003ealways to create a sparse  DEST  file  whenever\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       the   SOURCE   file  contains  a  long  enough  sequence  of  zero  bytes.   Use\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --sparse\u003cspan class=\"o\"\u003e=\u003c/span\u003enever to inhibit creation of sparse files.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       UPDATE controls which existing files in the destination are replaced.  \u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       the  default  operation when an --update option is not specified, and results in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       all existing files in the destination being replaced.  \u003cspan class=\"s1\"\u003e\u0026#39;none\u0026#39;\u003c/span\u003e is similar to  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --no-clobber  option, in that no files in the destination are replaced, but also\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       skipped files \u003cspan class=\"k\"\u003edo\u003c/span\u003e not induce a failure.  \u003cspan class=\"s1\"\u003e\u0026#39;older\u0026#39;\u003c/span\u003e is the  default  operation  when\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --update is specified, and results in files being replaced \u003cspan class=\"k\"\u003eif\u003c/span\u003e they\u003cspan class=\"s1\"\u003e\u0026#39;re older than\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       the corresponding source file.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       When --reflink[=always] is specified, perform a lightweight copy, where the data\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       blocks  are  copied only when modified.  If this is not possible the copy fails,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       or if --reflink=auto is specified, fall back to  a  standard  copy.   Use  --re‐\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       flink=never to ensure a standard copy is performed.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       The backup suffix is \u0026#39;\u003c/span\u003e~\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e, unless \u003cspan class=\"nb\"\u003eset\u003c/span\u003e with --suffix or SIMPLE_BACKUP_SUFFIX.  The\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       version  control  method  may be selected via the --backup option or through the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       VERSION_CONTROL environment variable.  Here are the values:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       none, off\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              never make backups \u003cspan class=\"o\"\u003e(\u003c/span\u003eeven \u003cspan class=\"k\"\u003eif\u003c/span\u003e --backup is given\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       numbered, t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              make numbered backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       existing, nil\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              numbered \u003cspan class=\"k\"\u003eif\u003c/span\u003e numbered backups exist, simple otherwise\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       simple, never\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              always make simple backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       As a special \u003cspan class=\"k\"\u003ecase\u003c/span\u003e, cp makes a backup of SOURCE when the force and backup options\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       are given and SOURCE and DEST are the same name \u003cspan class=\"k\"\u003efor\u003c/span\u003e an existing, regular file.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"cp - Copy"},{"content":"cut \u0026ndash;help Usage: cut OPTION... [FILE]... Print selected parts of lines from each FILE to standard output. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -b, --bytes=LIST select only these bytes -c, --characters=LIST select only these characters -d, --delimiter=DELIM use DELIM instead of TAB for field delimiter -f, --fields=LIST select only these fields; also print any line that contains no delimiter character, unless the -s option is specified -n (ignored) --complement complement the set of selected bytes, characters or fields -s, --only-delimited do not print lines not containing delimiters --output-delimiter=STRING use STRING as the output delimiter the default is to use the input delimiter -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit Use one, and only one of -b, -c or -f. Each LIST is made up of one range, or many ranges separated by commas. Selected input is written in the same order that it is read, and is written exactly once. Each range is one of: N N\u0026#39;th byte, character or field, counted from 1 N- from N\u0026#39;th byte, character or field, to end of line N-M from N\u0026#39;th to M\u0026#39;th (included) byte, character or field -M from first to M\u0026#39;th (included) byte, character or field\rman cut NAME cut - remove sections from each line of files SYNOPSIS cut OPTION... [FILE]... DESCRIPTION Print selected parts of lines from each FILE to standard output. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -b, --bytes=LIST select only these bytes -c, --characters=LIST select only these characters -d, --delimiter=DELIM use DELIM instead of TAB for field delimiter -f, --fields=LIST select only these fields; also print any line that contains no delimiter character, unless the -s option is specified -n (ignored) --complement complement the set of selected bytes, characters or fields -s, --only-delimited do not print lines not containing delimiters --output-delimiter=STRING use STRING as the output delimiter the default is to use the input delimiter -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit Use one, and only one of -b, -c or -f. Each LIST is made up of one range, or many ranges separated by commas. Selected input is written in the same order that it is read, and is written exactly once. Each range is one of: N N\u0026#39;th byte, character or field, counted from 1 N- from N\u0026#39;th byte, character or field, to end of line N-M from N\u0026#39;th to M\u0026#39;th (included) byte, character or field -M from first to M\u0026#39;th (included) byte, character or field\r","date":"2024-10-22","id":128,"permalink":"/personal-site/docs/bash-linux/command-docs/cut-with-deliminator/","summary":"\u003ch2 id=\"cut---help\"\u003ecut \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: cut OPTION... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePrint selected parts of lines from each FILE to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -b, --bytes\u003cspan class=\"o\"\u003e=\u003c/span\u003eLIST        \u003cspan class=\"k\"\u003eselect\u003c/span\u003e only these bytes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --characters\u003cspan class=\"o\"\u003e=\u003c/span\u003eLIST   \u003cspan class=\"k\"\u003eselect\u003c/span\u003e only these characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --delimiter\u003cspan class=\"o\"\u003e=\u003c/span\u003eDELIM   use DELIM instead of TAB \u003cspan class=\"k\"\u003efor\u003c/span\u003e field delimiter\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --fields\u003cspan class=\"o\"\u003e=\u003c/span\u003eLIST       \u003cspan class=\"k\"\u003eselect\u003c/span\u003e only these fields\u003cspan class=\"p\"\u003e;\u003c/span\u003e  also print any line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            that contains no delimiter character, unless\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            the -s option is specified\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n                      \u003cspan class=\"o\"\u003e(\u003c/span\u003eignored\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --complement        complement the \u003cspan class=\"nb\"\u003eset\u003c/span\u003e of selected bytes, characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            or fields\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --only-delimited    \u003cspan class=\"k\"\u003edo\u003c/span\u003e not print lines not containing delimiters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --output-delimiter\u003cspan class=\"o\"\u003e=\u003c/span\u003eSTRING  use STRING as the output delimiter\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            the default is to use the input delimiter\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -z, --zero-terminated   line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUse one, and only one of -b, -c or -f.  Each LIST is made up of one\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erange, or many ranges separated by commas.  Selected input is written\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ein the same order that it is read, and is written exactly once.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEach range is one of:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  N     N\u003cspan class=\"s1\"\u003e\u0026#39;th byte, character or field, counted from 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  N-    from N\u0026#39;\u003c/span\u003eth byte, character or field, to end of line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  N-M   from N\u003cspan class=\"s1\"\u003e\u0026#39;th to M\u0026#39;\u003c/span\u003eth \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluded\u003cspan class=\"o\"\u003e)\u003c/span\u003e byte, character or field\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -M    from first to M\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003eth \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluded\u003cspan class=\"o\"\u003e)\u003c/span\u003e byte, character or field\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-cut\"\u003eman cut\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cut - remove sections from each line of files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       cut OPTION... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Print selected parts of lines from each FILE to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -b, --bytes\u003cspan class=\"o\"\u003e=\u003c/span\u003eLIST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003eselect\u003c/span\u003e only these bytes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --characters\u003cspan class=\"o\"\u003e=\u003c/span\u003eLIST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003eselect\u003c/span\u003e only these characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -d, --delimiter\u003cspan class=\"o\"\u003e=\u003c/span\u003eDELIM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use DELIM instead of TAB \u003cspan class=\"k\"\u003efor\u003c/span\u003e field delimiter\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f, --fields\u003cspan class=\"o\"\u003e=\u003c/span\u003eLIST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003eselect\u003c/span\u003e  only  these fields\u003cspan class=\"p\"\u003e;\u003c/span\u003e  also print any line that contains no delimiter character,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              unless the -s option is specified\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n     \u003cspan class=\"o\"\u003e(\u003c/span\u003eignored\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --complement\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              complement the \u003cspan class=\"nb\"\u003eset\u003c/span\u003e of selected bytes, characters or fields\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --only-delimited\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not print lines not containing delimiters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --output-delimiter\u003cspan class=\"o\"\u003e=\u003c/span\u003eSTRING\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use STRING as the output delimiter the default is to use the input delimiter\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -z, --zero-terminated\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Use one, and only one of -b, -c or -f.  Each LIST is made up of one  range,  or  many  ranges\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       separated  by  commas.   Selected  input is written in the same order that it is read, and is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       written exactly once.  Each range is one of:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       N      N\u003cspan class=\"s1\"\u003e\u0026#39;th byte, character or field, counted from 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       N-     from N\u0026#39;\u003c/span\u003eth byte, character or field, to end of line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       N-M    from N\u003cspan class=\"s1\"\u003e\u0026#39;th to M\u0026#39;\u003c/span\u003eth \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluded\u003cspan class=\"o\"\u003e)\u003c/span\u003e byte, character or field\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -M     from first to M\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003eth \u003cspan class=\"o\"\u003e(\u003c/span\u003eincluded\u003cspan class=\"o\"\u003e)\u003c/span\u003e byte, character or field\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"cut - with deliminator"},{"content":"help echo echo: echo [-neE] [arg ...] Write arguments to the standard output. Display the ARGs, separated by a single space character and followed by a newline, on the standard output. Options: -n\tdo not append a newline -e\tenable interpretation of the following backslash escapes -E\texplicitly suppress interpretation of backslash escapes `echo\u0026#39; interprets the following backslash-escaped characters: \\a\talert (bell) \\b\tbackspace \\c\tsuppress further output \\e\tescape character \\E\tescape character \\f\tform feed \\n\tnew line \\r\tcarriage return \\t\thorizontal tab \\v\tvertical tab \\\\\tbackslash \\0nnn\tthe character whose ASCII code is NNN (octal). NNN can be 0 to 3 octal digits \\xHH\tthe eight-bit character whose value is HH (hexadecimal). HH can be one or two hex digits \\uHHHH\tthe Unicode character whose value is the hexadecimal value HHHH. HHHH can be one to four hex digits. \\UHHHHHHHH the Unicode character whose value is the hexadecimal value HHHHHHHH. HHHHHHHH can be one to eight hex digits. Exit Status: Returns success unless a write error occurs.\rman echo NAME echo - display a line of text SYNOPSIS echo [SHORT-OPTION]... [STRING]... echo LONG-OPTION DESCRIPTION Echo the STRING(s) to standard output. -n do not output the trailing newline -e enable interpretation of backslash escapes -E disable interpretation of backslash escapes (default) --help display this help and exit --version output version information and exit If -e is in effect, the following sequences are recognized: \\\\ backslash \\a alert (BEL) \\b backspace \\c produce no further output \\e escape \\f form feed \\n new line \\r carriage return \\t horizontal tab \\v vertical tab \\0NNN byte with octal value NNN (1 to 3 digits) \\xHH byte with hexadecimal value HH (1 to 2 digits) NOTE: your shell may have its own version of echo, which usually super‐ sedes the version described here. Please refer to your shell\u0026#39;s docu‐ mentation for details about the options it supports. NOTE: printf(1) is a preferred alternative, which does not have issues outputting option-like strings.\r","date":"2024-10-22","id":129,"permalink":"/personal-site/docs/bash-linux/command-docs/echo/","summary":"\u003ch2 id=\"help-echo\"\u003ehelp echo\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eecho: \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e-neE\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003earg ...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Write arguments to the standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Display the ARGs, separated by a single space character and followed by a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    newline, on the standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Options:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      -n\t\u003cspan class=\"k\"\u003edo\u003c/span\u003e not append a newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      -e\t\u003cspan class=\"nb\"\u003eenable\u003c/span\u003e interpretation of the following backslash escapes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      -E\texplicitly suppress interpretation of backslash escapes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"sb\"\u003e`\u003c/span\u003eecho\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e interprets the following backslash-escaped characters:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\a\u003c/span\u003e\talert \u003cspan class=\"o\"\u003e(\u003c/span\u003ebell\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\b\u003c/span\u003e\tbackspace\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\c\u003c/span\u003e\tsuppress further output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\e\u003c/span\u003e\tescape character\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\E\u003c/span\u003e\tescape character\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\f\u003c/span\u003e\tform feed\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\tnew line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\r\u003c/span\u003e\tcarriage \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\thorizontal tab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\v\u003c/span\u003e\tvertical tab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\tbackslash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\0\u003c/span\u003ennn\tthe character whose ASCII code is NNN \u003cspan class=\"o\"\u003e(\u003c/span\u003eoctal\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  NNN can be\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\t\u003cspan class=\"m\"\u003e0\u003c/span\u003e to \u003cspan class=\"m\"\u003e3\u003c/span\u003e octal digits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\x\u003c/span\u003eHH\tthe eight-bit character whose value is HH \u003cspan class=\"o\"\u003e(\u003c/span\u003ehexadecimal\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  HH\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\tcan be one or two hex digits\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\u\u003c/span\u003eHHHH\tthe Unicode character whose value is the hexadecimal value HHHH.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\tHHHH can be one to four hex digits.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"se\"\u003e\\U\u003c/span\u003eHHHHHHHH the Unicode character whose value is the hexadecimal value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\tHHHHHHHH. HHHHHHHH can be one to eight hex digits.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Exit Status:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Returns success unless a write error occurs.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-echo\"\u003eman echo\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e - display a line of text\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eSHORT-OPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eSTRING\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e LONG-OPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Echo the STRING\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n     \u003cspan class=\"k\"\u003edo\u003c/span\u003e not output the trailing newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -e     \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e interpretation of backslash escapes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -E     disable interpretation of backslash escapes \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       If -e is in effect, the following sequences are recognized:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e     backslash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\a\u003c/span\u003e     alert \u003cspan class=\"o\"\u003e(\u003c/span\u003eBEL\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\b\u003c/span\u003e     backspace\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\c\u003c/span\u003e     produce no further output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\e\u003c/span\u003e     escape\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\f\u003c/span\u003e     form feed\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\n\u003c/span\u003e     new line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\r\u003c/span\u003e     carriage \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\t\u003c/span\u003e     horizontal tab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\v\u003c/span\u003e     vertical tab\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\0\u003c/span\u003eNNN  byte with octal value NNN \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e to \u003cspan class=\"m\"\u003e3\u003c/span\u003e digits\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\x\u003c/span\u003eHH   byte with hexadecimal value HH \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e to \u003cspan class=\"m\"\u003e2\u003c/span\u003e digits\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       NOTE: your shell may have its own version of echo, which usually super‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sedes  the  version described here.  Please refer to your shell\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003es docu‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mentation \u003cspan class=\"k\"\u003efor\u003c/span\u003e details about the options it supports.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       NOTE: printf\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e is a preferred alternative, which does not have  issues\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       outputting option-like strings.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"echo"},{"content":"grep \u0026ndash;help Usage: grep [OPTION]... PATTERNS [FILE]... Search for PATTERNS in each FILE. Example: grep -i \u0026#39;hello world\u0026#39; menu.h main.c PATTERNS can contain multiple patterns separated by newlines. Pattern selection and interpretation: -E, --extended-regexp PATTERNS are extended regular expressions -F, --fixed-strings PATTERNS are strings -G, --basic-regexp PATTERNS are basic regular expressions -P, --perl-regexp PATTERNS are Perl regular expressions -e, --regexp=PATTERNS use PATTERNS for matching -f, --file=FILE take PATTERNS from FILE -i, --ignore-case ignore case distinctions in patterns and data --no-ignore-case do not ignore case distinctions (default) -w, --word-regexp match only whole words -x, --line-regexp match only whole lines -z, --null-data a data line ends in 0 byte, not newline Miscellaneous: -s, --no-messages suppress error messages -v, --invert-match select non-matching lines -V, --version display version information and exit --help display this help text and exit Output control: -m, --max-count=NUM stop after NUM selected lines -b, --byte-offset print the byte offset with output lines -n, --line-number print line number with output lines --line-buffered flush output on every line -H, --with-filename print file name with output lines -h, --no-filename suppress the file name prefix on output --label=LABEL use LABEL as the standard input file name prefix -o, --only-matching show only nonempty parts of lines that match -q, --quiet, --silent suppress all normal output --binary-files=TYPE assume that binary files are TYPE; TYPE is \u0026#39;binary\u0026#39;, \u0026#39;text\u0026#39;, or \u0026#39;without-match\u0026#39; -a, --text equivalent to --binary-files=text -I equivalent to --binary-files=without-match -d, --directories=ACTION how to handle directories; ACTION is \u0026#39;read\u0026#39;, \u0026#39;recurse\u0026#39;, or \u0026#39;skip\u0026#39; -D, --devices=ACTION how to handle devices, FIFOs and sockets; ACTION is \u0026#39;read\u0026#39; or \u0026#39;skip\u0026#39; -r, --recursive like --directories=recurse -R, --dereference-recursive likewise, but follow all symlinks --include=GLOB search only files that match GLOB (a file pattern) --exclude=GLOB skip files that match GLOB --exclude-from=FILE skip files that match any file pattern from FILE --exclude-dir=GLOB skip directories that match GLOB -L, --files-without-match print only names of FILEs with no selected lines -l, --files-with-matches print only names of FILEs with selected lines -c, --count print only a count of selected lines per FILE -T, --initial-tab make tabs line up (if needed) -Z, --null print 0 byte after FILE name Context control: -B, --before-context=NUM print NUM lines of leading context -A, --after-context=NUM print NUM lines of trailing context -C, --context=NUM print NUM lines of output context -NUM same as --context=NUM --group-separator=SEP print SEP on line between matches with context --no-group-separator do not print separator for matches with context --color[=WHEN], --colour[=WHEN] use markers to highlight the matching strings; WHEN is \u0026#39;always\u0026#39;, \u0026#39;never\u0026#39;, or \u0026#39;auto\u0026#39; -U, --binary do not strip CR characters at EOL (MSDOS/Windows) When FILE is \u0026#39;-\u0026#39;, read standard input. With no FILE, read \u0026#39;.\u0026#39; if recursive, \u0026#39;-\u0026#39; otherwise. With fewer than two FILEs, assume -h. Exit status is 0 if any line is selected, 1 otherwise; if any error occurs and -q is not given, the exit status is 2.\rman grep NAME grep, egrep, fgrep, rgrep - print lines that match patterns SYNOPSIS grep [OPTION...] PATTERNS [FILE...] grep [OPTION...] -e PATTERNS ... [FILE...] grep [OPTION...] -f PATTERN_FILE ... [FILE...] DESCRIPTION grep searches for PATTERNS in each FILE. PATTERNS is one or more patterns separated by newline characters, and grep prints each line that matches a pattern. Typically PATTERNS should be quoted when grep is used in a shell command. A FILE of “-” stands for standard input. If no FILE is given, recursive searches examine the working directory, and nonrecursive searches read standard input. Debian also includes the variant programs egrep, fgrep and rgrep. These programs are the same as grep -E, grep -F, and grep -r, respectively. These variants are deprecated upstream, but Debian provides for backward compatibility. For portability reasons, it is recommended to avoid the variant programs, and use grep with the related option instead. OPTIONS Generic Program Information --help Output a usage message and exit. -V, --version Output the version number of grep and exit. Pattern Syntax -E, --extended-regexp Interpret PATTERNS as extended regular expressions (EREs, see below). -F, --fixed-strings Interpret PATTERNS as fixed strings, not regular expressions. -G, --basic-regexp Interpret PATTERNS as basic regular expressions (BREs, see below). This is the default. -P, --perl-regexp Interpret PATTERNS as Perl-compatible regular expressions (PCREs). This option is experimental when combined with the -z (--null-data) option, and grep -P may warn of unimplemented features. Matching Control -e PATTERNS, --regexp=PATTERNS Use PATTERNS as the patterns. If this option is used multiple times or is combined with the -f (--file) option, search for all patterns given. This option can be used to protect a pattern beginning with “-”. -f FILE, --file=FILE Obtain patterns from FILE, one per line. If this option is used multiple times or is combined with the -e (--regexp) option, search for all patterns given. The empty file contains zero patterns, and therefore matches nothing. If FILE is - , read patterns from standard input. -i, --ignore-case Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other. --no-ignore-case Do not ignore case distinctions in patterns and input data. This is the default. This option is useful for passing to shell scripts that already use -i, to cancel its effects because the two options override each other. -v, --invert-match Invert the sense of matching, to select non-matching lines. -w, --word-regexp Select only those lines containing matches that form whole words. The test is that the matching substring must either be at the beginning of the line, or preceded by a non-word constituent character. Similarly, it must be either at the end of the line or followed by a non-word constituent character. Word-constituent characters are letters, digits, and the underscore. This option has no effect if -x is also specified. -x, --line-regexp Select only those matches that exactly match the whole line. For a regular expression pattern, this is like parenthesizing the pattern and then surrounding it with ^ and $. General Output Control -c, --count Suppress normal output; instead print a count of matching lines for each input file. With the -v, --invert-match option (see above), count non-matching lines. --color[=WHEN], --colour[=WHEN] Surround the matched (non-empty) strings, matching lines, context lines, file names, line numbers, byte offsets, and separators (for fields and groups of context lines) with escape sequences to display them in color on the terminal. The colors are defined by the environment variable GREP_COLORS. WHEN is never, always, or auto. -L, --files-without-match Suppress normal output; instead print the name of each input file from which no output would normally have been printed. -l, --files-with-matches Suppress normal output; instead print the name of each input file from which output would normally have been printed. Scanning each input file stops upon first match. -m NUM, --max-count=NUM Stop reading a file after NUM matching lines. If NUM is zero, grep stops right away without reading input. A NUM of -1 is treated as infinity and grep does not stop; this is the default. If the input is standard input from a regular file, and NUM matching lines are output, grep ensures that the standard input is positioned to just after the last matching line before exiting, regardless of the presence of trailing context lines. This enables a calling process to resume a search. When grep stops after NUM matching lines, it outputs any trailing context lines. When the -c or --count option is also used, grep does not output a count greater than NUM. When the -v or --invert-match option is also used, grep stops after outputting NUM non-matching lines. -o, --only-matching Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line. -q, --quiet, --silent Quiet; do not write anything to standard output. Exit immediately with zero status if any match is found, even if an error was detected. Also see the -s or --no-messages option. -s, --no-messages Suppress error messages about nonexistent or unreadable files. Output Line Prefix Control -b, --byte-offset Print the 0-based byte offset within the input file before each line of output. If -o (--only-matching) is specified, print the offset of the matching part itself. -H, --with-filename Print the file name for each match. This is the default when there is more than one file to search. This is a GNU extension. -h, --no-filename Suppress the prefixing of file names on output. This is the default when there is only one file (or only standard input) to search. --label=LABEL Display input actually coming from standard input as input coming from file LABEL. This can be useful for commands that transform a file\u0026#39;s contents before searching, e.g., gzip -cd foo.gz | grep --label=foo -H \u0026#39;some pattern\u0026#39;. See also the -H option. -n, --line-number Prefix each line of output with the 1-based line number within its input file. -T, --initial-tab Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal. This is useful with options that prefix their output to the actual content: -H,-n, and -b. In order to improve the probability that lines from a single file will all start at the same column, this also causes the line number and byte offset (if present) to be printed in a minimum size field width. -Z, --null Output a zero byte (the ASCII NUL character) instead of the character that normally follows a file name. For example, grep -lZ outputs a zero byte after each file name instead of the usual newline. This option makes the output unambiguous, even in the presence of file names containing unusual characters like newlines. This option can be used with commands like find -print0, perl -0, sort -z, and xargs -0 to process arbitrary file names, even those that contain newline characters. Context Line Control -A NUM, --after-context=NUM Print NUM lines of trailing context after matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the -o or --only-matching option, this has no effect and a warning is given. -B NUM, --before-context=NUM Print NUM lines of leading context before matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the -o or --only-matching option, this has no effect and a warning is given. -C NUM, -NUM, --context=NUM Print NUM lines of output context. Places a line containing a group separator (--) between contiguous groups of matches. With the -o or --only-matching option, this has no effect and a warning is given. --group-separator=SEP When -A, -B, or -C are in use, print SEP instead of -- between groups of lines. --no-group-separator When -A, -B, or -C are in use, do not print a separator between groups of lines. File and Directory Selection -a, --text Process a binary file as if it were text; this is equivalent to the --binary-files=text option. --binary-files=TYPE If a file\u0026#39;s data or metadata indicate that the file contains binary data, assume that the file is of type TYPE. Non-text bytes indicate binary data; these are either output bytes that are improperly encoded for the current locale, or null input bytes when the -z option is not given. By default, TYPE is binary, and grep suppresses output after null input binary data is discovered, and suppresses output lines that contain improperly encoded data. When some output is suppressed, grep follows any output with a message to standard error saying that a binary file matches. If TYPE is without-match, when grep discovers null input binary data it assumes that the rest of the file does not match; this is equivalent to the -I option. If TYPE is text, grep processes a binary file as if it were text; this is equivalent to the -a option. When type is binary, grep may treat non-text bytes as line terminators even without the -z option. This means choosing binary versus text can affect whether a pattern matches a file. For example, when type is binary the pattern q$ might match q immediately followed by a null byte, even though this is not matched when type is text. Conversely, when type is binary the pattern . (period) might not match a null byte. Warning: The -a option might output binary garbage, which can have nasty side effects if the output is a terminal and if the terminal driver interprets some of it as commands. On the other hand, when reading files whose text encodings are unknown, it can be helpful to use -a or to set LC_ALL=\u0026#39;C\u0026#39; in the environment, in order to find more matches even if the matches are unsafe for direct display. -D ACTION, --devices=ACTION If an input file is a device, FIFO or socket, use ACTION to process it. By default, ACTION is read, which means that devices are read just as if they were ordinary files. If ACTION is skip, devices are silently skipped. -d ACTION, --directories=ACTION If an input file is a directory, use ACTION to process it. By default, ACTION is read, i.e., read directories just as if they were ordinary files. If ACTION is skip, silently skip directories. If ACTION is recurse, read all files under each directory, recursively, following symbolic links only if they are on the command line. This is equivalent to the -r option. --exclude=GLOB Skip any command-line file with a name suffix that matches the pattern GLOB, using wildcard matching; a name suffix is either the whole name, or a trailing part that starts with a non-slash character immediately after a slash (/) in the name. When searching recursively, skip any subfile whose base name matches GLOB; the base name is the part after the last slash. A pattern can use *, ?, and [...] as wildcards, and \\ to quote a wildcard or backslash character literally. --exclude-from=FILE Skip files whose base name matches any of the file-name globs read from FILE (using wildcard matching as described under --exclude). --exclude-dir=GLOB Skip any command-line directory with a name suffix that matches the pattern GLOB. When searching recursively, skip any subdirectory whose base name matches GLOB. Ignore any redundant trailing slashes in GLOB. -I Process a binary file as if it did not contain matching data; this is equivalent to the --binary-files=without-match option. --include=GLOB Search only files whose base name matches GLOB (using wildcard matching as described under --exclude). If contradictory --include and --exclude options are given, the last matching one wins. If no --include or --exclude options match, a file is included unless the first such option is --include. -r, --recursive Read all files under each directory, recursively, following symbolic links only if they are on the command line. Note that if no file operand is given, grep searches the working directory. This is equivalent to the -d recurse option. -R, --dereference-recursive Read all files under each directory, recursively. Follow all symbolic links, unlike -r. Other Options --line-buffered Use line buffering on output. This can cause a performance penalty. -U, --binary Treat the file(s) as binary. By default, under MS-DOS and MS- Windows, grep guesses whether a file is text or binary as described for the --binary-files option. If grep decides the file is a text file, it strips the CR characters from the original file contents (to make regular expressions with ^ and $ work correctly). Specifying -U overrules this guesswork, causing all files to be read and passed to the matching mechanism verbatim; if the file is a text file with CR/LF pairs at the end of each line, this will cause some regular expressions to fail. This option has no effect on platforms other than MS-DOS and MS-Windows. -z, --null-data Treat input and output data as sequences of lines, each terminated by a zero byte (the ASCII NUL character) instead of a newline. Like the -Z or --null option, this option can be used with commands like sort -z to process arbitrary file names. REGULAR EXPRESSIONS A regular expression is a pattern that describes a set of strings. Regular expressions are constructed analogously to arithmetic expressions, by using various operators to combine smaller expressions. grep understands three different versions of regular expression syntax: “basic” (BRE), “extended” (ERE) and “perl” (PCRE). In GNU grep, basic and extended regular expressions are merely different notations for the same pattern-matching functionality. In other implementations, basic regular expressions are ordinarily less powerful than extended, though occasionally it is the other way around. The following description applies to extended regular expressions; differences for basic regular expressions are summarized afterwards. Perl-compatible regular expressions have different functionality, and are documented in pcre2syntax(3) and pcre2pattern(3), but work only if PCRE support is enabled. The fundamental building blocks are the regular expressions that match a single character. Most characters, including all letters and digits, are regular expressions that match themselves. Any meta-character with special meaning may be quoted by preceding it with a backslash. The period . matches any single character. It is unspecified whether it matches an encoding error. Character Classes and Bracket Expressions A bracket expression is a list of characters enclosed by [ and ]. It matches any single character in that list. If the first character of the list is the caret ^ then it matches any character not in the list; it is unspecified whether it matches an encoding error. For example, the regular expression [0123456789] matches any single digit. Within a bracket expression, a range expression consists of two characters separated by a hyphen. It matches any single character that sorts between the two characters, inclusive, using the locale\u0026#39;s collating sequence and character set. For example, in the default C locale, [a-d] is equivalent to [abcd]. Many locales sort characters in dictionary order, and in these locales [a-d] is typically not equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example. To obtain the traditional interpretation of bracket expressions, you can use the C locale by setting the LC_ALL environment variable to the value C. Finally, certain named classes of characters are predefined within bracket expressions, as follows. Their names are self explanatory, and they are [:alnum:], [:alpha:], [:blank:], [:cntrl:], [:digit:], [:graph:], [:lower:], [:print:], [:punct:], [:space:], [:upper:], and [:xdigit:]. For example, [[:alnum:]] means the character class of numbers and letters in the current locale. In the C locale and ASCII character set encoding, this is the same as [0-9A-Za-z]. (Note that the brackets in these class names are part of the symbolic names, and must be included in addition to the brackets delimiting the bracket expression.) Most meta-characters lose their special meaning inside bracket expressions. To include a literal ] place it first in the list. Similarly, to include a literal ^ place it anywhere but first. Finally, to include a literal - place it last. Anchoring The caret ^ and the dollar sign $ are meta-characters that respectively match the empty string at the beginning and end of a line. The Backslash Character and Special Expressions The symbols \\\u0026lt; and \\\u0026gt; respectively match the empty string at the beginning and end of a word. The symbol \\b matches the empty string at the edge of a word, and \\B matches the empty string provided it\u0026#39;s not at the edge of a word. The symbol \\w is a synonym for [_[:alnum:]] and \\W is a synonym for [^_[:alnum:]]. Repetition A regular expression may be followed by one of several repetition operators: ? The preceding item is optional and matched at most once. * The preceding item will be matched zero or more times. + The preceding item will be matched one or more times. {n} The preceding item is matched exactly n times. {n,} The preceding item is matched n or more times. {,m} The preceding item is matched at most m times. This is a GNU extension. {n,m} The preceding item is matched at least n times, but not more than m times. Concatenation Two regular expressions may be concatenated; the resulting regular expression matches any string formed by concatenating two substrings that respectively match the concatenated expressions. Alternation Two regular expressions may be joined by the infix operator |; the resulting regular expression matches any string matching either alternate expression. Precedence Repetition takes precedence over concatenation, which in turn takes precedence over alternation. A whole expression may be enclosed in parentheses to override these precedence rules and form a subexpression. Back-references and Subexpressions The back-reference \\n, where n is a single digit, matches the substring previously matched by the nth parenthesized subexpression of the regular expression. Basic vs Extended Regular Expressions In basic regular expressions the meta-characters ?, +, {, |, (, and ) lose their special meaning; instead use the backslashed versions \\?, \\+, \\{, \\|, \\(, and \\). EXIT STATUS Normally the exit status is 0 if a line is selected, 1 if no lines were selected, and 2 if an error occurred. However, if the -q or --quiet or --silent is used and a line is selected, the exit status is 0 even if an error occurred. ENVIRONMENT The behavior of grep is affected by the following environment variables. The locale for category LC_foo is specified by examining the three environment variables LC_ALL, LC_foo, LANG, in that order. The first of these variables that is set specifies the locale. For example, if LC_ALL is not set, but LC_MESSAGES is set to pt_BR, then the Brazilian Portuguese locale is used for the LC_MESSAGES category. The C locale is used if none of these environment variables are set, if the locale catalog is not installed, or if grep was not compiled with national language support (NLS). The shell command locale -a lists locales that are currently available. GREP_COLORS Controls how the --color option highlights output. Its value is a colon-separated list of capabilities that defaults to ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36 with the rv and ne boolean capabilities omitted (i.e., false). Supported capabilities are as follows. sl= SGR substring for whole selected lines (i.e., matching lines when the -v command-line option is omitted, or non- matching lines when -v is specified). If however the boolean rv capability and the -v command-line option are both specified, it applies to context matching lines instead. The default is empty (i.e., the terminal\u0026#39;s default color pair). cx= SGR substring for whole context lines (i.e., non-matching lines when the -v command-line option is omitted, or matching lines when -v is specified). If however the boolean rv capability and the -v command-line option are both specified, it applies to selected non-matching lines instead. The default is empty (i.e., the terminal\u0026#39;s default color pair). rv Boolean value that reverses (swaps) the meanings of the sl= and cx= capabilities when the -v command-line option is specified. The default is false (i.e., the capability is omitted). mt=01;31 SGR substring for matching non-empty text in any matching line (i.e., a selected line when the -v command-line option is omitted, or a context line when -v is specified). Setting this is equivalent to setting both ms= and mc= at once to the same value. The default is a bold red text foreground over the current line background. ms=01;31 SGR substring for matching non-empty text in a selected line. (This is only used when the -v command-line option is omitted.) The effect of the sl= (or cx= if rv) capability remains active when this kicks in. The default is a bold red text foreground over the current line background. mc=01;31 SGR substring for matching non-empty text in a context line. (This is only used when the -v command-line option is specified.) The effect of the cx= (or sl= if rv) capability remains active when this kicks in. The default is a bold red text foreground over the current line background. fn=35 SGR substring for file names prefixing any content line. The default is a magenta text foreground over the terminal\u0026#39;s default background. ln=32 SGR substring for line numbers prefixing any content line. The default is a green text foreground over the terminal\u0026#39;s default background. bn=32 SGR substring for byte offsets prefixing any content line. The default is a green text foreground over the terminal\u0026#39;s default background. se=36 SGR substring for separators that are inserted between selected line fields (:), between context line fields, (-), and between groups of adjacent lines when nonzero context is specified (--). The default is a cyan text foreground over the terminal\u0026#39;s default background. ne Boolean value that prevents clearing to the end of line using Erase in Line (EL) to Right (\\33[K) each time a colorized item ends. This is needed on terminals on which EL is not supported. It is otherwise useful on terminals for which the back_color_erase (bce) boolean terminfo capability does not apply, when the chosen highlight colors do not affect the background, or when EL is too slow or causes too much flicker. The default is false (i.e., the capability is omitted). Note that boolean capabilities have no =... part. They are omitted (i.e., false) by default and become true when specified. See the Select Graphic Rendition (SGR) section in the documentation of the text terminal that is used for permitted values and their meaning as character attributes. These substring values are integers in decimal representation and can be concatenated with semicolons. grep takes care of assembling the result into a complete SGR sequence (\\33[...m). Common values to concatenate include 1 for bold, 4 for underline, 5 for blink, 7 for inverse, 39 for default foreground color, 30 to 37 for foreground colors, 90 to 97 for 16-color mode foreground colors, 38;5;0 to 38;5;255 for 88-color and 256-color modes foreground colors, 49 for default background color, 40 to 47 for background colors, 100 to 107 for 16-color mode background colors, and 48;5;0 to 48;5;255 for 88-color and 256-color modes background colors. LC_ALL, LC_COLLATE, LANG These variables specify the locale for the LC_COLLATE category, which determines the collating sequence used to interpret range expressions like [a-z]. LC_ALL, LC_CTYPE, LANG These variables specify the locale for the LC_CTYPE category, which determines the type of characters, e.g., which characters are whitespace. This category also determines the character encoding, that is, whether text is encoded in UTF-8, ASCII, or some other encoding. In the C or POSIX locale, all characters are encoded as a single byte and every byte is a valid character. LC_ALL, LC_MESSAGES, LANG These variables specify the locale for the LC_MESSAGES category, which determines the language that grep uses for messages. The default C locale uses American English messages. POSIXLY_CORRECT If set, grep behaves as POSIX requires; otherwise, grep behaves more like other GNU programs. POSIX requires that options that follow file names must be treated as file names; by default, such options are permuted to the front of the operand list and are treated as options. Also, POSIX requires that unrecognized options be diagnosed as “illegal”, but since they are not really against the law the default is to diagnose them as “invalid”. NOTES This man page is maintained only fitfully; the full documentation is often more up-to-date. COPYRIGHT Copyright 1998-2000, 2002, 2005-2023 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. BUGS Reporting Bugs Email bug reports to the bug-reporting address ⟨bug-grep@gnu.org⟩. An email archive ⟨https://lists.gnu.org/mailman/listinfo/bug-grep⟩ and a bug tracker ⟨https://debbugs.gnu.org/cgi/pkgreport.cgi?package=grep⟩ are available. Known Bugs Large repetition counts in the {n,m} construct may cause grep to use lots of memory. In addition, certain other obscure regular expressions require exponential time and space, and may cause grep to run out of memory. Back-references are very slow, and may require exponential time. EXAMPLE The following example outputs the location and contents of any line containing “f” and ending in “.c”, within all files in the current di‐ rectory whose names contain “g” and end in “.h”. The -n option outputs line numbers, the -- argument treats expansions of “*g*.h” starting with “-” as file names not options, and the empty file /dev/null causes file names to be output even if only one file name happens to be of the form “*g*.h”. $ grep -n -- \u0026#39;f.*\\.c$\u0026#39; *g*.h /dev/null argmatch.h:1:/* definitions and prototypes for argmatch.c The only line that matches is line 1 of argmatch.h. Note that the reg‐ ular expression syntax used in the pattern differs from the globbing syntax that the shell uses to match file names.\r","date":"2024-10-22","id":130,"permalink":"/personal-site/docs/bash-linux/command-docs/grep/","summary":"\u003ch2 id=\"grep---help\"\u003egrep \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: grep \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... PATTERNS \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSearch \u003cspan class=\"k\"\u003efor\u003c/span\u003e PATTERNS in each FILE.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eExample: grep -i \u003cspan class=\"s1\"\u003e\u0026#39;hello world\u0026#39;\u003c/span\u003e menu.h main.c\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePATTERNS can contain multiple patterns separated by newlines.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePattern selection and interpretation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -E, --extended-regexp     PATTERNS are extended regular expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -F, --fixed-strings       PATTERNS are strings\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -G, --basic-regexp        PATTERNS are basic regular expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -P, --perl-regexp         PATTERNS are Perl regular expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -e, --regexp\u003cspan class=\"o\"\u003e=\u003c/span\u003ePATTERNS     use PATTERNS \u003cspan class=\"k\"\u003efor\u003c/span\u003e matching\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --file\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE           take PATTERNS from FILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -i, --ignore-case         ignore \u003cspan class=\"k\"\u003ecase\u003c/span\u003e distinctions in patterns and data\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --no-ignore-case      \u003cspan class=\"k\"\u003edo\u003c/span\u003e not ignore \u003cspan class=\"k\"\u003ecase\u003c/span\u003e distinctions \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -w, --word-regexp         match only whole words\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -x, --line-regexp         match only whole lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -z, --null-data           a data line ends in \u003cspan class=\"m\"\u003e0\u003c/span\u003e byte, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMiscellaneous:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --no-messages         suppress error messages\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --invert-match        \u003cspan class=\"k\"\u003eselect\u003c/span\u003e non-matching lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -V, --version             display version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help                display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e text and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOutput control:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m, --max-count\u003cspan class=\"o\"\u003e=\u003c/span\u003eNUM       stop after NUM selected lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -b, --byte-offset         print the byte offset with output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --line-number         print line number with output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --line-buffered       flush output on every line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -H, --with-filename       print file name with output lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -h, --no-filename         suppress the file name prefix on output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --label\u003cspan class=\"o\"\u003e=\u003c/span\u003eLABEL         use LABEL as the standard input file name prefix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -o, --only-matching       show only nonempty parts of lines that match\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -q, --quiet, --silent     suppress all normal output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --binary-files\u003cspan class=\"o\"\u003e=\u003c/span\u003eTYPE   assume that binary files are TYPE\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            TYPE is \u003cspan class=\"s1\"\u003e\u0026#39;binary\u0026#39;\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;text\u0026#39;\u003c/span\u003e, or \u003cspan class=\"s1\"\u003e\u0026#39;without-match\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -a, --text                equivalent to --binary-files\u003cspan class=\"o\"\u003e=\u003c/span\u003etext\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -I                        equivalent to --binary-files\u003cspan class=\"o\"\u003e=\u003c/span\u003ewithout-match\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --directories\u003cspan class=\"o\"\u003e=\u003c/span\u003eACTION  how to handle directories\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            ACTION is \u003cspan class=\"s1\"\u003e\u0026#39;read\u0026#39;\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;recurse\u0026#39;\u003c/span\u003e, or \u003cspan class=\"s1\"\u003e\u0026#39;skip\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -D, --devices\u003cspan class=\"o\"\u003e=\u003c/span\u003eACTION      how to handle devices, FIFOs and sockets\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            ACTION is \u003cspan class=\"s1\"\u003e\u0026#39;read\u0026#39;\u003c/span\u003e or \u003cspan class=\"s1\"\u003e\u0026#39;skip\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -r, --recursive           like --directories\u003cspan class=\"o\"\u003e=\u003c/span\u003erecurse\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -R, --dereference-recursive  likewise, but follow all symlinks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --include\u003cspan class=\"o\"\u003e=\u003c/span\u003eGLOB        search only files that match GLOB \u003cspan class=\"o\"\u003e(\u003c/span\u003ea file pattern\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --exclude\u003cspan class=\"o\"\u003e=\u003c/span\u003eGLOB        skip files that match GLOB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --exclude-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE   skip files that match any file pattern from FILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --exclude-dir\u003cspan class=\"o\"\u003e=\u003c/span\u003eGLOB    skip directories that match GLOB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -L, --files-without-match  print only names of FILEs with no selected lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -l, --files-with-matches  print only names of FILEs with selected lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --count               print only a count of selected lines per FILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -T, --initial-tab         make tabs line up \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e needed\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -Z, --null                print \u003cspan class=\"m\"\u003e0\u003c/span\u003e byte after FILE name\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eContext control:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -B, --before-context\u003cspan class=\"o\"\u003e=\u003c/span\u003eNUM  print NUM lines of leading context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -A, --after-context\u003cspan class=\"o\"\u003e=\u003c/span\u003eNUM   print NUM lines of trailing context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -C, --context\u003cspan class=\"o\"\u003e=\u003c/span\u003eNUM         print NUM lines of output context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -NUM                      same as --context\u003cspan class=\"o\"\u003e=\u003c/span\u003eNUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --group-separator\u003cspan class=\"o\"\u003e=\u003c/span\u003eSEP  print SEP on line between matches with context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --no-group-separator  \u003cspan class=\"k\"\u003edo\u003c/span\u003e not print separator \u003cspan class=\"k\"\u003efor\u003c/span\u003e matches with context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --color\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --colour\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e       use markers to highlight the matching strings\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            WHEN is \u003cspan class=\"s1\"\u003e\u0026#39;always\u0026#39;\u003c/span\u003e, \u003cspan class=\"s1\"\u003e\u0026#39;never\u0026#39;\u003c/span\u003e, or \u003cspan class=\"s1\"\u003e\u0026#39;auto\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -U, --binary              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not strip CR characters at EOL \u003cspan class=\"o\"\u003e(\u003c/span\u003eMSDOS/Windows\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWhen FILE is \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.  With no FILE, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erecursive, \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e otherwise.  With fewer than two FILEs, assume -h.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eExit status is \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e any line is selected, \u003cspan class=\"m\"\u003e1\u003c/span\u003e otherwise\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e any error occurs and -q is not given, the \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e status is 2.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-grep\"\u003eman grep\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       grep, egrep, fgrep, rgrep - print lines that match patterns\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       grep \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION...\u003cspan class=\"o\"\u003e]\u003c/span\u003e PATTERNS \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       grep \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION...\u003cspan class=\"o\"\u003e]\u003c/span\u003e -e PATTERNS ... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       grep \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION...\u003cspan class=\"o\"\u003e]\u003c/span\u003e -f PATTERN_FILE ... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE...\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       grep  searches  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  PATTERNS  in  each  FILE.  PATTERNS is one or more\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       patterns separated by newline characters, and  grep  prints  each  line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       that  matches a pattern.  Typically PATTERNS should be quoted when grep\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       is used in a shell command.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       A FILE of “-”  stands  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  standard  input.   If  no  FILE  is  given,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       recursive  searches  examine  the  working  directory, and nonrecursive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       searches \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Debian also includes the  variant  programs  egrep,  fgrep  and  rgrep.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       These   programs  are  the  same  as  grep -E,  grep -F,  and  grep -r,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       respectively.  These  variants  are  deprecated  upstream,  but  Debian\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       provides  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  backward  compatibility.  For portability reasons, it is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       recommended to avoid the  variant  programs,  and  use  grep  with  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       related option instead.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOPTIONS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Generic Program Information\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help Output a usage message and exit.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -V, --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Output the version number of grep and exit.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Pattern Syntax\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -E, --extended-regexp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Interpret  PATTERNS  as  extended regular expressions \u003cspan class=\"o\"\u003e(\u003c/span\u003eEREs, see\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              below\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -F, --fixed-strings\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Interpret PATTERNS as fixed strings, not regular expressions.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -G, --basic-regexp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Interpret PATTERNS  as  basic  regular  expressions  \u003cspan class=\"o\"\u003e(\u003c/span\u003eBREs,  see\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              below\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  This is the default.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -P, --perl-regexp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Interpret   PATTERNS   as  Perl-compatible  regular  expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"o\"\u003e(\u003c/span\u003ePCREs\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  This option is experimental when combined with the  -z\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"o\"\u003e(\u003c/span\u003e--null-data\u003cspan class=\"o\"\u003e)\u003c/span\u003e  option,  and  grep  -P  may warn of unimplemented\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              features.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Matching Control\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -e PATTERNS, --regexp\u003cspan class=\"o\"\u003e=\u003c/span\u003ePATTERNS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Use PATTERNS as the patterns.  If this option is  used  multiple\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e or is combined with the -f \u003cspan class=\"o\"\u003e(\u003c/span\u003e--file\u003cspan class=\"o\"\u003e)\u003c/span\u003e option, search \u003cspan class=\"k\"\u003efor\u003c/span\u003e all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              patterns  given.   This  option can be used to protect a pattern\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              beginning with “-”.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f FILE, --file\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Obtain patterns from FILE, one per line.  If this option is used\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              multiple \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e or is combined with  the  -e  \u003cspan class=\"o\"\u003e(\u003c/span\u003e--regexp\u003cspan class=\"o\"\u003e)\u003c/span\u003e  option,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              search  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  all  patterns  given.  The empty file contains zero\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              patterns, and therefore matches nothing.  If FILE is  -  ,  \u003cspan class=\"nb\"\u003eread\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              patterns from standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -i, --ignore-case\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Ignore  \u003cspan class=\"k\"\u003ecase\u003c/span\u003e  distinctions  in  patterns and input data, so that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              characters that differ only in \u003cspan class=\"k\"\u003ecase\u003c/span\u003e match each other.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --no-ignore-case\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Do not ignore \u003cspan class=\"k\"\u003ecase\u003c/span\u003e distinctions  in  patterns  and  input  data.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              This is the default.  This option is useful \u003cspan class=\"k\"\u003efor\u003c/span\u003e passing to shell\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              scripts  that  already use -i, to cancel its effects because the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              two options override each other.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --invert-match\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Invert the sense of matching, to \u003cspan class=\"k\"\u003eselect\u003c/span\u003e non-matching lines.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -w, --word-regexp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Select only those  lines  containing  matches  that  form  whole\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              words.   The  \u003cspan class=\"nb\"\u003etest\u003c/span\u003e is that the matching substring must either be\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              at the  beginning  of  the  line,  or  preceded  by  a  non-word\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              constituent  character.  Similarly, it must be either at the end\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              of the line or followed by  a  non-word  constituent  character.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Word-constituent   characters   are  letters,  digits,  and  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              underscore.  This option has no effect \u003cspan class=\"k\"\u003eif\u003c/span\u003e -x is also specified.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -x, --line-regexp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Select only those matches that exactly  match  the  whole  line.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              For  a  regular  expression pattern, this is like parenthesizing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              the pattern and \u003cspan class=\"k\"\u003ethen\u003c/span\u003e surrounding it with ^ and $.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   General Output Control\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --count\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Suppress normal output\u003cspan class=\"p\"\u003e;\u003c/span\u003e instead print a count of matching  lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003efor\u003c/span\u003e  each  input  file.  With the -v, --invert-match option \u003cspan class=\"o\"\u003e(\u003c/span\u003esee\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              above\u003cspan class=\"o\"\u003e)\u003c/span\u003e, count non-matching lines.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --color\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e, --colour\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Surround  the  matched  \u003cspan class=\"o\"\u003e(\u003c/span\u003enon-empty\u003cspan class=\"o\"\u003e)\u003c/span\u003e  strings,  matching   lines,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              context  lines,  file  names,  line  numbers,  byte offsets, and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              separators \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e fields and groups of context lines\u003cspan class=\"o\"\u003e)\u003c/span\u003e with  escape\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              sequences  to display them in color on the terminal.  The colors\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are defined by the environment variable  GREP_COLORS.   WHEN  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              never, always, or auto.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -L, --files-without-match\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Suppress  normal  output\u003cspan class=\"p\"\u003e;\u003c/span\u003e  instead  print the name of each input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              file from which no output would normally have been printed.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -l, --files-with-matches\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Suppress normal output\u003cspan class=\"p\"\u003e;\u003c/span\u003e instead print the  name  of  each  input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              file  from  which  output  would  normally  have  been  printed.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Scanning each input file stops upon first match.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -m NUM, --max-count\u003cspan class=\"o\"\u003e=\u003c/span\u003eNUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Stop reading a file after NUM matching lines.  If NUM  is  zero,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              grep  stops  right  away  without reading input.  A NUM of -1 is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              treated as infinity and grep does not stop\u003cspan class=\"p\"\u003e;\u003c/span\u003e this is the default.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              If the input is standard input from  a  regular  file,  and  NUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              matching  lines are output, grep ensures that the standard input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              is positioned to  just  after  the  last  matching  line  before\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              exiting,  regardless  of the presence of trailing context lines.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              This enables a calling process to resume a  search.   When  grep\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              stops  after NUM matching lines, it outputs any trailing context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              lines.  When the -c or --count option is also  used,  grep  does\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              not   output   a  count  greater  than  NUM.   When  the  -v  or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              --invert-match option is also used, grep stops after  outputting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              NUM non-matching lines.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -o, --only-matching\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Print  only  the  matched  \u003cspan class=\"o\"\u003e(\u003c/span\u003enon-empty\u003cspan class=\"o\"\u003e)\u003c/span\u003e parts of a matching line,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with each such part on a separate output line.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -q, --quiet, --silent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Quiet\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"k\"\u003edo\u003c/span\u003e  not  write  anything  to  standard   output.    Exit\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              immediately  with  zero status \u003cspan class=\"k\"\u003eif\u003c/span\u003e any match is found, even \u003cspan class=\"k\"\u003eif\u003c/span\u003e an\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              error was detected.  Also see the -s or --no-messages option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --no-messages\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Suppress error messages about nonexistent or unreadable files.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Output Line Prefix Control\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -b, --byte-offset\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Print the 0-based byte offset within the input file before  each\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              line of output.  If -o \u003cspan class=\"o\"\u003e(\u003c/span\u003e--only-matching\u003cspan class=\"o\"\u003e)\u003c/span\u003e is specified, print the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              offset of the matching part itself.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -H, --with-filename\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Print  the  file  name \u003cspan class=\"k\"\u003efor\u003c/span\u003e each match.  This is the default when\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              there is more than one file to search.  This is a GNU extension.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -h, --no-filename\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Suppress the prefixing of file names on  output.   This  is  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              default  when there is only one file \u003cspan class=\"o\"\u003e(\u003c/span\u003eor only standard input\u003cspan class=\"o\"\u003e)\u003c/span\u003e to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              search.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --label\u003cspan class=\"o\"\u003e=\u003c/span\u003eLABEL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Display input actually  coming  from  standard  input  as  input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              coming  from  file  LABEL.  This can be useful \u003cspan class=\"k\"\u003efor\u003c/span\u003e commands that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              transform a file\u003cspan class=\"s1\"\u003e\u0026#39;s contents before  searching,  e.g.,  gzip  -cd\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              foo.gz  |  grep  --label=foo -H \u0026#39;\u003c/span\u003esome pattern\u003cspan class=\"s1\"\u003e\u0026#39;.  See also the -H\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              option.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -n, --line-number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Prefix each line of output with the 1-based line  number  within\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              its input file.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -T, --initial-tab\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Make  sure  that the first character of actual line content lies\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              on a tab stop, so that the alignment of tabs looks normal.  This\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              is useful with options that prefix their output  to  the  actual\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              content:  -H,-n,  and  -b.   In order to improve the probability\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              that lines from a single file will all start at the same column,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              this also causes the line number and byte offset (if present) to\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              be printed in a minimum size field width.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -Z, --null\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Output a zero byte (the ASCII  NUL  character)  instead  of  the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              character  that normally follows a file name.  For example, grep\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              -lZ outputs a zero byte after each  file  name  instead  of  the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              usual  newline.   This option makes the output unambiguous, even\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              in the presence of file names containing unusual characters like\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              newlines.  This option can  be  used  with  commands  like  find\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              -print0,  perl  -0,  sort  -z, and xargs -0 to process arbitrary\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              file names, even those that contain newline characters.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e   Context Line Control\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -A NUM, --after-context=NUM\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Print NUM  lines  of  trailing  context  after  matching  lines.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Places   a  line  containing  a  group  separator  (--)  between\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              contiguous groups of matches.  With the  -o  or  --only-matching\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              option, this has no effect and a warning is given.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -B NUM, --before-context=NUM\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Print  NUM  lines  of  leading  context  before  matching lines.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Places  a  line  containing  a  group  separator  (--)   between\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              contiguous  groups  of  matches.  With the -o or --only-matching\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              option, this has no effect and a warning is given.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -C NUM, -NUM, --context=NUM\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Print NUM lines of output context.  Places a line  containing  a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              group separator (--) between contiguous groups of matches.  With\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              the  -o  or  --only-matching  option,  this  has no effect and a\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              warning is given.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --group-separator=SEP\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              When -A, -B, or -C are in use, print SEP instead of  --  between\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              groups of lines.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --no-group-separator\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              When  -A, -B, or -C are in use, do not print a separator between\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              groups of lines.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e   File and Directory Selection\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -a, --text\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              Process a binary file as if it were text; this is equivalent  to\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              the --binary-files=text option.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --binary-files=TYPE\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              If  a  file\u0026#39;\u003c/span\u003es  data  or metadata indicate that the file contains\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              binary data, assume that the file is  of  \u003cspan class=\"nb\"\u003etype\u003c/span\u003e  TYPE.   Non-text\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              bytes  indicate  binary data\u003cspan class=\"p\"\u003e;\u003c/span\u003e these are either output bytes that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are improperly encoded \u003cspan class=\"k\"\u003efor\u003c/span\u003e the current  locale,  or  null  input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              bytes when the -z option is not given.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              By  default,  TYPE  is  binary, and grep suppresses output after\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              null input binary data  is  discovered,  and  suppresses  output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              lines that contain improperly encoded data.  When some output is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              suppressed,  grep  follows any output with a message to standard\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              error saying that a binary file matches.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              If TYPE is without-match, when grep discovers null input  binary\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              data  it  assumes that the rest of the file does not match\u003cspan class=\"p\"\u003e;\u003c/span\u003e this\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              is equivalent to the -I option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              If TYPE is text, grep processes a binary  file  as  \u003cspan class=\"k\"\u003eif\u003c/span\u003e  it  were\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              text\u003cspan class=\"p\"\u003e;\u003c/span\u003e this is equivalent to the -a option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              When  \u003cspan class=\"nb\"\u003etype\u003c/span\u003e  is  binary,  grep  may  treat non-text bytes as line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              terminators even without the -z  option.   This  means  choosing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              binary  versus text can affect whether a pattern matches a file.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              For example, when \u003cspan class=\"nb\"\u003etype\u003c/span\u003e is binary the pattern q$  might  match  q\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              immediately  followed  by  a  null byte, even though this is not\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              matched when \u003cspan class=\"nb\"\u003etype\u003c/span\u003e is text.  Conversely, when \u003cspan class=\"nb\"\u003etype\u003c/span\u003e is binary  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              pattern . \u003cspan class=\"o\"\u003e(\u003c/span\u003eperiod\u003cspan class=\"o\"\u003e)\u003c/span\u003e might not match a null byte.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Warning:  The  -a  option might output binary garbage, which can\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              have nasty side effects \u003cspan class=\"k\"\u003eif\u003c/span\u003e the output is a terminal and  \u003cspan class=\"k\"\u003eif\u003c/span\u003e  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              terminal driver interprets some of it as commands.  On the other\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              hand,  when  reading  files whose text encodings are unknown, it\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              can  be  helpful  to  use  -a  or  to  \u003cspan class=\"nb\"\u003eset\u003c/span\u003e  \u003cspan class=\"nv\"\u003eLC_ALL\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;C\u0026#39;\u003c/span\u003e  in   the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              environment,  in  order to find more matches even \u003cspan class=\"k\"\u003eif\u003c/span\u003e the matches\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are unsafe \u003cspan class=\"k\"\u003efor\u003c/span\u003e direct display.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -D ACTION, --devices\u003cspan class=\"o\"\u003e=\u003c/span\u003eACTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              If an input file is a device, FIFO  or  socket,  use  ACTION  to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              process  it.   By  default,  ACTION  is  read,  which means that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              devices are \u003cspan class=\"nb\"\u003eread\u003c/span\u003e just as \u003cspan class=\"k\"\u003eif\u003c/span\u003e they were ordinary files.  If ACTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              is skip, devices are silently skipped.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -d ACTION, --directories\u003cspan class=\"o\"\u003e=\u003c/span\u003eACTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              If an input file is a directory, use ACTION to process  it.   By\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              default,  ACTION is read, i.e., \u003cspan class=\"nb\"\u003eread\u003c/span\u003e directories just as \u003cspan class=\"k\"\u003eif\u003c/span\u003e they\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              were  ordinary  files.   If  ACTION  is  skip,   silently   skip\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              directories.   If  ACTION  is recurse, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e all files under each\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              directory, recursively, following symbolic links  only  \u003cspan class=\"k\"\u003eif\u003c/span\u003e  they\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are on the \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line.  This is equivalent to the -r option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --exclude\u003cspan class=\"o\"\u003e=\u003c/span\u003eGLOB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Skip  any  command-line file with a name suffix that matches the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              pattern GLOB, using wildcard matching\u003cspan class=\"p\"\u003e;\u003c/span\u003e a name suffix  is  either\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              the  whole name, or a trailing part that starts with a non-slash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              character immediately after a  slash  \u003cspan class=\"o\"\u003e(\u003c/span\u003e/\u003cspan class=\"o\"\u003e)\u003c/span\u003e  in  the  name.   When\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              searching  recursively, skip any subfile whose base name matches\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              GLOB\u003cspan class=\"p\"\u003e;\u003c/span\u003e the base name is the part after the last slash.  A pattern\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              can use *, ?, and \u003cspan class=\"o\"\u003e[\u003c/span\u003e...\u003cspan class=\"o\"\u003e]\u003c/span\u003e as wildcards, and \u003cspan class=\"se\"\u003e\\ \u003c/span\u003eto quote a  wildcard\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              or backslash character literally.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --exclude-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Skip  files  whose  base name matches any of the file-name globs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003eread\u003c/span\u003e from FILE  \u003cspan class=\"o\"\u003e(\u003c/span\u003eusing  wildcard  matching  as  described  under\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              --exclude\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --exclude-dir\u003cspan class=\"o\"\u003e=\u003c/span\u003eGLOB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Skip  any command-line directory with a name suffix that matches\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              the  pattern  GLOB.   When  searching  recursively,   skip   any\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              subdirectory whose base name matches GLOB.  Ignore any redundant\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              trailing slashes in GLOB.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -I     Process  a  binary  file as \u003cspan class=\"k\"\u003eif\u003c/span\u003e it did not contain matching data\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              this is equivalent to the --binary-files\u003cspan class=\"o\"\u003e=\u003c/span\u003ewithout-match option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --include\u003cspan class=\"o\"\u003e=\u003c/span\u003eGLOB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Search only files whose base name matches GLOB  \u003cspan class=\"o\"\u003e(\u003c/span\u003eusing  wildcard\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              matching   as  described  under  --exclude\u003cspan class=\"o\"\u003e)\u003c/span\u003e.   If  contradictory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              --include and --exclude options are given, the last matching one\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              wins.  If no --include or --exclude options  match,  a  file  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              included unless the first such option is --include.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -r, --recursive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Read  all  files  under  each  directory, recursively, following\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              symbolic links only \u003cspan class=\"k\"\u003eif\u003c/span\u003e they are on the \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line.  Note  that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003eif\u003c/span\u003e   no  file  operand  is  given,  grep  searches  the  working\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              directory.  This is equivalent to the -d recurse option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -R, --dereference-recursive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Read all files under each directory,  recursively.   Follow  all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              symbolic links, unlike -r.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Other Options\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --line-buffered\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Use  line  buffering  on  output.   This can cause a performance\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              penalty.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -U, --binary\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Treat the file\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e as binary.  By default, under MS-DOS  and  MS-\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Windows,  grep  guesses  whether  a  file  is  text or binary as\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              described \u003cspan class=\"k\"\u003efor\u003c/span\u003e the --binary-files option.  If  grep  decides  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              file  is  a  text  file,  it  strips  the CR characters from the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              original file contents \u003cspan class=\"o\"\u003e(\u003c/span\u003eto make regular expressions with ^ and $\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              work  correctly\u003cspan class=\"o\"\u003e)\u003c/span\u003e.   Specifying  -U  overrules  this   guesswork,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              causing  all  files  to  be  \u003cspan class=\"nb\"\u003eread\u003c/span\u003e  and  passed  to  the matching\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              mechanism verbatim\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e the file is a text file with CR/LF  pairs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              at   the  end  of  each  line,  this  will  cause  some  regular\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              expressions to fail.  This option has  no  effect  on  platforms\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              other than MS-DOS and MS-Windows.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -z, --null-data\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Treat  input  and  output  data  as  sequences  of  lines,  each\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              terminated by a zero byte \u003cspan class=\"o\"\u003e(\u003c/span\u003ethe ASCII NUL character\u003cspan class=\"o\"\u003e)\u003c/span\u003e instead of a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              newline.  Like the -Z or --null option, this option can be  used\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with commands like sort -z to process arbitrary file names.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eREGULAR EXPRESSIONS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       A  regular  expression  is  a  pattern that describes a \u003cspan class=\"nb\"\u003eset\u003c/span\u003e of strings.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Regular  expressions  are   constructed   analogously   to   arithmetic\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       expressions, by using various operators to combine smaller expressions.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       grep understands three different versions of regular expression syntax:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       “basic”  \u003cspan class=\"o\"\u003e(\u003c/span\u003eBRE\u003cspan class=\"o\"\u003e)\u003c/span\u003e, “extended” \u003cspan class=\"o\"\u003e(\u003c/span\u003eERE\u003cspan class=\"o\"\u003e)\u003c/span\u003e and “perl” \u003cspan class=\"o\"\u003e(\u003c/span\u003ePCRE\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  In GNU grep, basic\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       and extended regular expressions are merely different notations \u003cspan class=\"k\"\u003efor\u003c/span\u003e the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       same pattern-matching functionality.  In other  implementations,  basic\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       regular  expressions are ordinarily less powerful than extended, though\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       occasionally it is the other way  around.   The  following  description\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       applies  to extended regular expressions\u003cspan class=\"p\"\u003e;\u003c/span\u003e differences \u003cspan class=\"k\"\u003efor\u003c/span\u003e basic regular\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       expressions  are  summarized   afterwards.    Perl-compatible   regular\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       expressions   have  different  functionality,  and  are  documented  in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       pcre2syntax\u003cspan class=\"o\"\u003e(\u003c/span\u003e3\u003cspan class=\"o\"\u003e)\u003c/span\u003e and pcre2pattern\u003cspan class=\"o\"\u003e(\u003c/span\u003e3\u003cspan class=\"o\"\u003e)\u003c/span\u003e, but work only \u003cspan class=\"k\"\u003eif\u003c/span\u003e  PCRE  support  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       enabled.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The  fundamental building blocks are the regular expressions that match\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       a single character.  Most characters, including all letters and digits,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       are regular expressions that match themselves.  Any meta-character with\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       special meaning may be quoted by preceding it with a backslash.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The period . matches any single character.  It is  unspecified  whether\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       it matches an encoding error.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Character Classes and Bracket Expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       A  bracket  expression is a list of characters enclosed by \u003cspan class=\"o\"\u003e[\u003c/span\u003e and \u003cspan class=\"o\"\u003e]\u003c/span\u003e.  It\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       matches any single character in that list.  If the first  character  of\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       the  list is the caret ^ \u003cspan class=\"k\"\u003ethen\u003c/span\u003e it matches any character not in the list\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       it is unspecified whether it matches an encoding error.   For  example,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       the regular expression \u003cspan class=\"o\"\u003e[\u003c/span\u003e0123456789\u003cspan class=\"o\"\u003e]\u003c/span\u003e matches any single digit.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Within  a  bracket  expression,  a  range  expression  consists  of two\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       characters separated by a hyphen.  It matches any single character that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sorts  between  the  two  characters,  inclusive,  using  the  locale\u003cspan class=\"s1\"\u003e\u0026#39;s\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       collating  sequence  and  character set.  For example, in the default C\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       locale, [a-d] is equivalent to [abcd].  Many locales sort characters in\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       dictionary  order,  and  in  these  locales  [a-d]  is  typically   not\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       equivalent to [abcd]; it might be equivalent to [aBbCcDd], for example.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       To  obtain  the  traditional interpretation of bracket expressions, you\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       can use the C locale by setting the LC_ALL environment variable to  the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       value C.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       Finally,  certain  named  classes  of  characters are predefined within\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       bracket expressions, as follows.  Their names are self explanatory, and\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       they  are  [:alnum:],  [:alpha:],  [:blank:],   [:cntrl:],   [:digit:],\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       [:graph:],  [:lower:],  [:print:], [:punct:], [:space:], [:upper:], and\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       [:xdigit:].  For example, [[:alnum:]]  means  the  character  class  of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       numbers  and  letters in the current locale.  In the C locale and ASCII\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       character set encoding, this is the same as  [0-9A-Za-z].   (Note  that\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       the  brackets  in these class names are part of the symbolic names, and\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       must be included in addition to the  brackets  delimiting  the  bracket\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       expression.)   Most  meta-characters  lose their special meaning inside\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       bracket expressions.  To include a literal ]  place  it  first  in  the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       list.   Similarly,  to include a literal ^ place it anywhere but first.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       Finally, to include a literal - place it last.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e   Anchoring\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       The caret ^ and the dollar sign $ are meta-characters that respectively\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       match the empty string at the beginning and end of a line.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e   The Backslash Character and Special Expressions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       The symbols \\\u0026lt; and \\\u0026gt;  respectively  match  the  empty  string  at  the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       beginning and end of a word.  The symbol \\b matches the empty string at\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       the  edge  of a word, and \\B matches the empty string provided it\u0026#39;\u003c/span\u003es not\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       at the edge of a word.  The symbol \u003cspan class=\"se\"\u003e\\w\u003c/span\u003e is a synonym \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e_\u003cspan class=\"o\"\u003e[\u003c/span\u003e:alnum:\u003cspan class=\"o\"\u003e]]\u003c/span\u003e and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\W\u003c/span\u003e is a synonym \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e^_\u003cspan class=\"o\"\u003e[\u003c/span\u003e:alnum:\u003cspan class=\"o\"\u003e]]\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Repetition\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       A regular expression may be  followed  by  one  of  several  repetition\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       operators:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       ?      The preceding item is optional and matched at most once.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       *      The preceding item will be matched zero or more times.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       +      The preceding item will be matched one or more times.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"o\"\u003e{\u003c/span\u003en\u003cspan class=\"o\"\u003e}\u003c/span\u003e    The preceding item is matched exactly n times.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"o\"\u003e{\u003c/span\u003en,\u003cspan class=\"o\"\u003e}\u003c/span\u003e   The preceding item is matched n or more times.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"o\"\u003e{\u003c/span\u003e,m\u003cspan class=\"o\"\u003e}\u003c/span\u003e   The  preceding  item  is matched at most m times.  This is a GNU\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              extension.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"o\"\u003e{\u003c/span\u003en,m\u003cspan class=\"o\"\u003e}\u003c/span\u003e  The preceding item is matched at least n  times,  but  not  more\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              than m times.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Concatenation\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Two  regular  expressions  may  be  concatenated\u003cspan class=\"p\"\u003e;\u003c/span\u003e the resulting regular\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       expression matches any string formed by  concatenating  two  substrings\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       that respectively match the concatenated expressions.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Alternation\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Two  regular  expressions  may  be  joined by the infix operator \u003cspan class=\"p\"\u003e|;\u003c/span\u003e the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       resulting  regular  expression  matches  any  string  matching   either\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       alternate expression.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Precedence\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Repetition  takes  precedence  over  concatenation, which in turn takes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       precedence over alternation.  A whole expression  may  be  enclosed  in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       parentheses   to   override   these   precedence   rules   and  form  a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       subexpression.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Back-references and Subexpressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The back-reference \u003cspan class=\"se\"\u003e\\n\u003c/span\u003e, where n is a single digit, matches the substring\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       previously matched  by  the  nth  parenthesized  subexpression  of  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       regular expression.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Basic vs Extended Regular Expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       In  basic  regular expressions the meta-characters ?, +, \u003cspan class=\"o\"\u003e{\u003c/span\u003e, \u003cspan class=\"p\"\u003e|\u003c/span\u003e, \u003cspan class=\"o\"\u003e(\u003c/span\u003e, and \u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       lose their special meaning\u003cspan class=\"p\"\u003e;\u003c/span\u003e instead use the  backslashed  versions  \u003cspan class=\"se\"\u003e\\?\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"se\"\u003e\\+\u003c/span\u003e, \u003cspan class=\"se\"\u003e\\{\u003c/span\u003e, \u003cspan class=\"se\"\u003e\\|\u003c/span\u003e, \u003cspan class=\"se\"\u003e\\(\u003c/span\u003e, and \u003cspan class=\"se\"\u003e\\)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEXIT STATUS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Normally the \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e status is \u003cspan class=\"m\"\u003e0\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e a line is selected, \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e no lines were\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       selected, and \u003cspan class=\"m\"\u003e2\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e an error occurred.  However, \u003cspan class=\"k\"\u003eif\u003c/span\u003e the -q or --quiet or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --silent  is  used and a line is selected, the \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e status is \u003cspan class=\"m\"\u003e0\u003c/span\u003e even \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       an error occurred.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eENVIRONMENT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The  behavior  of  grep  is  affected  by  the  following   environment\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       variables.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The  locale  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  category  LC_foo  is specified by examining the three\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       environment variables LC_ALL, LC_foo, LANG, in that order.   The  first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       of  these  variables that is \u003cspan class=\"nb\"\u003eset\u003c/span\u003e specifies the locale.  For example, \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       LC_ALL is not set, but LC_MESSAGES is \u003cspan class=\"nb\"\u003eset\u003c/span\u003e to pt_BR, \u003cspan class=\"k\"\u003ethen\u003c/span\u003e the  Brazilian\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Portuguese  locale  is used \u003cspan class=\"k\"\u003efor\u003c/span\u003e the LC_MESSAGES category.  The C locale\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       is used \u003cspan class=\"k\"\u003eif\u003c/span\u003e none of these environment variables are set, \u003cspan class=\"k\"\u003eif\u003c/span\u003e  the  locale\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       catalog  is  not  installed,  or \u003cspan class=\"k\"\u003eif\u003c/span\u003e grep was not compiled with national\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       language support \u003cspan class=\"o\"\u003e(\u003c/span\u003eNLS\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  The shell \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e locale -a lists locales that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       are currently available.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       GREP_COLORS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Controls how the --color option highlights output.  Its value is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              a  colon-separated  list  of  capabilities  that   defaults   to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003ems\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e01\u003cspan class=\"p\"\u003e;\u003c/span\u003e31:mc\u003cspan class=\"o\"\u003e=\u003c/span\u003e01\u003cspan class=\"p\"\u003e;\u003c/span\u003e31:sl\u003cspan class=\"o\"\u003e=\u003c/span\u003e:cx\u003cspan class=\"o\"\u003e=\u003c/span\u003e:fn\u003cspan class=\"o\"\u003e=\u003c/span\u003e35:ln\u003cspan class=\"o\"\u003e=\u003c/span\u003e32:bn\u003cspan class=\"o\"\u003e=\u003c/span\u003e32:se\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e36\u003c/span\u003e  with  the  rv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              and ne boolean capabilities omitted  \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e.,  \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e.   Supported\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              capabilities are as follows.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003esl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e    SGR  substring  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  whole selected lines \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e., matching\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     lines when the -v command-line option is omitted, or non-\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     matching lines when -v is  specified\u003cspan class=\"o\"\u003e)\u003c/span\u003e.   If  however  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     boolean  rv capability and the -v command-line option are\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     both specified, it  applies  to  context  matching  lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     instead.   The  default  is  empty  \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e., the terminal\u003cspan class=\"s1\"\u003e\u0026#39;s\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     default color pair).\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              cx=    SGR substring for whole context lines (i.e., non-matching\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     lines when the -v  command-line  option  is  omitted,  or\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     matching  lines  when  -v  is specified).  If however the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     boolean rv capability and the -v command-line option  are\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     both specified, it applies to selected non-matching lines\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     instead.   The  default  is  empty  (i.e., the terminal\u0026#39;\u003c/span\u003es\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     default color pair\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              rv     Boolean value that reverses \u003cspan class=\"o\"\u003e(\u003c/span\u003eswaps\u003cspan class=\"o\"\u003e)\u003c/span\u003e the meanings  of  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     \u003cspan class=\"nv\"\u003esl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e  and \u003cspan class=\"nv\"\u003ecx\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e capabilities when the -v command-line option\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     is specified.  The default is \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e., the capability\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     is omitted\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003emt\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e01\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     SGR substring \u003cspan class=\"k\"\u003efor\u003c/span\u003e matching non-empty text in any matching\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     line \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e., a selected  line  when  the  -v  command-line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     option   is  omitted,  or  a  context  line  when  -v  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     specified\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  Setting this is equivalent to  setting  both\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     \u003cspan class=\"nv\"\u003ems\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e  and \u003cspan class=\"nv\"\u003emc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e at once to the same value.  The default is a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     bold  red  text  foreground   over   the   current   line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     background.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003ems\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e01\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     SGR  substring  \u003cspan class=\"k\"\u003efor\u003c/span\u003e matching non-empty text in a selected\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     line.  \u003cspan class=\"o\"\u003e(\u003c/span\u003eThis is only used when the -v command-line option\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     is omitted.\u003cspan class=\"o\"\u003e)\u003c/span\u003e  The effect  of  the  \u003cspan class=\"nv\"\u003esl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"o\"\u003e(\u003c/span\u003eor  \u003cspan class=\"nv\"\u003ecx\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e  rv\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     capability  remains  active  when  this  kicks  in.   The\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     default is a bold red text foreground  over  the  current\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     line background.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003emc\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e01\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e31\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     SGR  substring  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  matching non-empty text in a context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     line.  \u003cspan class=\"o\"\u003e(\u003c/span\u003eThis is only used when the -v command-line option\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     is specified.\u003cspan class=\"o\"\u003e)\u003c/span\u003e  The effect of the  \u003cspan class=\"nv\"\u003ecx\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"o\"\u003e(\u003c/span\u003eor  \u003cspan class=\"nv\"\u003esl\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e  rv\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     capability  remains  active  when  this  kicks  in.   The\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     default is a bold red text foreground  over  the  current\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     line background.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003efn\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e35\u003c/span\u003e  SGR  substring \u003cspan class=\"k\"\u003efor\u003c/span\u003e file names prefixing any content line.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     The  default  is  a  magenta  text  foreground  over  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     terminal\u003cspan class=\"s1\"\u003e\u0026#39;s default background.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              ln=32  SGR  substring  for  line  numbers  prefixing any content\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     line.  The default is a green text  foreground  over  the\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     terminal\u0026#39;\u003c/span\u003es default background.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nv\"\u003ebn\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"m\"\u003e32\u003c/span\u003e  SGR  substring  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  byte  offsets  prefixing any content\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     line.  The default is a green text  foreground  over  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     terminal\u003cspan class=\"s1\"\u003e\u0026#39;s default background.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              se=36  SGR  substring  for  separators that are inserted between\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     selected line fields (:), between  context  line  fields,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     (-),  and  between  groups of adjacent lines when nonzero\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     context is specified (--).  The default is  a  cyan  text\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                     foreground over the terminal\u0026#39;\u003c/span\u003es default background.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ne     Boolean  value  that prevents clearing to the end of line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     using Erase in Line \u003cspan class=\"o\"\u003e(\u003c/span\u003eEL\u003cspan class=\"o\"\u003e)\u003c/span\u003e to Right  \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e3\u003cspan class=\"o\"\u003e[\u003c/span\u003eK\u003cspan class=\"o\"\u003e)\u003c/span\u003e  each  \u003cspan class=\"nb\"\u003etime\u003c/span\u003e  a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     colorized  item  ends.   This  is  needed on terminals on\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     which EL is not supported.  It  is  otherwise  useful  on\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     terminals  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  which  the back_color_erase \u003cspan class=\"o\"\u003e(\u003c/span\u003ebce\u003cspan class=\"o\"\u003e)\u003c/span\u003e boolean\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     terminfo capability  does  not  apply,  when  the  chosen\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     highlight colors \u003cspan class=\"k\"\u003edo\u003c/span\u003e not affect the background, or when EL\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     is  too  slow or causes too much flicker.  The default is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                     \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e., the capability is omitted\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              Note that boolean capabilities have  \u003cspan class=\"nv\"\u003eno\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e...  part.   They  are\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              omitted \u003cspan class=\"o\"\u003e(\u003c/span\u003ei.e., \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e by default and become \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e when specified.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              See   the   Select   Graphic  Rendition  \u003cspan class=\"o\"\u003e(\u003c/span\u003eSGR\u003cspan class=\"o\"\u003e)\u003c/span\u003e  section  in  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              documentation of the text terminal that is  used  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  permitted\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              values   and  their  meaning  as  character  attributes.   These\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              substring values are integers in decimal representation and  can\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              be  concatenated with semicolons.  grep takes care of assembling\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              the result into a  \u003cspan class=\"nb\"\u003ecomplete\u003c/span\u003e  SGR  sequence  \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"se\"\u003e\\3\u003c/span\u003e3\u003cspan class=\"o\"\u003e[\u003c/span\u003e...m\u003cspan class=\"o\"\u003e)\u003c/span\u003e.   Common\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              values to concatenate include \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e bold, \u003cspan class=\"m\"\u003e4\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e underline, \u003cspan class=\"m\"\u003e5\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              blink,  \u003cspan class=\"m\"\u003e7\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e inverse, \u003cspan class=\"m\"\u003e39\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e default foreground color, \u003cspan class=\"m\"\u003e30\u003c/span\u003e to \u003cspan class=\"m\"\u003e37\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003efor\u003c/span\u003e foreground colors, \u003cspan class=\"m\"\u003e90\u003c/span\u003e to \u003cspan class=\"m\"\u003e97\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  16-color  mode  foreground\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              colors,  38\u003cspan class=\"p\"\u003e;\u003c/span\u003e5\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e  to  38\u003cspan class=\"p\"\u003e;\u003c/span\u003e5\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e255\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  88-color and 256-color modes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              foreground colors, \u003cspan class=\"m\"\u003e49\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e default background color, \u003cspan class=\"m\"\u003e40\u003c/span\u003e to \u003cspan class=\"m\"\u003e47\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              background colors, \u003cspan class=\"m\"\u003e100\u003c/span\u003e  to  \u003cspan class=\"m\"\u003e107\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  16-color  mode  background\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              colors,  and 48\u003cspan class=\"p\"\u003e;\u003c/span\u003e5\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e to 48\u003cspan class=\"p\"\u003e;\u003c/span\u003e5\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"m\"\u003e255\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e 88-color and 256-color modes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              background colors.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       LC_ALL, LC_COLLATE, LANG\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              These variables specify the locale \u003cspan class=\"k\"\u003efor\u003c/span\u003e the LC_COLLATE  category,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              which  determines the collating sequence used to interpret range\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              expressions like \u003cspan class=\"o\"\u003e[\u003c/span\u003ea-z\u003cspan class=\"o\"\u003e]\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       LC_ALL, LC_CTYPE, LANG\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              These variables specify the locale \u003cspan class=\"k\"\u003efor\u003c/span\u003e  the  LC_CTYPE  category,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              which  determines the \u003cspan class=\"nb\"\u003etype\u003c/span\u003e of characters, e.g., which characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are whitespace.  This category  also  determines  the  character\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              encoding,  that  is, whether text is encoded in UTF-8, ASCII, or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              some other encoding.  In the C or POSIX locale,  all  characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are  encoded  as  a  single  byte  and  every  byte  is  a valid\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              character.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       LC_ALL, LC_MESSAGES, LANG\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              These variables specify the locale \u003cspan class=\"k\"\u003efor\u003c/span\u003e the LC_MESSAGES category,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              which determines the language that grep uses \u003cspan class=\"k\"\u003efor\u003c/span\u003e messages.   The\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              default C locale uses American English messages.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       POSIXLY_CORRECT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              If  set, grep behaves as POSIX requires\u003cspan class=\"p\"\u003e;\u003c/span\u003e otherwise, grep behaves\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              more like other GNU programs.  POSIX requires that options  that\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              follow  file  names  must  be treated as file names\u003cspan class=\"p\"\u003e;\u003c/span\u003e by default,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              such options are permuted to the front of the operand  list  and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              are  treated as options.  Also, POSIX requires that unrecognized\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              options be diagnosed as “illegal”, but since they are not really\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              against the law the default is to diagnose them as “invalid”.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNOTES\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       This man page is maintained only fitfully\u003cspan class=\"p\"\u003e;\u003c/span\u003e the  full  documentation  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       often more up-to-date.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCOPYRIGHT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Copyright 1998-2000, 2002, 2005-2023 Free Software Foundation, Inc.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       This is free software\u003cspan class=\"p\"\u003e;\u003c/span\u003e see the \u003cspan class=\"nb\"\u003esource\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e copying conditions.  There is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       NO  warranty\u003cspan class=\"p\"\u003e;\u003c/span\u003e  not even \u003cspan class=\"k\"\u003efor\u003c/span\u003e MERCHANTABILITY or FITNESS FOR A PARTICULAR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       PURPOSE.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBUGS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Reporting Bugs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Email bug reports to the bug-reporting address ⟨bug-grep@gnu.org⟩.   An\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       email  archive  ⟨https://lists.gnu.org/mailman/listinfo/bug-grep⟩ and a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       bug  tracker   ⟨https://debbugs.gnu.org/cgi/pkgreport.cgi?package\u003cspan class=\"o\"\u003e=\u003c/span\u003egrep⟩\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       are available.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Known Bugs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Large  repetition  counts  in the \u003cspan class=\"o\"\u003e{\u003c/span\u003en,m\u003cspan class=\"o\"\u003e}\u003c/span\u003e construct may cause grep to use\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       lots of memory.  In addition, certain other obscure regular expressions\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       require exponential \u003cspan class=\"nb\"\u003etime\u003c/span\u003e and space, and may cause grep to  run  out  of\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       memory.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Back-references are very slow, and may require exponential time.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eEXAMPLE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The  following  example  outputs  the location and contents of any line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       containing “f” and ending in “.c”, within all files in the current  di‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       rectory whose names contain “g” and end in “.h”.  The -n option outputs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       line  numbers,  the  --  argument treats expansions of “*g*.h” starting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       with “-” as file names not options, and the empty file /dev/null causes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       file names to be output even \u003cspan class=\"k\"\u003eif\u003c/span\u003e only one file name happens to be of the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       form “*g*.h”.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         $ grep -n -- \u003cspan class=\"s1\"\u003e\u0026#39;f.*\\.c$\u0026#39;\u003c/span\u003e *g*.h /dev/null\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e         argmatch.h:1:/* definitions and prototypes \u003cspan class=\"k\"\u003efor\u003c/span\u003e argmatch.c\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The only line that matches is line \u003cspan class=\"m\"\u003e1\u003c/span\u003e of argmatch.h.  Note that the reg‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       ular expression syntax used in the pattern differs  from  the  globbing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       syntax that the shell uses to match file names.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"grep"},{"content":"head \u0026ndash;help Usage: head [OPTION]... [FILE]... Print the first 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -c, --bytes=[-]NUM print the first NUM bytes of each file; with the leading \u0026#39;-\u0026#39;, print all but the last NUM bytes of each file -n, --lines=[-]NUM print the first NUM lines instead of the first 10; with the leading \u0026#39;-\u0026#39;, print all but the last NUM lines of each file -q, --quiet, --silent never print headers giving file names -v, --verbose always print headers giving file names -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit NUM may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y, R, Q. Binary prefixes can be used, too: KiB=K, MiB=M, and so on.\rman head NAME head - output the first part of files SYNOPSIS head [OPTION]... [FILE]... DESCRIPTION Print the first 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -c, --bytes=[-]NUM print the first NUM bytes of each file; with the leading \u0026#39;-\u0026#39;, print all but the last NUM bytes of each file -n, --lines=[-]NUM print the first NUM lines instead of the first 10; with the leading \u0026#39;-\u0026#39;, print all but the last NUM lines of each file -q, --quiet, --silent never print headers giving file names -v, --verbose always print headers giving file names -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit NUM may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y, R, Q. Binary prefixes can be used, too: KiB=K, MiB=M, and so on.\rtail \u0026ndash;help Usage: tail [OPTION]... [FILE]... Print the last 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -c, --bytes=[+]NUM output the last NUM bytes; or use -c +NUM to output starting with byte NUM of each file -f, --follow[={name|descriptor}] output appended data as the file grows; an absent option argument means \u0026#39;descriptor\u0026#39; -F same as --follow=name --retry -n, --lines=[+]NUM output the last NUM lines, instead of the last 10; or use -n +NUM to skip NUM-1 lines at the start --max-unchanged-stats=N with --follow=name, reopen a FILE which has not changed size after N (default 5) iterations to see if it has been unlinked or renamed (this is the usual case of rotated log files); with inotify, this option is rarely useful --pid=PID with -f, terminate after process ID, PID dies -q, --quiet, --silent never output headers giving file names --retry keep trying to open a file if it is inaccessible -s, --sleep-interval=N with -f, sleep for approximately N seconds (default 1.0) between iterations; with inotify and --pid=P, check process P at least once every N seconds -v, --verbose always output headers giving file names -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit NUM may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y, R, Q. Binary prefixes can be used, too: KiB=K, MiB=M, and so on. With --follow (-f), tail defaults to following the file descriptor, which means that even if a tail\u0026#39;ed file is renamed, tail will continue to track its end. This default behavior is not desirable when you really want to track the actual name of the file, not the file descriptor (e.g., log rotation). Use --follow=name in that case. That causes tail to track the named file in a way that accommodates renaming, removal and creation.\rman tail NAME tail - output the last part of files SYNOPSIS tail [OPTION]... [FILE]... DESCRIPTION Print the last 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. -c, --bytes=[+]NUM output the last NUM bytes; or use -c +NUM to output starting with byte NUM of each file -f, --follow[={name|descriptor}] output appended data as the file grows; an absent option argument means \u0026#39;descriptor\u0026#39; -F same as --follow=name --retry -n, --lines=[+]NUM output the last NUM lines, instead of the last 10; or use -n +NUM to skip NUM-1 lines at the start --max-unchanged-stats=N with --follow=name, reopen a FILE which has not changed size after N (default 5) iterations to see if it has been unlinked or renamed (this is the usual case of rotated log files); with inotify, this option is rarely useful --pid=PID with -f, terminate after process ID, PID dies -q, --quiet, --silent never output headers giving file names --retry keep trying to open a file if it is inaccessible -s, --sleep-interval=N with -f, sleep for approximately N seconds (default 1.0) between iterations; with ino‐ tify and --pid=P, check process P at least once every N seconds -v, --verbose always output headers giving file names -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit NUM may have a multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y, R, Q. Binary prefixes can be used, too: KiB=K, MiB=M, and so on. With --follow (-f), tail defaults to following the file descriptor, which means that even if a tail\u0026#39;ed file is renamed, tail will continue to track its end. This default behavior is not desirable when you really want to track the actual name of the file, not the file descriptor (e.g., log rotation). Use --follow=name in that case. That causes tail to track the named file in a way that accommodates renaming, removal and creation.\r","date":"2024-10-22","id":131,"permalink":"/personal-site/docs/bash-linux/command-docs/head-tail/","summary":"\u003ch2 id=\"head---help\"\u003ehead \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: head \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePrint the first \u003cspan class=\"m\"\u003e10\u003c/span\u003e lines of each FILE to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith more than one FILE, precede each with a header giving the file name.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --bytes\u003cspan class=\"o\"\u003e=[\u003c/span\u003e-\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM       print the first NUM bytes of each file\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with the leading \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, print all but the last\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             NUM bytes of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --lines\u003cspan class=\"o\"\u003e=[\u003c/span\u003e-\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM       print the first NUM lines instead of the first 10\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with the leading \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, print all but the last\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             NUM lines of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -q, --quiet, --silent    never print headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --verbose            always print headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -z, --zero-terminated    line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNUM may have a multiplier suffix:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGB 1000*1000*1000, G 1024*1024*1024, and so on \u003cspan class=\"k\"\u003efor\u003c/span\u003e T, P, E, Z, Y, R, Q.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBinary prefixes can be used, too: \u003cspan class=\"nv\"\u003eKiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eK, \u003cspan class=\"nv\"\u003eMiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eM, and so on.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-head\"\u003eman head\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       head - output the first part of files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       head \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Print  the  first \u003cspan class=\"m\"\u003e10\u003c/span\u003e lines of each FILE to standard output.  With more than one FILE, precede\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       each with a header giving the file name.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --bytes\u003cspan class=\"o\"\u003e=[\u003c/span\u003e-\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the first NUM bytes of each file\u003cspan class=\"p\"\u003e;\u003c/span\u003e with the leading \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, print all but  the  last\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              NUM bytes of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n, --lines\u003cspan class=\"o\"\u003e=[\u003c/span\u003e-\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the first NUM lines instead of the first 10\u003cspan class=\"p\"\u003e;\u003c/span\u003e with the leading \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, print all but\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              the last NUM lines of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -q, --quiet, --silent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              never print headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --verbose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              always print headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -z, --zero-terminated\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       NUM  may  have  a  multiplier  suffix:  b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       1000*1000*1000, G 1024*1024*1024, and so on \u003cspan class=\"k\"\u003efor\u003c/span\u003e T, P, E, Z, Y, R, Q.  Binary prefixes can  be\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       used, too: \u003cspan class=\"nv\"\u003eKiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eK, \u003cspan class=\"nv\"\u003eMiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eM, and so on.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"tail---help\"\u003etail \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: tail \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePrint the last \u003cspan class=\"m\"\u003e10\u003c/span\u003e lines of each FILE to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith more than one FILE, precede each with a header giving the file name.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --bytes\u003cspan class=\"o\"\u003e=[\u003c/span\u003e+\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM       output the last NUM bytes\u003cspan class=\"p\"\u003e;\u003c/span\u003e or use -c +NUM to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             output starting with byte NUM of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --follow\u003cspan class=\"o\"\u003e[={\u003c/span\u003ename\u003cspan class=\"p\"\u003e|\u003c/span\u003edescriptor\u003cspan class=\"o\"\u003e}]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           output appended data as the file grows\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             an absent option argument means \u003cspan class=\"s1\"\u003e\u0026#39;descriptor\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -F                       same as --follow\u003cspan class=\"o\"\u003e=\u003c/span\u003ename --retry\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --lines\u003cspan class=\"o\"\u003e=[\u003c/span\u003e+\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM       output the last NUM lines, instead of the last 10\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             or use -n +NUM to skip NUM-1 lines at the start\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --max-unchanged-stats\u003cspan class=\"o\"\u003e=\u003c/span\u003eN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           with --follow\u003cspan class=\"o\"\u003e=\u003c/span\u003ename, reopen a FILE which has not\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             changed size after N \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault 5\u003cspan class=\"o\"\u003e)\u003c/span\u003e iterations\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             to see \u003cspan class=\"k\"\u003eif\u003c/span\u003e it has been unlinked or renamed\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             \u003cspan class=\"o\"\u003e(\u003c/span\u003ethis is the usual \u003cspan class=\"k\"\u003ecase\u003c/span\u003e of rotated log files\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with inotify, this option is rarely useful\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --pid\u003cspan class=\"o\"\u003e=\u003c/span\u003ePID            with -f, terminate after process ID, PID dies\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -q, --quiet, --silent    never output headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --retry              keep trying to open a file \u003cspan class=\"k\"\u003eif\u003c/span\u003e it is inaccessible\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --sleep-interval\u003cspan class=\"o\"\u003e=\u003c/span\u003eN   with -f, sleep \u003cspan class=\"k\"\u003efor\u003c/span\u003e approximately N seconds\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault 1.0\u003cspan class=\"o\"\u003e)\u003c/span\u003e between iterations\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with inotify and --pid\u003cspan class=\"o\"\u003e=\u003c/span\u003eP, check process P at\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             least once every N seconds\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --verbose            always output headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -z, --zero-terminated    line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNUM may have a multiplier suffix:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGB 1000*1000*1000, G 1024*1024*1024, and so on \u003cspan class=\"k\"\u003efor\u003c/span\u003e T, P, E, Z, Y, R, Q.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBinary prefixes can be used, too: \u003cspan class=\"nv\"\u003eKiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eK, \u003cspan class=\"nv\"\u003eMiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eM, and so on.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith --follow \u003cspan class=\"o\"\u003e(\u003c/span\u003e-f\u003cspan class=\"o\"\u003e)\u003c/span\u003e, tail defaults to following the file descriptor, which\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emeans that even \u003cspan class=\"k\"\u003eif\u003c/span\u003e a tail\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003eed file is renamed, tail will \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e to track\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eits end.  This default behavior is not desirable when you really want to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etrack the actual name of the file, not the file descriptor \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., log\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erotation\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  Use --follow\u003cspan class=\"o\"\u003e=\u003c/span\u003ename in that \u003cspan class=\"k\"\u003ecase\u003c/span\u003e.  That causes tail to track the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enamed file in a way that accommodates renaming, removal and creation.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-tail\"\u003eman tail\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       tail - output the last part of files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       tail \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Print  the  last  \u003cspan class=\"m\"\u003e10\u003c/span\u003e lines of each FILE to standard output.  With more than one FILE, precede\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       each with a header giving the file name.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --bytes\u003cspan class=\"o\"\u003e=[\u003c/span\u003e+\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output the last NUM bytes\u003cspan class=\"p\"\u003e;\u003c/span\u003e or use -c +NUM to output starting with  byte  NUM  of  each\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f, --follow\u003cspan class=\"o\"\u003e[={\u003c/span\u003ename\u003cspan class=\"p\"\u003e|\u003c/span\u003edescriptor\u003cspan class=\"o\"\u003e}]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output appended data as the file grows\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              an absent option argument means \u003cspan class=\"s1\"\u003e\u0026#39;descriptor\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -F     same as --follow\u003cspan class=\"o\"\u003e=\u003c/span\u003ename --retry\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n, --lines\u003cspan class=\"o\"\u003e=[\u003c/span\u003e+\u003cspan class=\"o\"\u003e]\u003c/span\u003eNUM\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output  the last NUM lines, instead of the last 10\u003cspan class=\"p\"\u003e;\u003c/span\u003e or use -n +NUM to skip NUM-1 lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              at the start\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --max-unchanged-stats\u003cspan class=\"o\"\u003e=\u003c/span\u003eN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with --follow\u003cspan class=\"o\"\u003e=\u003c/span\u003ename, reopen a FILE which has not\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              changed size after N \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault 5\u003cspan class=\"o\"\u003e)\u003c/span\u003e iterations to see \u003cspan class=\"k\"\u003eif\u003c/span\u003e it has been unlinked or  renamed\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"o\"\u003e(\u003c/span\u003ethis  is  the  usual  \u003cspan class=\"k\"\u003ecase\u003c/span\u003e of rotated log files\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e with inotify, this option is rarely\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              useful\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --pid\u003cspan class=\"o\"\u003e=\u003c/span\u003ePID\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -f, terminate after process ID, PID dies\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -q, --quiet, --silent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              never output headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --retry\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              keep trying to open a file \u003cspan class=\"k\"\u003eif\u003c/span\u003e it is inaccessible\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --sleep-interval\u003cspan class=\"o\"\u003e=\u003c/span\u003eN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -f, sleep \u003cspan class=\"k\"\u003efor\u003c/span\u003e approximately N seconds \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault 1.0\u003cspan class=\"o\"\u003e)\u003c/span\u003e between iterations\u003cspan class=\"p\"\u003e;\u003c/span\u003e with ino‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              tify and --pid\u003cspan class=\"o\"\u003e=\u003c/span\u003eP, check process P at least once every N seconds\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --verbose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              always output headers giving file names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -z, --zero-terminated\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       NUM may have a multiplier suffix: b 512, kB 1000, K  1024,  MB  1000*1000,  M  1024*1024,  GB\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       1000*1000*1000,  G 1024*1024*1024, and so on \u003cspan class=\"k\"\u003efor\u003c/span\u003e T, P, E, Z, Y, R, Q.  Binary prefixes can be\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       used, too: \u003cspan class=\"nv\"\u003eKiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eK, \u003cspan class=\"nv\"\u003eMiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eM, and so on.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With --follow \u003cspan class=\"o\"\u003e(\u003c/span\u003e-f\u003cspan class=\"o\"\u003e)\u003c/span\u003e, tail defaults to following the file descriptor, which means that even  \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       a tail\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003eed file is renamed, tail will \u003cspan class=\"k\"\u003econtinue\u003c/span\u003e to track its end.  This default behavior is not\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       desirable  when you really want to track the actual name of the file, not the file descriptor\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., log rotation\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  Use --follow\u003cspan class=\"o\"\u003e=\u003c/span\u003ename in that \u003cspan class=\"k\"\u003ecase\u003c/span\u003e.  That causes tail to track  the  named\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       file in a way that accommodates renaming, removal and creation.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"head tail"},{"content":"ls \u0026ndash;help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort is specified. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. --author with -l, print the author of each file -b, --escape print C-style escapes for nongraphic characters --block-size=SIZE with -l, scale sizes by SIZE when printing them; e.g., \u0026#39;--block-size=M\u0026#39;; see SIZE format below -B, --ignore-backups do not list implied entries ending with ~ -c with -lt: sort by, and show, ctime (time of last change of file status information); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first -C list entries by columns --color[=WHEN] color the output WHEN; more info below -d, --directory list directories themselves, not their contents -D, --dired generate output designed for Emacs\u0026#39; dired mode -f list all entries in directory order -F, --classify[=WHEN] append indicator (one of */=\u0026gt;@|) to entries WHEN --file-type likewise, except do not append \u0026#39;*\u0026#39; --format=WORD across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C --full-time like -l --time-style=full-iso -g like -l, but do not list owner --group-directories-first group directories before files; can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping -G, --no-group in a long listing, don\u0026#39;t print group names -h, --human-readable with -l and -s, print sizes like 1K 234M 2G etc. --si likewise, but use powers of 1000 not 1024 -H, --dereference-command-line follow symbolic links listed on the command line --dereference-command-line-symlink-to-dir follow each command line symbolic link that points to a directory --hide=PATTERN do not list implied entries matching shell PATTERN (overridden by -a or -A) --hyperlink[=WHEN] hyperlink file names WHEN --indicator-style=WORD append indicator with style WORD to entry names: none (default), slash (-p), file-type (--file-type), classify (-F) -i, --inode print the index number of each file -I, --ignore=PATTERN do not list implied entries matching shell PATTERN -k, --kibibytes default to 1024-byte blocks for file system usage; used only with -s and per directory totals -l use a long listing format -L, --dereference when showing file information for a symbolic link, show information for the file the link references rather than for the link itself -m fill width with a comma separated list of entries -n, --numeric-uid-gid like -l, but list numeric user and group IDs -N, --literal print entry names without quoting -o like -l, but do not list group information -p, --indicator-style=slash append / indicator to directories -q, --hide-control-chars print ? instead of nongraphic characters --show-control-chars show nongraphic characters as-is (the default, unless program is \u0026#39;ls\u0026#39; and output is a terminal) -Q, --quote-name enclose entry names in double quotes --quoting-style=WORD use quoting style WORD for entry names: literal, locale, shell, shell-always, shell-escape, shell-escape-always, c, escape (overrides QUOTING_STYLE environment variable) -r, --reverse reverse order while sorting -R, --recursive list subdirectories recursively -s, --size print the allocated size of each file, in blocks -S sort by file size, largest first --sort=WORD sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X), width --time=WORD select which timestamp used to display or sort; access time (-u): atime, access, use; metadata change time (-c): ctime, status; modified time (default): mtime, modification; birth time: birth, creation; with -l, WORD determines which time to show; with --sort=time, sort by WORD (newest first) --time-style=TIME_STYLE time/date format with -l; see TIME_STYLE below -t sort by time, newest first; see --time -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort by access time, newest first -U do not sort; list entries in directory order -v natural sort of (version) numbers within text -w, --width=COLS set output width to COLS. 0 means no limit -x list entries by lines instead of by columns -X sort alphabetically by entry extension -Z, --context print any security context of each file --zero end each output line with NUL, not newline -1 list one file per line --help display this help and exit --version output version information and exit The SIZE argument is an integer and optional unit (example: 10K is 10*1024). Units are K,M,G,T,P,E,Z,Y,R,Q (powers of 1024) or KB,MB,... (powers of 1000). Binary prefixes can be used, too: KiB=K, MiB=M, and so on. The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT. FORMAT is interpreted like in date(1). If FORMAT is FORMAT1\u0026lt;newline\u0026gt;FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files. TIME_STYLE prefixed with \u0026#39;posix-\u0026#39; takes effect only outside the POSIX locale. Also the TIME_STYLE environment variable sets the default style to use. The WHEN argument defaults to \u0026#39;always\u0026#39; and can also be \u0026#39;auto\u0026#39; or \u0026#39;never\u0026#39;. Using color to distinguish file types is disabled both by default and with --color=never. With --color=auto, ls emits color codes only when standard output is connected to a terminal. The LS_COLORS environment variable can change the settings. Use the dircolors(1) command to set it. Exit status: 0 if OK, 1 if minor problems (e.g., cannot access subdirectory), 2 if serious trouble (e.g., cannot access command-line argument). GNU coreutils online help: \u0026lt;https://www.gnu.org/software/coreutils/\u0026gt; Full documentation \u0026lt;https://www.gnu.org/software/coreutils/ls\u0026gt; or available locally via: info \u0026#39;(coreutils) ls invocation\u0026#39;\rman ls NAME ls - list directory contents SYNOPSIS ls [OPTION]... [FILE]... DESCRIPTION List information about the FILEs (the current directory by default). Sort en‐ tries alphabetically if none of -cftuvSUX nor --sort is specified. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. --author with -l, print the author of each file -b, --escape print C-style escapes for nongraphic characters --block-size=SIZE with -l, scale sizes by SIZE when printing them; e.g., \u0026#39;--block-size=M\u0026#39;; see SIZE format below -B, --ignore-backups do not list implied entries ending with ~ -c with -lt: sort by, and show, ctime (time of last change of file status information); with -l: show ctime and sort by name; otherwise: sort by ctime, newest first -C list entries by columns --color[=WHEN] color the output WHEN; more info below -d, --directory list directories themselves, not their contents -D, --dired generate output designed for Emacs\u0026#39; dired mode -f list all entries in directory order -F, --classify[=WHEN] append indicator (one of */=\u0026gt;@|) to entries WHEN --file-type likewise, except do not append \u0026#39;*\u0026#39; --format=WORD across -x, commas -m, horizontal -x, long -l, single-column -1, verbose -l, vertical -C --full-time like -l --time-style=full-iso -g like -l, but do not list owner --group-directories-first group directories before files; can be augmented with a --sort option, but any use of --sort=none (-U) disables grouping -G, --no-group in a long listing, don\u0026#39;t print group names -h, --human-readable with -l and -s, print sizes like 1K 234M 2G etc. --si likewise, but use powers of 1000 not 1024 -H, --dereference-command-line follow symbolic links listed on the command line --dereference-command-line-symlink-to-dir follow each command line symbolic link that points to a directory --hide=PATTERN do not list implied entries matching shell PATTERN (overridden by -a or -A) --hyperlink[=WHEN] hyperlink file names WHEN --indicator-style=WORD append indicator with style WORD to entry names: none (default), slash (-p), file-type (--file-type), classify (-F) -i, --inode print the index number of each file -I, --ignore=PATTERN do not list implied entries matching shell PATTERN -k, --kibibytes default to 1024-byte blocks for file system usage; used only with -s and per directory totals -l use a long listing format -L, --dereference when showing file information for a symbolic link, show information for the file the link references rather than for the link itself -m fill width with a comma separated list of entries -n, --numeric-uid-gid like -l, but list numeric user and group IDs -N, --literal print entry names without quoting -o like -l, but do not list group information -p, --indicator-style=slash append / indicator to directories -q, --hide-control-chars print ? instead of nongraphic characters --show-control-chars show nongraphic characters as-is (the default, unless program is \u0026#39;ls\u0026#39; and output is a terminal) -Q, --quote-name enclose entry names in double quotes --quoting-style=WORD use quoting style WORD for entry names: literal, locale, shell, shell-al‐ ways, shell-escape, shell-escape-always, c, escape (overrides QUOT‐ ING_STYLE environment variable) -r, --reverse reverse order while sorting -R, --recursive list subdirectories recursively -s, --size print the allocated size of each file, in blocks -S sort by file size, largest first --sort=WORD sort by WORD instead of name: none (-U), size (-S), time (-t), version (-v), extension (-X), width --time=WORD select which timestamp used to display or sort; access time (-u): atime, access, use; metadata change time (-c): ctime, status; modified time (de‐ fault): mtime, modification; birth time: birth, creation; with -l, WORD determines which time to show; with --sort=time, sort by WORD (newest first) --time-style=TIME_STYLE time/date format with -l; see TIME_STYLE below -t sort by time, newest first; see --time -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u with -lt: sort by, and show, access time; with -l: show access time and sort by name; otherwise: sort by access time, newest first -U do not sort; list entries in directory order -v natural sort of (version) numbers within text -w, --width=COLS set output width to COLS. 0 means no limit -x list entries by lines instead of by columns -X sort alphabetically by entry extension -Z, --context print any security context of each file --zero end each output line with NUL, not newline -1 list one file per line --help display this help and exit --version output version information and exit The SIZE argument is an integer and optional unit (example: 10K is 10*1024). Units are K,M,G,T,P,E,Z,Y,R,Q (powers of 1024) or KB,MB,... (powers of 1000). Binary prefixes can be used, too: KiB=K, MiB=M, and so on. The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT. FORMAT is interpreted like in date(1). If FORMAT is FORMAT1\u0026lt;newline\u0026gt;FORMAT2, then FORMAT1 applies to non-recent files and FORMAT2 to recent files. TIME_STYLE prefixed with \u0026#39;posix-\u0026#39; takes effect only outside the POSIX locale. Also the TIME_STYLE environment variable sets the default style to use. The WHEN argument defaults to \u0026#39;always\u0026#39; and can also be \u0026#39;auto\u0026#39; or \u0026#39;never\u0026#39;. Using color to distinguish file types is disabled both by default and with --color=never. With --color=auto, ls emits color codes only when standard out‐ put is connected to a terminal. The LS_COLORS environment variable can change the settings. Use the dircolors(1) command to set it. Exit status: 0 if OK, 1 if minor problems (e.g., cannot access subdirectory), 2 if serious trouble (e.g., cannot access command-line argument). AUTHOR Written by Richard M. Stallman and David MacKenzie. REPORTING BUGS GNU coreutils online help: \u0026lt;https://www.gnu.org/software/coreutils/\u0026gt; Report any translation bugs to \u0026lt;https://translationproject.org/team/\u0026gt; COPYRIGHT Copyright © 2023 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt;. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. SEE ALSO dircolors(1) Full documentation \u0026lt;https://www.gnu.org/software/coreutils/ls\u0026gt; or available locally via: info \u0026#39;(coreutils) ls invocation\u0026#39;\r","date":"2024-10-22","id":132,"permalink":"/personal-site/docs/bash-linux/command-docs/ls-list/","summary":"\u003ch2 id=\"ls---help\"\u003els \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: ls \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eList information about the FILEs \u003cspan class=\"o\"\u003e(\u003c/span\u003ethe current directory by default\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSort entries alphabetically \u003cspan class=\"k\"\u003eif\u003c/span\u003e none of -cftuvSUX nor --sort is specified.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -a, --all                  \u003cspan class=\"k\"\u003edo\u003c/span\u003e not ignore entries starting with .\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -A, --almost-all           \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied . and ..\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --author               with -l, print the author of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -b, --escape               print C-style escapes \u003cspan class=\"k\"\u003efor\u003c/span\u003e nongraphic characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --block-size\u003cspan class=\"o\"\u003e=\u003c/span\u003eSIZE      with -l, scale sizes by SIZE when printing them\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             e.g., \u003cspan class=\"s1\"\u003e\u0026#39;--block-size=M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e see SIZE format below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -B, --ignore-backups       \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied entries ending with ~\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c                         with -lt: sort by, and show, ctime \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etime\u003c/span\u003e of last\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             change of file status information\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with -l: show ctime and sort by name\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             otherwise: sort by ctime, newest first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -C                         list entries by columns\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --color\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e         color the output WHEN\u003cspan class=\"p\"\u003e;\u003c/span\u003e more info below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --directory            list directories themselves, not their contents\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -D, --dired                generate output designed \u003cspan class=\"k\"\u003efor\u003c/span\u003e Emacs\u003cspan class=\"s1\"\u003e\u0026#39; dired mode\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -f                         list all entries in directory order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -F, --classify[=WHEN]      append indicator (one of */=\u0026gt;@|) to entries WHEN\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --file-type            likewise, except do not append \u0026#39;\u003c/span\u003e*\u003cspan class=\"s1\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --format=WORD          across -x, commas -m, horizontal -x, long -l,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                             single-column -1, verbose -l, vertical -C\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --full-time            like -l --time-style=full-iso\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -g                         like -l, but do not list owner\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e      --group-directories-first\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                             group directories before files;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                             can be augmented with a --sort option, but any\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e                             use of --sort=none (-U) disables grouping\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e  -G, --no-group             in a long listing, don\u0026#39;\u003c/span\u003et print group names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -h, --human-readable       with -l and -s, print sizes like 1K 234M 2G etc.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --si                   likewise, but use powers of \u003cspan class=\"m\"\u003e1000\u003c/span\u003e not \u003cspan class=\"m\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -H, --dereference-command-line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             follow symbolic links listed on the \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --dereference-command-line-symlink-to-dir\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             follow each \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line symbolic link\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             that points to a directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --hide\u003cspan class=\"o\"\u003e=\u003c/span\u003ePATTERN         \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied entries matching shell PATTERN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             \u003cspan class=\"o\"\u003e(\u003c/span\u003eoverridden by -a or -A\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --hyperlink\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e     hyperlink file names WHEN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --indicator-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             append indicator with style WORD to entry names:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             none \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e, slash \u003cspan class=\"o\"\u003e(\u003c/span\u003e-p\u003cspan class=\"o\"\u003e)\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             file-type \u003cspan class=\"o\"\u003e(\u003c/span\u003e--file-type\u003cspan class=\"o\"\u003e)\u003c/span\u003e, classify \u003cspan class=\"o\"\u003e(\u003c/span\u003e-F\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -i, --inode                print the index number of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -I, --ignore\u003cspan class=\"o\"\u003e=\u003c/span\u003ePATTERN       \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied entries matching shell PATTERN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -k, --kibibytes            default to 1024-byte blocks \u003cspan class=\"k\"\u003efor\u003c/span\u003e file system usage\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             used only with -s and per directory totals\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -l                         use a long listing format\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -L, --dereference          when showing file information \u003cspan class=\"k\"\u003efor\u003c/span\u003e a symbolic\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             link, show information \u003cspan class=\"k\"\u003efor\u003c/span\u003e the file the link\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             references rather than \u003cspan class=\"k\"\u003efor\u003c/span\u003e the link itself\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m                         fill width with a comma separated list of entries\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -N, --literal              print entry names without quoting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -o                         like -l, but \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list group information\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -p, --indicator-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eslash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             append / indicator to directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -q, --hide-control-chars   print ? instead of nongraphic characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --show-control-chars   show nongraphic characters as-is \u003cspan class=\"o\"\u003e(\u003c/span\u003ethe default,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             unless program is \u003cspan class=\"s1\"\u003e\u0026#39;ls\u0026#39;\u003c/span\u003e and output is a terminal\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -Q, --quote-name           enclose entry names in double quotes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --quoting-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD   use quoting style WORD \u003cspan class=\"k\"\u003efor\u003c/span\u003e entry names:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             literal, locale, shell, shell-always,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             shell-escape, shell-escape-always, c, escape\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             \u003cspan class=\"o\"\u003e(\u003c/span\u003eoverrides QUOTING_STYLE environment variable\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -r, --reverse              reverse order \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e sorting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -R, --recursive            list subdirectories recursively\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --size                 print the allocated size of each file, in blocks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -S                         sort by file size, largest first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --sort\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD            sort by WORD instead of name: none \u003cspan class=\"o\"\u003e(\u003c/span\u003e-U\u003cspan class=\"o\"\u003e)\u003c/span\u003e, size \u003cspan class=\"o\"\u003e(\u003c/span\u003e-S\u003cspan class=\"o\"\u003e)\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e-t\u003cspan class=\"o\"\u003e)\u003c/span\u003e, version \u003cspan class=\"o\"\u003e(\u003c/span\u003e-v\u003cspan class=\"o\"\u003e)\u003c/span\u003e, extension \u003cspan class=\"o\"\u003e(\u003c/span\u003e-X\u003cspan class=\"o\"\u003e)\u003c/span\u003e, width\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --time\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD            \u003cspan class=\"k\"\u003eselect\u003c/span\u003e which timestamp used to display or sort\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               access \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e-u\u003cspan class=\"o\"\u003e)\u003c/span\u003e: atime, access, use\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               metadata change \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e-c\u003cspan class=\"o\"\u003e)\u003c/span\u003e: ctime, status\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               modified \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e: mtime, modification\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                               birth time: birth, creation\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with -l, WORD determines which \u003cspan class=\"nb\"\u003etime\u003c/span\u003e to show\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with --sort\u003cspan class=\"o\"\u003e=\u003c/span\u003etime, sort by WORD \u003cspan class=\"o\"\u003e(\u003c/span\u003enewest first\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --time-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eTIME_STYLE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             time/date format with -l\u003cspan class=\"p\"\u003e;\u003c/span\u003e see TIME_STYLE below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -t                         sort by time, newest first\u003cspan class=\"p\"\u003e;\u003c/span\u003e see --time\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -T, --tabsize\u003cspan class=\"o\"\u003e=\u003c/span\u003eCOLS         assume tab stops at each COLS instead of \u003cspan class=\"m\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -u                         with -lt: sort by, and show, access time\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             with -l: show access \u003cspan class=\"nb\"\u003etime\u003c/span\u003e and sort by name\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                             otherwise: sort by access time, newest first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -U                         \u003cspan class=\"k\"\u003edo\u003c/span\u003e not sort\u003cspan class=\"p\"\u003e;\u003c/span\u003e list entries in directory order\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v                         natural sort of \u003cspan class=\"o\"\u003e(\u003c/span\u003eversion\u003cspan class=\"o\"\u003e)\u003c/span\u003e numbers within text\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -w, --width\u003cspan class=\"o\"\u003e=\u003c/span\u003eCOLS           \u003cspan class=\"nb\"\u003eset\u003c/span\u003e output width to COLS.  \u003cspan class=\"m\"\u003e0\u003c/span\u003e means no limit\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -x                         list entries by lines instead of by columns\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -X                         sort alphabetically by entry extension\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -Z, --context              print any security context of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --zero                 end each output line with NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -1                         list one file per line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe SIZE argument is an integer and optional unit \u003cspan class=\"o\"\u003e(\u003c/span\u003eexample: 10K is 10*1024\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUnits are K,M,G,T,P,E,Z,Y,R,Q \u003cspan class=\"o\"\u003e(\u003c/span\u003epowers of 1024\u003cspan class=\"o\"\u003e)\u003c/span\u003e or KB,MB,... \u003cspan class=\"o\"\u003e(\u003c/span\u003epowers of 1000\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBinary prefixes can be used, too: \u003cspan class=\"nv\"\u003eKiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eK, \u003cspan class=\"nv\"\u003eMiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eM, and so on.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFORMAT is interpreted like in date\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  If FORMAT is FORMAT1\u0026lt;newline\u0026gt;FORMAT2,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ethen\u003c/span\u003e FORMAT1 applies to non-recent files and FORMAT2 to recent files.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTIME_STYLE prefixed with \u003cspan class=\"s1\"\u003e\u0026#39;posix-\u0026#39;\u003c/span\u003e takes effect only outside the POSIX locale.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eAlso the TIME_STYLE environment variable sets the default style to use.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe WHEN argument defaults to \u003cspan class=\"s1\"\u003e\u0026#39;always\u0026#39;\u003c/span\u003e and can also be \u003cspan class=\"s1\"\u003e\u0026#39;auto\u0026#39;\u003c/span\u003e or \u003cspan class=\"s1\"\u003e\u0026#39;never\u0026#39;\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsing color to distinguish file types is disabled both by default and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewith --color\u003cspan class=\"o\"\u003e=\u003c/span\u003enever.  With --color\u003cspan class=\"o\"\u003e=\u003c/span\u003eauto, ls emits color codes only when\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003estandard output is connected to a terminal.  The LS_COLORS environment\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evariable can change the settings.  Use the dircolors\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e to \u003cspan class=\"nb\"\u003eset\u003c/span\u003e it.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eExit status:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e OK,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e minor problems \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., cannot access subdirectory\u003cspan class=\"o\"\u003e)\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e serious trouble \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., cannot access command-line argument\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eGNU coreutils online help: \u0026lt;https://www.gnu.org/software/coreutils/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFull documentation \u0026lt;https://www.gnu.org/software/coreutils/ls\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eor available locally via: info \u003cspan class=\"s1\"\u003e\u0026#39;(coreutils) ls invocation\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-ls\"\u003eman ls\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       ls - list directory contents\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       ls \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       List  information  about the FILEs \u003cspan class=\"o\"\u003e(\u003c/span\u003ethe current directory by default\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  Sort en‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       tries alphabetically \u003cspan class=\"k\"\u003eif\u003c/span\u003e none of -cftuvSUX nor --sort is specified.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -a, --all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not ignore entries starting with .\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -A, --almost-all\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied . and ..\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --author\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -l, print the author of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -b, --escape\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print C-style escapes \u003cspan class=\"k\"\u003efor\u003c/span\u003e nongraphic characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --block-size\u003cspan class=\"o\"\u003e=\u003c/span\u003eSIZE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -l, scale sizes by SIZE when printing them\u003cspan class=\"p\"\u003e;\u003c/span\u003e e.g.,  \u003cspan class=\"s1\"\u003e\u0026#39;--block-size=M\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              see SIZE format below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -B, --ignore-backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied entries ending with ~\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c     with  -lt:  sort  by, and show, ctime \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etime\u003c/span\u003e of last change of file status\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              information\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e with -l: show ctime and sort by name\u003cspan class=\"p\"\u003e;\u003c/span\u003e  otherwise:  sort  by\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ctime, newest first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -C     list entries by columns\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --color\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              color the output WHEN\u003cspan class=\"p\"\u003e;\u003c/span\u003e more info below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -d, --directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              list directories themselves, not their contents\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -D, --dired\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              generate output designed \u003cspan class=\"k\"\u003efor\u003c/span\u003e Emacs\u003cspan class=\"s1\"\u003e\u0026#39; dired mode\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -f     list all entries in directory order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -F, --classify[=WHEN]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              append indicator (one of */=\u0026gt;@|) to entries WHEN\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --file-type\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              likewise, except do not append \u0026#39;\u003c/span\u003e*\u003cspan class=\"s1\"\u003e\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --format=WORD\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              across  -x,  commas -m, horizontal -x, long -l, single-column -1, verbose\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              -l, vertical -C\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --full-time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              like -l --time-style=full-iso\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -g     like -l, but do not list owner\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       --group-directories-first\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              group directories before files; can be augmented with  a  --sort  option,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              but any use of --sort=none (-U) disables grouping\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       -G, --no-group\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e              in a long listing, don\u0026#39;\u003c/span\u003et print group names\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -h, --human-readable\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -l and -s, print sizes like 1K 234M 2G etc.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --si   likewise, but use powers of \u003cspan class=\"m\"\u003e1000\u003c/span\u003e not \u003cspan class=\"m\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -H, --dereference-command-line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              follow symbolic links listed on the \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --dereference-command-line-symlink-to-dir\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              follow each \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line symbolic link that points to a directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --hide\u003cspan class=\"o\"\u003e=\u003c/span\u003ePATTERN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e  not  list implied entries matching shell PATTERN \u003cspan class=\"o\"\u003e(\u003c/span\u003eoverridden by -a or -A\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --hyperlink\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              hyperlink file names WHEN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --indicator-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              append indicator with style WORD to entry names:  none  \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e,  slash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"o\"\u003e(\u003c/span\u003e-p\u003cspan class=\"o\"\u003e)\u003c/span\u003e, file-type \u003cspan class=\"o\"\u003e(\u003c/span\u003e--file-type\u003cspan class=\"o\"\u003e)\u003c/span\u003e, classify \u003cspan class=\"o\"\u003e(\u003c/span\u003e-F\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -i, --inode\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the index number of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -I, --ignore\u003cspan class=\"o\"\u003e=\u003c/span\u003ePATTERN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list implied entries matching shell PATTERN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -k, --kibibytes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              default  to 1024-byte blocks \u003cspan class=\"k\"\u003efor\u003c/span\u003e file system usage\u003cspan class=\"p\"\u003e;\u003c/span\u003e used only with -s and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              per directory totals\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -l     use a long listing format\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -L, --dereference\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              when showing file information \u003cspan class=\"k\"\u003efor\u003c/span\u003e a symbolic link, show  information  \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              the file the link references rather than \u003cspan class=\"k\"\u003efor\u003c/span\u003e the link itself\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -m     fill width with a comma separated list of entries\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n, --numeric-uid-gid\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              like -l, but list numeric user and group IDs\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -N, --literal\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print entry names without quoting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -o     like -l, but \u003cspan class=\"k\"\u003edo\u003c/span\u003e not list group information\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -p, --indicator-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eslash\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              append / indicator to directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -q, --hide-control-chars\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print ? instead of nongraphic characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --show-control-chars\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              show nongraphic characters as-is \u003cspan class=\"o\"\u003e(\u003c/span\u003ethe default, unless program is \u003cspan class=\"s1\"\u003e\u0026#39;ls\u0026#39;\u003c/span\u003e and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output is a terminal\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -Q, --quote-name\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              enclose entry names in double quotes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --quoting-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use quoting style WORD \u003cspan class=\"k\"\u003efor\u003c/span\u003e entry names: literal, locale, shell, shell-al‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ways,  shell-escape,  shell-escape-always,  c,  escape  \u003cspan class=\"o\"\u003e(\u003c/span\u003eoverrides  QUOT‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ING_STYLE environment variable\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -r, --reverse\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              reverse order \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e sorting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -R, --recursive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              list subdirectories recursively\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --size\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the allocated size of each file, in blocks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -S     sort by file size, largest first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --sort\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              sort by WORD instead of name: none \u003cspan class=\"o\"\u003e(\u003c/span\u003e-U\u003cspan class=\"o\"\u003e)\u003c/span\u003e, size \u003cspan class=\"o\"\u003e(\u003c/span\u003e-S\u003cspan class=\"o\"\u003e)\u003c/span\u003e,  \u003cspan class=\"nb\"\u003etime\u003c/span\u003e  \u003cspan class=\"o\"\u003e(\u003c/span\u003e-t\u003cspan class=\"o\"\u003e)\u003c/span\u003e,  version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"o\"\u003e(\u003c/span\u003e-v\u003cspan class=\"o\"\u003e)\u003c/span\u003e, extension \u003cspan class=\"o\"\u003e(\u003c/span\u003e-X\u003cspan class=\"o\"\u003e)\u003c/span\u003e, width\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --time\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003eselect\u003c/span\u003e  which timestamp used to display or sort\u003cspan class=\"p\"\u003e;\u003c/span\u003e access \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e-u\u003cspan class=\"o\"\u003e)\u003c/span\u003e: atime,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              access, use\u003cspan class=\"p\"\u003e;\u003c/span\u003e metadata change \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e-c\u003cspan class=\"o\"\u003e)\u003c/span\u003e: ctime, status\u003cspan class=\"p\"\u003e;\u003c/span\u003e modified \u003cspan class=\"nb\"\u003etime\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003ede‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              fault\u003cspan class=\"o\"\u003e)\u003c/span\u003e: mtime, modification\u003cspan class=\"p\"\u003e;\u003c/span\u003e birth time: birth, creation\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -l, WORD determines which \u003cspan class=\"nb\"\u003etime\u003c/span\u003e to show\u003cspan class=\"p\"\u003e;\u003c/span\u003e with  --sort\u003cspan class=\"o\"\u003e=\u003c/span\u003etime,  sort  by\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              WORD \u003cspan class=\"o\"\u003e(\u003c/span\u003enewest first\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --time-style\u003cspan class=\"o\"\u003e=\u003c/span\u003eTIME_STYLE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              time/date format with -l\u003cspan class=\"p\"\u003e;\u003c/span\u003e see TIME_STYLE below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -t     sort by time, newest first\u003cspan class=\"p\"\u003e;\u003c/span\u003e see --time\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -T, --tabsize\u003cspan class=\"o\"\u003e=\u003c/span\u003eCOLS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              assume tab stops at each COLS instead of \u003cspan class=\"m\"\u003e8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -u     with  -lt:  sort by, and show, access time\u003cspan class=\"p\"\u003e;\u003c/span\u003e with -l: show access \u003cspan class=\"nb\"\u003etime\u003c/span\u003e and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              sort by name\u003cspan class=\"p\"\u003e;\u003c/span\u003e otherwise: sort by access time, newest first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -U     \u003cspan class=\"k\"\u003edo\u003c/span\u003e not sort\u003cspan class=\"p\"\u003e;\u003c/span\u003e list entries in directory order\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v     natural sort of \u003cspan class=\"o\"\u003e(\u003c/span\u003eversion\u003cspan class=\"o\"\u003e)\u003c/span\u003e numbers within text\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -w, --width\u003cspan class=\"o\"\u003e=\u003c/span\u003eCOLS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003eset\u003c/span\u003e output width to COLS.  \u003cspan class=\"m\"\u003e0\u003c/span\u003e means no limit\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -x     list entries by lines instead of by columns\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -X     sort alphabetically by entry extension\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -Z, --context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print any security context of each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --zero end each output line with NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -1     list one file per line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The SIZE argument is an integer and optional unit  \u003cspan class=\"o\"\u003e(\u003c/span\u003eexample:  10K  is  10*1024\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Units  are  K,M,G,T,P,E,Z,Y,R,Q  \u003cspan class=\"o\"\u003e(\u003c/span\u003epowers of 1024\u003cspan class=\"o\"\u003e)\u003c/span\u003e or KB,MB,... \u003cspan class=\"o\"\u003e(\u003c/span\u003epowers of 1000\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Binary prefixes can be used, too: \u003cspan class=\"nv\"\u003eKiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eK, \u003cspan class=\"nv\"\u003eMiB\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eM, and so on.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The TIME_STYLE argument can be full-iso,  long-iso,  iso,  locale,  or  +FORMAT.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       FORMAT  is  interpreted  like in date\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e.  If FORMAT is FORMAT1\u0026lt;newline\u0026gt;FORMAT2,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"k\"\u003ethen\u003c/span\u003e  FORMAT1  applies  to  non-recent  files  and  FORMAT2  to  recent   files.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       TIME_STYLE  prefixed  with  \u003cspan class=\"s1\"\u003e\u0026#39;posix-\u0026#39;\u003c/span\u003e takes effect only outside the POSIX locale.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Also the TIME_STYLE environment variable sets the default style to use.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The WHEN argument defaults to \u003cspan class=\"s1\"\u003e\u0026#39;always\u0026#39;\u003c/span\u003e and can also be \u003cspan class=\"s1\"\u003e\u0026#39;auto\u0026#39;\u003c/span\u003e or \u003cspan class=\"s1\"\u003e\u0026#39;never\u0026#39;\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Using color to distinguish file types is  disabled  both  by  default  and  with\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --color\u003cspan class=\"o\"\u003e=\u003c/span\u003enever.   With --color\u003cspan class=\"o\"\u003e=\u003c/span\u003eauto, ls emits color codes only when standard out‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       put is connected to a terminal.  The LS_COLORS environment variable  can  change\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       the settings.  Use the dircolors\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e to \u003cspan class=\"nb\"\u003eset\u003c/span\u003e it.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   Exit status:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"m\"\u003e0\u003c/span\u003e      \u003cspan class=\"k\"\u003eif\u003c/span\u003e OK,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"m\"\u003e1\u003c/span\u003e      \u003cspan class=\"k\"\u003eif\u003c/span\u003e minor problems \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., cannot access subdirectory\u003cspan class=\"o\"\u003e)\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"m\"\u003e2\u003c/span\u003e      \u003cspan class=\"k\"\u003eif\u003c/span\u003e serious trouble \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., cannot access command-line argument\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eAUTHOR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Written by Richard M. Stallman and David MacKenzie.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eREPORTING BUGS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       GNU coreutils online help: \u0026lt;https://www.gnu.org/software/coreutils/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Report any translation bugs to \u0026lt;https://translationproject.org/team/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCOPYRIGHT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Copyright © \u003cspan class=\"m\"\u003e2023\u003c/span\u003e Free Software Foundation, Inc.  License GPLv3+: GNU GPL version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"m\"\u003e3\u003c/span\u003e or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       This  is free software: you are free to change and redistribute it.  There is NO\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       WARRANTY, to the extent permitted by law.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSEE ALSO\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       dircolors\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Full documentation \u0026lt;https://www.gnu.org/software/coreutils/ls\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       or available locally via: info \u003cspan class=\"s1\"\u003e\u0026#39;(coreutils) ls invocation\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"ls - List"},{"content":"mkdir \u0026ndash;help Usage: mkdir [OPTION]... DIRECTORY... Create the DIRECTORY(ies), if they do not already exist. Mandatory arguments to long options are mandatory for short options too. -m, --mode=MODE set file mode (as in chmod), not a=rwx - umask -p, --parents no error if existing, make parent directories as needed, with their file modes unaffected by any -m option. -v, --verbose print a message for each created directory -Z set SELinux security context of each created directory to the default type --context[=CTX] like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX --help display this help and exit --version output version information and exit\rman mkdir NAME mkdir - make directories SYNOPSIS mkdir [OPTION]... DIRECTORY... DESCRIPTION Create the DIRECTORY(ies), if they do not already exist. Mandatory arguments to long options are mandatory for short options too. -m, --mode=MODE set file mode (as in chmod), not a=rwx - umask -p, --parents no error if existing, make parent directories as needed, with their file modes unaffected by any -m option. -v, --verbose print a message for each created directory -Z set SELinux security context of each created directory to the default type --context[=CTX] like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX --help display this help and exit --version output version information and exit\r","date":"2024-10-22","id":133,"permalink":"/personal-site/docs/bash-linux/command-docs/mkdir/","summary":"\u003ch2 id=\"mkdir---help\"\u003emkdir \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: mkdir \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... DIRECTORY...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eCreate the DIRECTORY\u003cspan class=\"o\"\u003e(\u003c/span\u003eies\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003eif\u003c/span\u003e they \u003cspan class=\"k\"\u003edo\u003c/span\u003e not already exist.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m, --mode\u003cspan class=\"o\"\u003e=\u003c/span\u003eMODE   \u003cspan class=\"nb\"\u003eset\u003c/span\u003e file mode \u003cspan class=\"o\"\u003e(\u003c/span\u003eas in chmod\u003cspan class=\"o\"\u003e)\u003c/span\u003e, not \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003erwx - \u003cspan class=\"nb\"\u003eumask\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -p, --parents     no error \u003cspan class=\"k\"\u003eif\u003c/span\u003e existing, make parent directories as needed,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    with their file modes unaffected by any -m option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --verbose     print a message \u003cspan class=\"k\"\u003efor\u003c/span\u003e each created directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -Z                   \u003cspan class=\"nb\"\u003eset\u003c/span\u003e SELinux security context of each created directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                         to the default \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --context\u003cspan class=\"o\"\u003e[=\u003c/span\u003eCTX\u003cspan class=\"o\"\u003e]\u003c/span\u003e  like -Z, or \u003cspan class=\"k\"\u003eif\u003c/span\u003e CTX is specified \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e the SELinux\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                         or SMACK security context to CTX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and exit\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-mkdir\"\u003eman mkdir\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mkdir - make directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mkdir \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... DIRECTORY...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Create the DIRECTORY\u003cspan class=\"o\"\u003e(\u003c/span\u003eies\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003eif\u003c/span\u003e they \u003cspan class=\"k\"\u003edo\u003c/span\u003e not already exist.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -m, --mode\u003cspan class=\"o\"\u003e=\u003c/span\u003eMODE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003eset\u003c/span\u003e file mode \u003cspan class=\"o\"\u003e(\u003c/span\u003eas in chmod\u003cspan class=\"o\"\u003e)\u003c/span\u003e, not \u003cspan class=\"nv\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003erwx - \u003cspan class=\"nb\"\u003eumask\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -p, --parents\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              no  error \u003cspan class=\"k\"\u003eif\u003c/span\u003e existing, make parent directories as needed, with their file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              modes unaffected by any -m option.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --verbose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print a message \u003cspan class=\"k\"\u003efor\u003c/span\u003e each created directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -Z     \u003cspan class=\"nb\"\u003eset\u003c/span\u003e SELinux security context of each created  directory  to  the  default\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --context\u003cspan class=\"o\"\u003e[=\u003c/span\u003eCTX\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              like  -Z,  or  \u003cspan class=\"k\"\u003eif\u003c/span\u003e CTX is specified \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e the SELinux or SMACK security\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              context to CTX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and exit\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"mkdir"},{"content":"mv \u0026ndash;help Usage: mv [OPTION]... [-T] SOURCE DEST or: mv [OPTION]... SOURCE... DIRECTORY or: mv [OPTION]... -t DIRECTORY SOURCE... Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY. Mandatory arguments to long options are mandatory for short options too. --backup[=CONTROL] make a backup of each existing destination file -b like --backup but does not accept an argument --debug explain how a file is copied. Implies -v -f, --force do not prompt before overwriting -i, --interactive prompt before overwrite -n, --no-clobber do not overwrite an existing file If you specify more than one of -i, -f, -n, only the final one takes effect. --no-copy do not copy if renaming fails --strip-trailing-slashes remove any trailing slashes from each SOURCE argument -S, --suffix=SUFFIX override the usual backup suffix -t, --target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY -T, --no-target-directory treat DEST as a normal file --update[=UPDATE] control which existing files are updated; UPDATE={all,none,older(default)}. See below -u equivalent to --update[=older] -v, --verbose explain what is being done -Z, --context set SELinux security context of destination file to default type --help display this help and exit --version output version information and exit UPDATE controls which existing files in the destination are replaced. \u0026#39;all\u0026#39; is the default operation when an --update option is not specified, and results in all existing files in the destination being replaced. \u0026#39;none\u0026#39; is similar to the --no-clobber option, in that no files in the destination are replaced, but also skipped files do not induce a failure. \u0026#39;older\u0026#39; is the default operation when --update is specified, and results in files being replaced if they\u0026#39;re older than the corresponding source file. The backup suffix is \u0026#39;~\u0026#39;, unless set with --suffix or SIMPLE_BACKUP_SUFFIX. The version control method may be selected via the --backup option or through the VERSION_CONTROL environment variable. Here are the values: none, off never make backups (even if --backup is given) numbered, t make numbered backups existing, nil numbered if numbered backups exist, simple otherwise simple, never always make simple backups\rman mv NAME mv - move (rename) files SYNOPSIS mv [OPTION]... [-T] SOURCE DEST mv [OPTION]... SOURCE... DIRECTORY mv [OPTION]... -t DIRECTORY SOURCE... DESCRIPTION Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY. Mandatory arguments to long options are mandatory for short options too. --backup[=CONTROL] make a backup of each existing destination file -b like --backup but does not accept an argument --debug explain how a file is copied. Implies -v -f, --force do not prompt before overwriting -i, --interactive prompt before overwrite -n, --no-clobber do not overwrite an existing file If you specify more than one of -i, -f, -n, only the final one takes effect. --no-copy do not copy if renaming fails --strip-trailing-slashes remove any trailing slashes from each SOURCE argument -S, --suffix=SUFFIX override the usual backup suffix -t, --target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY -T, --no-target-directory treat DEST as a normal file --update[=UPDATE] control which existing files are updated; UPDATE={all,none,older(de‐ fault)}. See below -u equivalent to --update[=older] -v, --verbose explain what is being done -Z, --context set SELinux security context of destination file to default type --help display this help and exit --version output version information and exit UPDATE controls which existing files in the destination are replaced. \u0026#39;all\u0026#39; is the default operation when an --update option is not specified, and results in all existing files in the destination being replaced. \u0026#39;none\u0026#39; is similar to the --no-clobber option, in that no files in the destination are replaced, but also skipped files do not induce a failure. \u0026#39;older\u0026#39; is the default operation when --update is specified, and results in files being replaced if they\u0026#39;re older than the corresponding source file. The backup suffix is \u0026#39;~\u0026#39;, unless set with --suffix or SIMPLE_BACKUP_SUFFIX. The version control method may be selected via the --backup option or through the VERSION_CONTROL environment variable. Here are the values: none, off never make backups (even if --backup is given) numbered, t make numbered backups existing, nil numbered if numbered backups exist, simple otherwise simple, never always make simple backups\r","date":"2024-10-22","id":134,"permalink":"/personal-site/docs/bash-linux/command-docs/mv-move/","summary":"\u003ch2 id=\"mv---help\"\u003emv \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: mv \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003e-T\u003cspan class=\"o\"\u003e]\u003c/span\u003e SOURCE DEST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  or:  mv \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... SOURCE... DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  or:  mv \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... -t DIRECTORY SOURCE...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRename SOURCE to DEST, or move SOURCE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to DIRECTORY.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --backup\u003cspan class=\"o\"\u003e[=\u003c/span\u003eCONTROL\u003cspan class=\"o\"\u003e]\u003c/span\u003e       make a backup of each existing destination file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -b                           like --backup but does not accept an argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --debug                  explain how a file is copied.  Implies -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --force                  \u003cspan class=\"k\"\u003edo\u003c/span\u003e not prompt before overwriting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -i, --interactive            prompt before overwrite\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --no-clobber             \u003cspan class=\"k\"\u003edo\u003c/span\u003e not overwrite an existing file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eIf you specify more than one of -i, -f, -n, only the final one takes effect.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --no-copy                \u003cspan class=\"k\"\u003edo\u003c/span\u003e not copy \u003cspan class=\"k\"\u003eif\u003c/span\u003e renaming fails\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --strip-trailing-slashes  remove any trailing slashes from each SOURCE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -S, --suffix\u003cspan class=\"o\"\u003e=\u003c/span\u003eSUFFIX          override the usual backup suffix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -t, --target-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003eDIRECTORY  move all SOURCE arguments into DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -T, --no-target-directory    treat DEST as a normal file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eUPDATE\u003cspan class=\"o\"\u003e]\u003c/span\u003e            control which existing files are updated\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 \u003cspan class=\"nv\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003eall,none,older\u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)}\u003c/span\u003e.  See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -u                           equivalent to --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eolder\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --verbose                explain what is being \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -Z, --context                \u003cspan class=\"nb\"\u003eset\u003c/span\u003e SELinux security context of destination\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 file to default \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUPDATE controls which existing files in the destination are replaced.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e is the default operation when an --update option is not specified,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eand results in all existing files in the destination being replaced.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;none\u0026#39;\u003c/span\u003e is similar to the --no-clobber option, in that no files in the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edestination are replaced, but also skipped files \u003cspan class=\"k\"\u003edo\u003c/span\u003e not induce a failure.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\u0026#39;older\u0026#39;\u003c/span\u003e is the default operation when --update is specified, and results\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ein files being replaced \u003cspan class=\"k\"\u003eif\u003c/span\u003e they\u003cspan class=\"s1\"\u003e\u0026#39;re older than the corresponding source file.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003eThe backup suffix is \u0026#39;\u003c/span\u003e~\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e, unless \u003cspan class=\"nb\"\u003eset\u003c/span\u003e with --suffix or SIMPLE_BACKUP_SUFFIX.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe version control method may be selected via the --backup option or through\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ethe VERSION_CONTROL environment variable.  Here are the values:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  none, off       never make backups \u003cspan class=\"o\"\u003e(\u003c/span\u003eeven \u003cspan class=\"k\"\u003eif\u003c/span\u003e --backup is given\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  numbered, t     make numbered backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  existing, nil   numbered \u003cspan class=\"k\"\u003eif\u003c/span\u003e numbered backups exist, simple otherwise\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  simple, never   always make simple backups\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-mv\"\u003eman mv\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mv - move \u003cspan class=\"o\"\u003e(\u003c/span\u003erename\u003cspan class=\"o\"\u003e)\u003c/span\u003e files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mv \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003e-T\u003cspan class=\"o\"\u003e]\u003c/span\u003e SOURCE DEST\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mv \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... SOURCE... DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       mv \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... -t DIRECTORY SOURCE...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Rename SOURCE to DEST, or move SOURCE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to DIRECTORY.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --backup\u003cspan class=\"o\"\u003e[=\u003c/span\u003eCONTROL\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              make a backup of each existing destination file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -b     like --backup but does not accept an argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --debug\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              explain how a file is copied.  Implies -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f, --force\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not prompt before overwriting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -i, --interactive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              prompt before overwrite\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n, --no-clobber\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not overwrite an existing file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       If you specify more than one of -i, -f, -n, only the final one takes effect.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --no-copy\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not copy \u003cspan class=\"k\"\u003eif\u003c/span\u003e renaming fails\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --strip-trailing-slashes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              remove any trailing slashes from each SOURCE argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -S, --suffix\u003cspan class=\"o\"\u003e=\u003c/span\u003eSUFFIX\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              override the usual backup suffix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -t, --target-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003eDIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              move all SOURCE arguments into DIRECTORY\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -T, --no-target-directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              treat DEST as a normal file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eUPDATE\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              control  which  existing  files  are  updated\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003eUPDATE\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003eall,none,older\u003cspan class=\"o\"\u003e(\u003c/span\u003ede‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              fault\u003cspan class=\"o\"\u003e)}\u003c/span\u003e.  See below\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -u     equivalent to --update\u003cspan class=\"o\"\u003e[=\u003c/span\u003eolder\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --verbose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              explain what is being \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -Z, --context\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003eset\u003c/span\u003e SELinux security context of destination file to default \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       UPDATE controls which existing files in the destination are replaced.  \u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e  is\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       the  default  operation when an --update option is not specified, and results in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       all existing files in the destination being replaced.  \u003cspan class=\"s1\"\u003e\u0026#39;none\u0026#39;\u003c/span\u003e is similar to  the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --no-clobber  option, in that no files in the destination are replaced, but also\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       skipped files \u003cspan class=\"k\"\u003edo\u003c/span\u003e not induce a failure.  \u003cspan class=\"s1\"\u003e\u0026#39;older\u0026#39;\u003c/span\u003e is the  default  operation  when\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --update is specified, and results in files being replaced \u003cspan class=\"k\"\u003eif\u003c/span\u003e they\u003cspan class=\"s1\"\u003e\u0026#39;re older than\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       the corresponding source file.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s1\"\u003e       The backup suffix is \u0026#39;\u003c/span\u003e~\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003e, unless \u003cspan class=\"nb\"\u003eset\u003c/span\u003e with --suffix or SIMPLE_BACKUP_SUFFIX.  The\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       version  control  method  may be selected via the --backup option or through the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       VERSION_CONTROL environment variable.  Here are the values:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       none, off\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              never make backups \u003cspan class=\"o\"\u003e(\u003c/span\u003eeven \u003cspan class=\"k\"\u003eif\u003c/span\u003e --backup is given\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       numbered, t\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              make numbered backups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       existing, nil\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              numbered \u003cspan class=\"k\"\u003eif\u003c/span\u003e numbered backups exist, simple otherwise\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       simple, never\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              always make simple backups\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"mv - Move"},{"content":"pwd \u0026ndash;help pwd: pwd [-LP] Print the name of the current working directory. Options: -L\tprint the value of $PWD if it names the current working directory -P\tprint the physical directory, without any symbolic links By default, `pwd\u0026#39; behaves as if `-L\u0026#39; were specified. Exit Status: Returns 0 unless an invalid option is given or the current directory cannot be read.\rman pwd NAME pwd - print name of current/working directory SYNOPSIS pwd [OPTION]... DESCRIPTION Print the full filename of the current working directory. -L, --logical use PWD from environment, even if it contains symlinks -P, --physical avoid all symlinks --help display this help and exit --version output version information and exit If no option is specified, -P is assumed.\r","date":"2024-10-22","id":135,"permalink":"/personal-site/docs/bash-linux/command-docs/pwd/","summary":"\u003ch2 id=\"pwd---help\"\u003epwd \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epwd: \u003cspan class=\"nb\"\u003epwd\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e-LP\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Print the name of the current working directory.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Options:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      -L\tprint the value of \u003cspan class=\"nv\"\u003e$PWD\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e it names the current working\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \t\tdirectory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      -P\tprint the physical directory, without any symbolic links\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    By default, \u003cspan class=\"sb\"\u003e`\u003c/span\u003epwd\u003cspan class=\"s1\"\u003e\u0026#39; behaves as if `-L\u0026#39;\u003c/span\u003e were specified.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Exit Status:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    Returns \u003cspan class=\"m\"\u003e0\u003c/span\u003e unless an invalid option is given or the current directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    cannot be read.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-pwd\"\u003eman pwd\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"nb\"\u003epwd\u003c/span\u003e - print name of current/working directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"nb\"\u003epwd\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Print the full filename of the current working directory.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -L, --logical\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use PWD from environment, even \u003cspan class=\"k\"\u003eif\u003c/span\u003e it contains symlinks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -P, --physical\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              avoid all symlinks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       If no option is specified, -P is assumed.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"pwd"},{"content":"rm \u0026ndash;help Usage: rm [OPTION]... [FILE]... Remove (unlink) the FILE(s). -f, --force ignore nonexistent files and arguments, never prompt -i prompt before every removal -I prompt once before removing more than three files, or when removing recursively; less intrusive than -i, while still giving protection against most mistakes --interactive[=WHEN] prompt according to WHEN: never, once (-I), or always (-i); without WHEN, prompt always --one-file-system when removing a hierarchy recursively, skip any directory that is on a file system different from that of the corresponding command line argument --no-preserve-root do not treat \u0026#39;/\u0026#39; specially --preserve-root[=all] do not remove \u0026#39;/\u0026#39; (default); with \u0026#39;all\u0026#39;, reject any command line argument on a separate device from its parent -r, -R, --recursive remove directories and their contents recursively -d, --dir remove empty directories -v, --verbose explain what is being done --help display this help and exit --version output version information and exit By default, rm does not remove directories. Use the --recursive (-r or -R) option to remove each listed directory, too, along with all of its contents. To remove a file whose name starts with a \u0026#39;-\u0026#39;, for example \u0026#39;-foo\u0026#39;, use one of these commands: rm -- -foo rm ./-foo Note that if you use rm to remove a file, it might be possible to recover some of its contents, given sufficient expertise and/or time. For greater assurance that the contents are truly unrecoverable, consider using shred(1).\rman rm NAME rm - remove files or directories SYNOPSIS rm [OPTION]... [FILE]... DESCRIPTION This manual page documents the GNU version of rm. rm removes each specified file. By default, it does not remove directories. If the -I or --interactive=once option is given, and there are more than three files or the -r, -R, or --recursive are given, then rm prompts the user for whether to proceed with the entire operation. If the response is not affirma‐ tive, the entire command is aborted. Otherwise, if a file is unwritable, standard input is a terminal, and the -f or --force option is not given, or the -i or --interactive=always option is given, rm prompts the user for whether to remove the file. If the response is not af‐ firmative, the file is skipped. OPTIONS Remove (unlink) the FILE(s). -f, --force ignore nonexistent files and arguments, never prompt -i prompt before every removal -I prompt once before removing more than three files, or when removing re‐ cursively; less intrusive than -i, while still giving protection against most mistakes --interactive[=WHEN] prompt according to WHEN: never, once (-I), or always (-i); without WHEN, prompt always --one-file-system when removing a hierarchy recursively, skip any directory that is on a file system different from that of the corresponding command line argu‐ ment --no-preserve-root do not treat \u0026#39;/\u0026#39; specially --preserve-root[=all] do not remove \u0026#39;/\u0026#39; (default); with \u0026#39;all\u0026#39;, reject any command line argument on a separate device from its parent -r, -R, --recursive remove directories and their contents recursively -d, --dir remove empty directories -v, --verbose explain what is being done --help display this help and exit --version output version information and exit By default, rm does not remove directories. Use the --recursive (-r or -R) op‐ tion to remove each listed directory, too, along with all of its contents. To remove a file whose name starts with a \u0026#39;-\u0026#39;, for example \u0026#39;-foo\u0026#39;, use one of these commands: rm -- -foo rm ./-foo Note that if you use rm to remove a file, it might be possible to recover some of its contents, given sufficient expertise and/or time. For greater assurance that the contents are truly unrecoverable, consider using shred(1).\r","date":"2024-10-22","id":136,"permalink":"/personal-site/docs/bash-linux/command-docs/rm-remove/","summary":"\u003ch2 id=\"rm---help\"\u003erm \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: rm \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eRemove \u003cspan class=\"o\"\u003e(\u003c/span\u003eunlink\u003cspan class=\"o\"\u003e)\u003c/span\u003e the FILE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --force           ignore nonexistent files and arguments, never prompt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -i                    prompt before every removal\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -I                    prompt once before removing more than three files, or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          when removing recursively\u003cspan class=\"p\"\u003e;\u003c/span\u003e less intrusive than -i,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e still giving protection against most mistakes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --interactive\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e  prompt according to WHEN: never, once \u003cspan class=\"o\"\u003e(\u003c/span\u003e-I\u003cspan class=\"o\"\u003e)\u003c/span\u003e, or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          always \u003cspan class=\"o\"\u003e(\u003c/span\u003e-i\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e without WHEN, prompt always\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --one-file-system  when removing a hierarchy recursively, skip any\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          directory that is on a file system different from\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          that of the corresponding \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --no-preserve-root  \u003cspan class=\"k\"\u003edo\u003c/span\u003e not treat \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e specially\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --preserve-root\u003cspan class=\"o\"\u003e[=\u003c/span\u003eall\u003cspan class=\"o\"\u003e]\u003c/span\u003e  \u003cspan class=\"k\"\u003edo\u003c/span\u003e not remove \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              with \u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e, reject any \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              on a separate device from its parent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -r, -R, --recursive   remove directories and their contents recursively\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --dir             remove empty directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -v, --verbose         explain what is being \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eBy default, rm does not remove directories.  Use the --recursive \u003cspan class=\"o\"\u003e(\u003c/span\u003e-r or -R\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eoption to remove each listed directory, too, along with all of its contents.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eTo remove a file whose name starts with a \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, \u003cspan class=\"k\"\u003efor\u003c/span\u003e example \u003cspan class=\"s1\"\u003e\u0026#39;-foo\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euse one of these commands:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  rm -- -foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  rm ./-foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNote that \u003cspan class=\"k\"\u003eif\u003c/span\u003e you use rm to remove a file, it might be possible to recover\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esome of its contents, given sufficient expertise and/or time.  For greater\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eassurance that the contents are truly unrecoverable, consider using shred\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch1 id=\"man-rm\"\u003eman rm\u003c/h1\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       rm - remove files or directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       rm \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       This  manual  page  documents  the GNU version of rm.  rm removes each specified\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       file.  By default, it does not remove directories.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       If the -I or --interactive\u003cspan class=\"o\"\u003e=\u003c/span\u003eonce option is given, and there are more  than  three\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       files  or  the  -r,  -R,  or --recursive are given, \u003cspan class=\"k\"\u003ethen\u003c/span\u003e rm prompts the user \u003cspan class=\"k\"\u003efor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       whether to proceed with the entire operation.  If the response is  not  affirma‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       tive, the entire \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e is aborted.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Otherwise,  \u003cspan class=\"k\"\u003eif\u003c/span\u003e a file is unwritable, standard input is a terminal, and the -f or\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --force option is not given, or the -i or --interactive\u003cspan class=\"o\"\u003e=\u003c/span\u003ealways option is  given,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       rm  prompts the user \u003cspan class=\"k\"\u003efor\u003c/span\u003e whether to remove the file.  If the response is not af‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       firmative, the file is skipped.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOPTIONS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Remove \u003cspan class=\"o\"\u003e(\u003c/span\u003eunlink\u003cspan class=\"o\"\u003e)\u003c/span\u003e the FILE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f, --force\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ignore nonexistent files and arguments, never prompt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -i     prompt before every removal\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -I     prompt once before removing more than three files, or when  removing  re‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              cursively\u003cspan class=\"p\"\u003e;\u003c/span\u003e  less intrusive than -i, \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e still giving protection against\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              most mistakes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --interactive\u003cspan class=\"o\"\u003e[=\u003c/span\u003eWHEN\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              prompt according to WHEN: never, once \u003cspan class=\"o\"\u003e(\u003c/span\u003e-I\u003cspan class=\"o\"\u003e)\u003c/span\u003e, or always \u003cspan class=\"o\"\u003e(\u003c/span\u003e-i\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e without WHEN,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              prompt always\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --one-file-system\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              when removing a hierarchy recursively, skip any directory that  is  on  a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              file  system  different from that of the corresponding \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line argu‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ment\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --no-preserve-root\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not treat \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e specially\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --preserve-root\u003cspan class=\"o\"\u003e[=\u003c/span\u003eall\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not remove \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e with \u003cspan class=\"s1\"\u003e\u0026#39;all\u0026#39;\u003c/span\u003e, reject any \u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e line argument\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              on a separate device from its parent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -r, -R, --recursive\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              remove directories and their contents recursively\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -d, --dir\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              remove empty directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -v, --verbose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              explain what is being \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       By default, rm does not remove directories.  Use the --recursive \u003cspan class=\"o\"\u003e(\u003c/span\u003e-r or -R\u003cspan class=\"o\"\u003e)\u003c/span\u003e  op‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       tion to remove each listed directory, too, along with all of its contents.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       To  remove  a  file whose name starts with a \u003cspan class=\"s1\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, \u003cspan class=\"k\"\u003efor\u003c/span\u003e example \u003cspan class=\"s1\"\u003e\u0026#39;-foo\u0026#39;\u003c/span\u003e, use one of\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       these commands:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              rm -- -foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              rm ./-foo\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Note that \u003cspan class=\"k\"\u003eif\u003c/span\u003e you use rm to remove a file, it might be possible to  recover  some\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       of  its contents, given sufficient expertise and/or time.  For greater assurance\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       that the contents are truly unrecoverable, consider using shred\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"rm - Remove"},{"content":"sort \u0026ndash;help Usage: sort [OPTION]... [FILE]... or: sort [OPTION]... --files0-from=F Write sorted concatenation of all FILE(s) to standard output. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. Ordering options: -b, --ignore-leading-blanks ignore leading blanks -d, --dictionary-order consider only blanks and alphanumeric characters -f, --ignore-case fold lower case to upper case characters -g, --general-numeric-sort compare according to general numerical value -i, --ignore-nonprinting consider only printable characters -M, --month-sort compare (unknown) \u0026lt; \u0026#39;JAN\u0026#39; \u0026lt; ... \u0026lt; \u0026#39;DEC\u0026#39; -h, --human-numeric-sort compare human readable numbers (e.g., 2K 1G) -n, --numeric-sort compare according to string numerical value -R, --random-sort shuffle, but group identical keys. See shuf(1) --random-source=FILE get random bytes from FILE -r, --reverse reverse the result of comparisons --sort=WORD sort according to WORD: general-numeric -g, human-numeric -h, month -M, numeric -n, random -R, version -V -V, --version-sort natural sort of (version) numbers within text Other options: --batch-size=NMERGE merge at most NMERGE inputs at once; for more use temp files -c, --check, --check=diagnose-first check for sorted input; do not sort -C, --check=quiet, --check=silent like -c, but do not report first bad line --compress-program=PROG compress temporaries with PROG; decompress them with PROG -d --debug annotate the part of the line used to sort, and warn about questionable usage to stderr --files0-from=F read input from the files specified by NUL-terminated names in file F; If F is - then read names from standard input -k, --key=KEYDEF sort via a key; KEYDEF gives location and type -m, --merge merge already sorted files; do not sort -o, --output=FILE write result to FILE instead of standard output -s, --stable stabilize sort by disabling last-resort comparison -S, --buffer-size=SIZE use SIZE for main memory buffer -t, --field-separator=SEP use SEP instead of non-blank to blank transition -T, --temporary-directory=DIR use DIR for temporaries, not $TMPDIR or /tmp; multiple options specify multiple directories --parallel=N change the number of sorts run concurrently to N -u, --unique with -c, check for strict ordering; without -c, output only the first of an equal run -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and C a character position in the field; both are origin 1, and the stop position defaults to the line\u0026#39;s end. If neither -t nor -b is in effect, characters in a field are counted from the beginning of the preceding whitespace. OPTS is one or more single-letter ordering options [bdfgiMhnRrV], which override global ordering options for that key. If no key is given, use the entire line as the key. Use --debug to diagnose incorrect key usage. SIZE may be followed by the following multiplicative suffixes: % 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y, R, Q. *** WARNING *** The locale specified by the environment affects sort order. Set LC_ALL=C to get the traditional sort order that uses native byte values.\rman sort NAME sort - sort lines of text files SYNOPSIS sort [OPTION]... [FILE]... sort [OPTION]... --files0-from=F DESCRIPTION Write sorted concatenation of all FILE(s) to standard output. With no FILE, or when FILE is -, read standard input. Mandatory arguments to long options are mandatory for short options too. Order‐ ing options: -b, --ignore-leading-blanks ignore leading blanks -d, --dictionary-order consider only blanks and alphanumeric characters -f, --ignore-case fold lower case to upper case characters -g, --general-numeric-sort compare according to general numerical value -i, --ignore-nonprinting consider only printable characters -M, --month-sort compare (unknown) \u0026lt; \u0026#39;JAN\u0026#39; \u0026lt; ... \u0026lt; \u0026#39;DEC\u0026#39; -h, --human-numeric-sort compare human readable numbers (e.g., 2K 1G) -n, --numeric-sort compare according to string numerical value -R, --random-sort shuffle, but group identical keys. See shuf(1) --random-source=FILE get random bytes from FILE -r, --reverse reverse the result of comparisons --sort=WORD sort according to WORD: general-numeric -g, human-numeric -h, month -M, numeric -n, random -R, version -V -V, --version-sort natural sort of (version) numbers within text Other options: --batch-size=NMERGE merge at most NMERGE inputs at once; for more use temp files -c, --check, --check=diagnose-first check for sorted input; do not sort -C, --check=quiet, --check=silent like -c, but do not report first bad line --compress-program=PROG compress temporaries with PROG; decompress them with PROG -d --debug annotate the part of the line used to sort, and warn about questionable usage to stderr --files0-from=F read input from the files specified by NUL-terminated names in file F; If F is - then read names from standard input -k, --key=KEYDEF sort via a key; KEYDEF gives location and type -m, --merge merge already sorted files; do not sort -o, --output=FILE write result to FILE instead of standard output -s, --stable stabilize sort by disabling last-resort comparison -S, --buffer-size=SIZE use SIZE for main memory buffer -t, --field-separator=SEP use SEP instead of non-blank to blank transition -T, --temporary-directory=DIR use DIR for temporaries, not $TMPDIR or /tmp; multiple options specify multiple directories --parallel=N change the number of sorts run concurrently to N -u, --unique with -c, check for strict ordering; without -c, output only the first of an equal run -z, --zero-terminated line delimiter is NUL, not newline --help display this help and exit --version output version information and exit KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a field number and C a character position in the field; both are origin 1, and the stop position defaults to the line\u0026#39;s end. If neither -t nor -b is in effect, characters in a field are counted from the beginning of the preceding white‐ space. OPTS is one or more single-letter ordering options [bdfgiMhnRrV], which override global ordering options for that key. If no key is given, use the en‐ tire line as the key. Use --debug to diagnose incorrect key usage. SIZE may be followed by the following multiplicative suffixes: % 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y, R, Q. *** WARNING *** The locale specified by the environment affects sort order. Set LC_ALL=C to get the traditional sort order that uses native byte values.\r","date":"2024-10-22","id":137,"permalink":"/personal-site/docs/bash-linux/command-docs/sort/","summary":"\u003ch2 id=\"sort---help\"\u003esort \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: sort \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  or:  sort \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWrite sorted concatenation of all FILE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOrdering options:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -b, --ignore-leading-blanks  ignore leading blanks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --dictionary-order      consider only blanks and alphanumeric characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --ignore-case           fold lower \u003cspan class=\"k\"\u003ecase\u003c/span\u003e to upper \u003cspan class=\"k\"\u003ecase\u003c/span\u003e characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -g, --general-numeric-sort  compare according to general numerical value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -i, --ignore-nonprinting    consider only printable characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -M, --month-sort            compare \u003cspan class=\"o\"\u003e(\u003c/span\u003eunknown\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026lt; \u003cspan class=\"s1\"\u003e\u0026#39;JAN\u0026#39;\u003c/span\u003e \u0026lt; ... \u0026lt; \u003cspan class=\"s1\"\u003e\u0026#39;DEC\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -h, --human-numeric-sort    compare human readable numbers \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., 2K 1G\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -n, --numeric-sort          compare according to string numerical value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -R, --random-sort           shuffle, but group identical keys.  See shuf\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --random-source\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE    get random bytes from FILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -r, --reverse               reverse the result of comparisons\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --sort\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD             sort according to WORD:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                general-numeric -g, human-numeric -h, month -M,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                numeric -n, random -R, version -V\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -V, --version-sort          natural sort of \u003cspan class=\"o\"\u003e(\u003c/span\u003eversion\u003cspan class=\"o\"\u003e)\u003c/span\u003e numbers within text\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eOther options:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --batch-size\u003cspan class=\"o\"\u003e=\u003c/span\u003eNMERGE   merge at most NMERGE inputs at once\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            \u003cspan class=\"k\"\u003efor\u003c/span\u003e more use temp files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --check, --check\u003cspan class=\"o\"\u003e=\u003c/span\u003ediagnose-first  check \u003cspan class=\"k\"\u003efor\u003c/span\u003e sorted input\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e not sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -C, --check\u003cspan class=\"o\"\u003e=\u003c/span\u003equiet, --check\u003cspan class=\"o\"\u003e=\u003c/span\u003esilent  like -c, but \u003cspan class=\"k\"\u003edo\u003c/span\u003e not report first bad line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --compress-program\u003cspan class=\"o\"\u003e=\u003c/span\u003ePROG  compress temporaries with PROG\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              decompress them with PROG -d\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --debug               annotate the part of the line used to sort,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              and warn about questionable usage to stderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF       \u003cspan class=\"nb\"\u003eread\u003c/span\u003e input from the files specified by\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            NUL-terminated names in file F\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                            If F is - \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e names from standard input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -k, --key\u003cspan class=\"o\"\u003e=\u003c/span\u003eKEYDEF          sort via a key\u003cspan class=\"p\"\u003e;\u003c/span\u003e KEYDEF gives location and \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m, --merge               merge already sorted files\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e not sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -o, --output\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE         write result to FILE instead of standard output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --stable              stabilize sort by disabling last-resort comparison\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -S, --buffer-size\u003cspan class=\"o\"\u003e=\u003c/span\u003eSIZE    use SIZE \u003cspan class=\"k\"\u003efor\u003c/span\u003e main memory buffer\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -t, --field-separator\u003cspan class=\"o\"\u003e=\u003c/span\u003eSEP  use SEP instead of non-blank to blank transition\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -T, --temporary-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003eDIR  use DIR \u003cspan class=\"k\"\u003efor\u003c/span\u003e temporaries, not \u003cspan class=\"nv\"\u003e$TMPDIR\u003c/span\u003e or /tmp\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              multiple options specify multiple directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --parallel\u003cspan class=\"o\"\u003e=\u003c/span\u003eN          change the number of sorts run concurrently to N\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -u, --unique              with -c, check \u003cspan class=\"k\"\u003efor\u003c/span\u003e strict ordering\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                              without -c, output only the first of an equal run\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -z, --zero-terminated     line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eKEYDEF is F\u003cspan class=\"o\"\u003e[\u003c/span\u003e.C\u003cspan class=\"o\"\u003e][\u003c/span\u003eOPTS\u003cspan class=\"o\"\u003e][\u003c/span\u003e,F\u003cspan class=\"o\"\u003e[\u003c/span\u003e.C\u003cspan class=\"o\"\u003e][\u003c/span\u003eOPTS\u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e start and stop position, where F is a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003efield number and C a character position in the field\u003cspan class=\"p\"\u003e;\u003c/span\u003e both are origin 1, and\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ethe stop position defaults to the line\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003es end.  If neither -t nor -b is in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eeffect, characters in a field are counted from the beginning of the preceding\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewhitespace.  OPTS is one or more single-letter ordering options \u003cspan class=\"o\"\u003e[\u003c/span\u003ebdfgiMhnRrV\u003cspan class=\"o\"\u003e]\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewhich override global ordering options \u003cspan class=\"k\"\u003efor\u003c/span\u003e that key.  If no key is given, use\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ethe entire line as the key.  Use --debug to diagnose incorrect key usage.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSIZE may be followed by the following multiplicative suffixes:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e% 1% of memory, b 1, K \u003cspan class=\"m\"\u003e1024\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e, and so on \u003cspan class=\"k\"\u003efor\u003c/span\u003e M, G, T, P, E, Z, Y, R, Q.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e*** WARNING ***\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe locale specified by the environment affects sort order.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSet \u003cspan class=\"nv\"\u003eLC_ALL\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eC to get the traditional sort order that uses\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enative byte values.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-sort\"\u003eman sort\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sort - sort lines of text files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sort \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       sort \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Write sorted concatenation of all FILE\u003cspan class=\"o\"\u003e(\u003c/span\u003es\u003cspan class=\"o\"\u003e)\u003c/span\u003e to standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.  Order‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       ing options:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -b, --ignore-leading-blanks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              ignore leading blanks\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -d, --dictionary-order\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              consider only blanks and alphanumeric characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f, --ignore-case\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              fold lower \u003cspan class=\"k\"\u003ecase\u003c/span\u003e to upper \u003cspan class=\"k\"\u003ecase\u003c/span\u003e characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -g, --general-numeric-sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              compare according to general numerical value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -i, --ignore-nonprinting\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              consider only printable characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -M, --month-sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              compare \u003cspan class=\"o\"\u003e(\u003c/span\u003eunknown\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u0026lt; \u003cspan class=\"s1\"\u003e\u0026#39;JAN\u0026#39;\u003c/span\u003e \u0026lt; ... \u0026lt; \u003cspan class=\"s1\"\u003e\u0026#39;DEC\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -h, --human-numeric-sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              compare human readable numbers \u003cspan class=\"o\"\u003e(\u003c/span\u003ee.g., 2K 1G\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -n, --numeric-sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              compare according to string numerical value\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -R, --random-sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              shuffle, but group identical keys.  See shuf\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --random-source\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              get random bytes from FILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -r, --reverse\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              reverse the result of comparisons\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --sort\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              sort  according  to WORD: general-numeric -g, human-numeric -h, month -M,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              numeric -n, random -R, version -V\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -V, --version-sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              natural sort of \u003cspan class=\"o\"\u003e(\u003c/span\u003eversion\u003cspan class=\"o\"\u003e)\u003c/span\u003e numbers within text\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Other options:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --batch-size\u003cspan class=\"o\"\u003e=\u003c/span\u003eNMERGE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              merge at most NMERGE inputs at once\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e more use temp files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --check, --check\u003cspan class=\"o\"\u003e=\u003c/span\u003ediagnose-first\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              check \u003cspan class=\"k\"\u003efor\u003c/span\u003e sorted input\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e not sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -C, --check\u003cspan class=\"o\"\u003e=\u003c/span\u003equiet, --check\u003cspan class=\"o\"\u003e=\u003c/span\u003esilent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              like -c, but \u003cspan class=\"k\"\u003edo\u003c/span\u003e not report first bad line\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --compress-program\u003cspan class=\"o\"\u003e=\u003c/span\u003ePROG\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              compress temporaries with PROG\u003cspan class=\"p\"\u003e;\u003c/span\u003e decompress them with PROG -d\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --debug\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              annotate the part of the line used to sort, and warn  about  questionable\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              usage to stderr\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003eread\u003c/span\u003e input from the files specified by NUL-terminated names in file F\u003cspan class=\"p\"\u003e;\u003c/span\u003e If\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              F is - \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e names from standard input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -k, --key\u003cspan class=\"o\"\u003e=\u003c/span\u003eKEYDEF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              sort via a key\u003cspan class=\"p\"\u003e;\u003c/span\u003e KEYDEF gives location and \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -m, --merge\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              merge already sorted files\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e not sort\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -o, --output\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              write result to FILE instead of standard output\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -s, --stable\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              stabilize sort by disabling last-resort comparison\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -S, --buffer-size\u003cspan class=\"o\"\u003e=\u003c/span\u003eSIZE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use SIZE \u003cspan class=\"k\"\u003efor\u003c/span\u003e main memory buffer\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -t, --field-separator\u003cspan class=\"o\"\u003e=\u003c/span\u003eSEP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use SEP instead of non-blank to blank transition\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -T, --temporary-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003eDIR\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use  DIR  \u003cspan class=\"k\"\u003efor\u003c/span\u003e  temporaries, not \u003cspan class=\"nv\"\u003e$TMPDIR\u003c/span\u003e or /tmp\u003cspan class=\"p\"\u003e;\u003c/span\u003e multiple options specify\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              multiple directories\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --parallel\u003cspan class=\"o\"\u003e=\u003c/span\u003eN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              change the number of sorts run concurrently to N\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -u, --unique\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              with -c, check \u003cspan class=\"k\"\u003efor\u003c/span\u003e strict ordering\u003cspan class=\"p\"\u003e;\u003c/span\u003e without -c, output only the first  of\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              an equal run\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -z, --zero-terminated\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       KEYDEF  is  F\u003cspan class=\"o\"\u003e[\u003c/span\u003e.C\u003cspan class=\"o\"\u003e][\u003c/span\u003eOPTS\u003cspan class=\"o\"\u003e][\u003c/span\u003e,F\u003cspan class=\"o\"\u003e[\u003c/span\u003e.C\u003cspan class=\"o\"\u003e][\u003c/span\u003eOPTS\u003cspan class=\"o\"\u003e]]\u003c/span\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e start and stop position, where F is a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       field number and C a character position in the field\u003cspan class=\"p\"\u003e;\u003c/span\u003e both are origin 1, and the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       stop position defaults to the line\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003es end.  If neither -t nor -b  is  in  effect,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       characters  in  a  field  are counted from the beginning of the preceding white‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       space.  OPTS is one or more single-letter ordering options \u003cspan class=\"o\"\u003e[\u003c/span\u003ebdfgiMhnRrV\u003cspan class=\"o\"\u003e]\u003c/span\u003e,  which\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       override  global ordering options \u003cspan class=\"k\"\u003efor\u003c/span\u003e that key.  If no key is given, use the en‐\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       tire line as the key.  Use --debug to diagnose incorrect key usage.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       SIZE may be followed by the following multiplicative suffixes: % 1% of memory, b\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       1, K \u003cspan class=\"m\"\u003e1024\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e, and so on \u003cspan class=\"k\"\u003efor\u003c/span\u003e M, G, T, P, E, Z, Y, R, Q.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       *** WARNING *** The locale specified by the environment affects sort order.  Set\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       \u003cspan class=\"nv\"\u003eLC_ALL\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eC to get the traditional sort order that uses native byte values.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"sort"},{"content":"touch \u0026ndash;help Usage: touch [OPTION]... FILE... Update the access and modification times of each FILE to the current time. A FILE argument that does not exist is created empty, unless -c or -h is supplied. A FILE argument string of - is handled specially and causes touch to change the times of the file associated with standard output. Mandatory arguments to long options are mandatory for short options too. -a change only the access time -c, --no-create do not create any files -d, --date=STRING parse STRING and use it instead of current time -f (ignored) -h, --no-dereference affect each symbolic link instead of any referenced file (useful only on systems that can change the timestamps of a symlink) -m change only the modification time -r, --reference=FILE use this file\u0026#39;s times instead of current time -t STAMP use [[CC]YY]MMDDhhmm[.ss] instead of current time --time=WORD change the specified time: WORD is access, atime, or use: equivalent to -a WORD is modify or mtime: equivalent to -m --help display this help and exit --version output version information and exit Note that the -d and -t options accept different time-date formats.\rman touch NAME touch - change file timestamps SYNOPSIS touch [OPTION]... FILE... DESCRIPTION Update the access and modification times of each FILE to the current time. A FILE argument that does not exist is created empty, unless -c or -h is supplied. A FILE argument string of - is handled specially and causes touch to change the times of the file associated with standard output. Mandatory arguments to long options are mandatory for short options too. -a change only the access time -c, --no-create do not create any files -d, --date=STRING parse STRING and use it instead of current time -f (ignored) -h, --no-dereference affect each symbolic link instead of any referenced file (useful only on systems that can change the timestamps of a symlink) -m change only the modification time -r, --reference=FILE use this file\u0026#39;s times instead of current time -t STAMP use [[CC]YY]MMDDhhmm[.ss] instead of current time --time=WORD change the specified time: WORD is access, atime, or use: equivalent to -a WORD is modify or mtime: equivalent to -m --help display this help and exit --version output version information and exit Note that the -d and -t options accept different time-date formats. DATE STRING The --date=STRING is a mostly free format human readable date string such as \u0026#34;Sun, 29 Feb 2004 16:21:42 -0800\u0026#34; or \u0026#34;2004-02-29 16:21:42\u0026#34; or even \u0026#34;next Thursday\u0026#34;. A date string may contain items indicating calendar date, time of day, time zone, day of week, relative time, relative date, and numbers. An empty string indicates the beginning of the day. The date string format is more complex than is easily documented here but is fully described in the info documentation.\r","date":"2024-10-22","id":138,"permalink":"/personal-site/docs/bash-linux/command-docs/touch/","summary":"\u003ch2 id=\"touch---help\"\u003etouch \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: touch \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... FILE...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUpdate the access and modification \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e of each FILE to the current time.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eA FILE argument that does not exist is created empty, unless -c or -h\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eis supplied.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eA FILE argument string of - is handled specially and causes touch to\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003echange the \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e of the file associated with standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -a                     change only the access \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --no-create        \u003cspan class=\"k\"\u003edo\u003c/span\u003e not create any files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --date\u003cspan class=\"o\"\u003e=\u003c/span\u003eSTRING      parse STRING and use it instead of current \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f                     \u003cspan class=\"o\"\u003e(\u003c/span\u003eignored\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -h, --no-dereference   affect each symbolic link instead of any referenced\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                         file \u003cspan class=\"o\"\u003e(\u003c/span\u003euseful only on systems that can change the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                         timestamps of a symlink\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m                     change only the modification \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -r, --reference\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE   use this file\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003es \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e instead of current \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -t STAMP               use \u003cspan class=\"o\"\u003e[[\u003c/span\u003eCC\u003cspan class=\"o\"\u003e]\u003c/span\u003eYY\u003cspan class=\"o\"\u003e]\u003c/span\u003eMMDDhhmm\u003cspan class=\"o\"\u003e[\u003c/span\u003e.ss\u003cspan class=\"o\"\u003e]\u003c/span\u003e instead of current \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --time\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD        change the specified time:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           WORD is access, atime, or use: equivalent to -a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           WORD is modify or mtime: equivalent to -m\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNote that the -d and -t options accept different time-date formats.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-touch\"\u003eman touch\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       touch - change file timestamps\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       touch \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... FILE...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Update the access and modification \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e of each FILE to the current time.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       A  FILE  argument  that does not exist is created empty, unless -c or -h is supplied.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       A FILE argument string of - is handled specially and causes touch to change the \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e of the file associated with standard output.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Mandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -a     change only the access \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --no-create\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"k\"\u003edo\u003c/span\u003e not create any files\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -d, --date\u003cspan class=\"o\"\u003e=\u003c/span\u003eSTRING\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              parse STRING and use it instead of current \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -f     \u003cspan class=\"o\"\u003e(\u003c/span\u003eignored\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -h, --no-dereference\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              affect  each symbolic link instead of any referenced file \u003cspan class=\"o\"\u003e(\u003c/span\u003euseful only on systems that can change the timestamps of a symlink\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -m     change only the modification \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -r, --reference\u003cspan class=\"o\"\u003e=\u003c/span\u003eFILE\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use this file\u003cspan class=\"err\"\u003e\u0026#39;\u003c/span\u003es \u003cspan class=\"nb\"\u003etimes\u003c/span\u003e instead of current \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -t STAMP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              use \u003cspan class=\"o\"\u003e[[\u003c/span\u003eCC\u003cspan class=\"o\"\u003e]\u003c/span\u003eYY\u003cspan class=\"o\"\u003e]\u003c/span\u003eMMDDhhmm\u003cspan class=\"o\"\u003e[\u003c/span\u003e.ss\u003cspan class=\"o\"\u003e]\u003c/span\u003e instead of current \u003cspan class=\"nb\"\u003etime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --time\u003cspan class=\"o\"\u003e=\u003c/span\u003eWORD\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              change the specified time: WORD is access, atime, or use:  equivalent to -a WORD is modify or mtime: equivalent to -m\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Note that the -d and -t options accept different time-date formats.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDATE STRING\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The  --date\u003cspan class=\"o\"\u003e=\u003c/span\u003eSTRING  is  a  mostly free format human readable date string such as \u003cspan class=\"s2\"\u003e\u0026#34;Sun, 29 Feb 2004 16:21:42 -0800\u0026#34;\u003c/span\u003e or \u003cspan class=\"s2\"\u003e\u0026#34;2004-02-29 16:21:42\u0026#34;\u003c/span\u003e or even \u003cspan class=\"s2\"\u003e\u0026#34;next  Thursday\u0026#34;\u003c/span\u003e.  A  date  string may contain items indicating calendar date, \u003cspan class=\"nb\"\u003etime\u003c/span\u003e of day, \u003cspan class=\"nb\"\u003etime\u003c/span\u003e zone, day of week, relative time, relative date,  and  numbers.   An  empty string  indicates the beginning of the day.  The date string format is more complex than is easily documented here but is fully described in the info  documentation.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"touch"},{"content":"uniq \u0026ndash;help Usage: uniq [OPTION]... [INPUT [OUTPUT]] Filter adjacent matching lines from INPUT (or standard input), writing to OUTPUT (or standard output). With no options, matching lines are merged to the first occurrence. Mandatory arguments to long options are mandatory for short options too. -c, --count prefix lines by the number of occurrences -d, --repeated only print duplicate lines, one for each group -D print all duplicate lines --all-repeated[=METHOD] like -D, but allow separating groups with an empty line; METHOD={none(default),prepend,separate} -f, --skip-fields=N avoid comparing the first N fields --group[=METHOD] show all items, separating groups with an empty line; METHOD={separate(default),prepend,append,both} -i, --ignore-case ignore differences in case when comparing -s, --skip-chars=N avoid comparing the first N characters -u, --unique only print unique lines -z, --zero-terminated line delimiter is NUL, not newline -w, --check-chars=N compare no more than N characters in lines --help display this help and exit --version output version information and exit A field is a run of blanks (usually spaces and/or TABs), then non-blank characters. Fields are skipped before chars. Note: \u0026#39;uniq\u0026#39; does not detect repeated lines unless they are adjacent. You may want to sort the input first, or use \u0026#39;sort -u\u0026#39; without \u0026#39;uniq\u0026#39;.\r","date":"2024-10-22","id":139,"permalink":"/personal-site/docs/bash-linux/command-docs/uniq/","summary":"\u003ch2 id=\"uniq---help\"\u003euniq \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: uniq \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eINPUT \u003cspan class=\"o\"\u003e[\u003c/span\u003eOUTPUT\u003cspan class=\"o\"\u003e]]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFilter adjacent matching lines from INPUT \u003cspan class=\"o\"\u003e(\u003c/span\u003eor standard input\u003cspan class=\"o\"\u003e)\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewriting to OUTPUT \u003cspan class=\"o\"\u003e(\u003c/span\u003eor standard output\u003cspan class=\"o\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no options, matching lines are merged to the first occurrence.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eMandatory arguments to long options are mandatory \u003cspan class=\"k\"\u003efor\u003c/span\u003e short options too.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --count           prefix lines by the number of occurrences\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -d, --repeated        only print duplicate lines, one \u003cspan class=\"k\"\u003efor\u003c/span\u003e each group\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -D                    print all duplicate lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --all-repeated\u003cspan class=\"o\"\u003e[=\u003c/span\u003eMETHOD\u003cspan class=\"o\"\u003e]\u003c/span\u003e  like -D, but allow separating groups\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 with an empty line\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                                 \u003cspan class=\"nv\"\u003eMETHOD\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003enone\u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e,prepend,separate\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -f, --skip-fields\u003cspan class=\"o\"\u003e=\u003c/span\u003eN   avoid comparing the first N fields\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --group\u003cspan class=\"o\"\u003e[=\u003c/span\u003eMETHOD\u003cspan class=\"o\"\u003e]\u003c/span\u003e  show all items, separating groups with an empty line\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                          \u003cspan class=\"nv\"\u003eMETHOD\u003c/span\u003e\u003cspan class=\"o\"\u003e={\u003c/span\u003eseparate\u003cspan class=\"o\"\u003e(\u003c/span\u003edefault\u003cspan class=\"o\"\u003e)\u003c/span\u003e,prepend,append,both\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -i, --ignore-case     ignore differences in \u003cspan class=\"k\"\u003ecase\u003c/span\u003e when comparing\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -s, --skip-chars\u003cspan class=\"o\"\u003e=\u003c/span\u003eN    avoid comparing the first N characters\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -u, --unique          only print unique lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -z, --zero-terminated     line delimiter is NUL, not newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -w, --check-chars\u003cspan class=\"o\"\u003e=\u003c/span\u003eN   compare no more than N characters in lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eA field is a run of blanks \u003cspan class=\"o\"\u003e(\u003c/span\u003eusually spaces and/or TABs\u003cspan class=\"o\"\u003e)\u003c/span\u003e, \u003cspan class=\"k\"\u003ethen\u003c/span\u003e non-blank\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003echaracters.  Fields are skipped before chars.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNote: \u003cspan class=\"s1\"\u003e\u0026#39;uniq\u0026#39;\u003c/span\u003e does not detect repeated lines unless they are adjacent.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eYou may want to sort the input first, or use \u003cspan class=\"s1\"\u003e\u0026#39;sort -u\u0026#39;\u003c/span\u003e without \u003cspan class=\"s1\"\u003e\u0026#39;uniq\u0026#39;\u003c/span\u003e.\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"uniq"},{"content":"wc \u0026ndash;help Usage: wc [OPTION]... [FILE]... or: wc [OPTION]... --files0-from=F Print newline, word, and byte counts for each FILE, and a total line if more than one FILE is specified. A word is a non-zero-length sequence of printable characters delimited by white space. With no FILE, or when FILE is -, read standard input. The options below may be used to select which counts are printed, always in the following order: newline, word, character, byte, maximum line length. -c, --bytes print the byte counts -m, --chars print the character counts -l, --lines print the newline counts --files0-from=F read input from the files specified by NUL-terminated names in file F; If F is - then read names from standard input -L, --max-line-length print the maximum display width -w, --words print the word counts --total=WHEN when to print a line with total counts; WHEN can be: auto, always, only, never --help display this help and exit --version output version information and exit\rman wc NAME wc - print newline, word, and byte counts for each file SYNOPSIS wc [OPTION]... [FILE]... wc [OPTION]... --files0-from=F DESCRIPTION Print newline, word, and byte counts for each FILE, and a total line if more than one FILE is specified. A word is a non-zero-length sequence of printable characters delimited by white space. With no FILE, or when FILE is -, read standard input. The options below may be used to select which counts are printed, always in the following order: newline, word, character, byte, maximum line length. -c, --bytes print the byte counts -m, --chars print the character counts -l, --lines print the newline counts --files0-from=F read input from the files specified by NUL-terminated names in file F; If F is - then read names from standard input -L, --max-line-length print the maximum display width -w, --words print the word counts --total=WHEN when to print a line with total counts; WHEN can be: auto, always, only, never --help display this help and exit --version output version information and exit\r","date":"2024-10-22","id":140,"permalink":"/personal-site/docs/bash-linux/command-docs/wc-word-count/","summary":"\u003ch2 id=\"wc---help\"\u003ewc \u0026ndash;help\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUsage: wc \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  or:  wc \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ePrint newline, word, and byte counts \u003cspan class=\"k\"\u003efor\u003c/span\u003e each FILE, and a total line \u003cspan class=\"k\"\u003eif\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emore than one FILE is specified.  A word is a non-zero-length sequence of\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintable characters delimited by white space.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWith no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThe options below may be used to \u003cspan class=\"k\"\u003eselect\u003c/span\u003e which counts are printed, always in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ethe following order: newline, word, character, byte, maximum line length.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -c, --bytes            print the byte counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -m, --chars            print the character counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -l, --lines            print the newline counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF    \u003cspan class=\"nb\"\u003eread\u003c/span\u003e input from the files specified by\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           NUL-terminated names in file F\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           If F is - \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e names from standard input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -L, --max-line-length  print the maximum display width\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  -w, --words            print the word counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --total\u003cspan class=\"o\"\u003e=\u003c/span\u003eWHEN       when to print a line with total counts\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                           WHEN can be: auto, always, only, never\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --help        display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      --version     output version information and exit\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"man-wc\"\u003eman wc\u003c/h2\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eNAME\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       wc - print newline, word, and byte counts \u003cspan class=\"k\"\u003efor\u003c/span\u003e each file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eSYNOPSIS\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       wc \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... \u003cspan class=\"o\"\u003e[\u003c/span\u003eFILE\u003cspan class=\"o\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       wc \u003cspan class=\"o\"\u003e[\u003c/span\u003eOPTION\u003cspan class=\"o\"\u003e]\u003c/span\u003e... --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eDESCRIPTION\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       Print  newline,  word,  and  byte counts \u003cspan class=\"k\"\u003efor\u003c/span\u003e each FILE, and a total line \u003cspan class=\"k\"\u003eif\u003c/span\u003e more\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       than one FILE is specified.  A word is a non-zero-length sequence  of  printable\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       characters delimited by white space.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       With no FILE, or when FILE is -, \u003cspan class=\"nb\"\u003eread\u003c/span\u003e standard input.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       The  options below may be used to \u003cspan class=\"k\"\u003eselect\u003c/span\u003e which counts are printed, always in the\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       following order: newline, word, character, byte, maximum line length.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -c, --bytes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the byte counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -m, --chars\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the character counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -l, --lines\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the newline counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --files0-from\u003cspan class=\"o\"\u003e=\u003c/span\u003eF\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nb\"\u003eread\u003c/span\u003e input from the files specified by NUL-terminated names in file F\u003cspan class=\"p\"\u003e;\u003c/span\u003e If\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              F is - \u003cspan class=\"k\"\u003ethen\u003c/span\u003e \u003cspan class=\"nb\"\u003eread\u003c/span\u003e names from standard input\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -L, --max-line-length\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the maximum display width\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       -w, --words\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              print the word counts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --total\u003cspan class=\"o\"\u003e=\u003c/span\u003eWHEN\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              when to print a line with total counts\u003cspan class=\"p\"\u003e;\u003c/span\u003e WHEN can be: auto, always,  only, never\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --help display this \u003cspan class=\"nb\"\u003ehelp\u003c/span\u003e and \u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e       --version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              output version information and exit\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"wc - Word Count"},{"content":"Objectives Write a shell script that runs a command or a series of commands for a fixed set of files. Run a shell script from the command line. Create a shell script that operates on a set of files defined by the user on the command line. Build a pipeline that includes shell scripts. Shell Script Shell scripts allow us to automate frequently used commands by saving them in a file, enabling us to execute them later with a single command. In essence, shell scripts are small programs.\nCreating a Shell Script Navigate to the desired directory:\n$ cd alkanes\rCreate a new shell script file:\n$ nano middle.sh\rThis opens a file where you can write your commands.\nAdd the following command to the file to extract specific lines:\nhead -n 15 octane.pdb | tail -n 5\rThis command collects lines 11-15 of the file octane.pdb.\nSave and close the file.\nExecuting the Script Once the script is saved, you can execute it using:\n$ bash middle.sh\rMaking the Script Flexible To make the script more versatile, replace the specific file name with $1, which represents the first argument passed to the script:\nhead -n 15 \u0026#34;$1\u0026#34; | tail -n 5\rNow, you can provide different file names as arguments when executing the script:\n$ bash middle.sh octane.pdb $ bash middle.sh pentane.pdb\rHandling Spaces in Filenames To ensure the script works with filenames that contain spaces, always enclose $1 in double quotes:\nhead -n 15 \u0026#34;$1\u0026#34; | tail -n 5\rUsing Additional Arguments You can also modify the script to accept line numbers as arguments: To make sure the numbers for head and tail can be altered by arguments, they can also be taken as $1 $2 $3 in middle.sh.\nhead -n \u0026#34;$2\u0026#34; \u0026#34;$1\u0026#34; | tail -n \u0026#34;$3\u0026#34;\rNow you can specify the number of lines for head and tail:\n$ bash middle.sh pentane.pdb 15 5 # 15 and 5 arguments for head and tail $ bash middle.sh pentane.pdb 20 5\rAdding Comments To make the script understandable, add comments using the # character:\n# Select lines from the middle of a file. # Usage: bash middle.sh filename end_line num_lines. head -n \u0026#34;$2\u0026#34; \u0026#34;$1\u0026#34; | tail -n \u0026#34;$3\u0026#34;\rComments are ignored by the shell but provide clarity for users.\nUsing $@ to Process Multiple Files To handle multiple files, use $@, which represents all command-line arguments:\n$ nano sorted.sh\rAdd the following script to sort files by their length:\n# Sort files by their length. # Usage: bash sorted.sh one_or_more_filenames wc -l \u0026#34;$@\u0026#34; | sort -n\rExecute the script with multiple files:\n$ bash sorted.sh *.pdb ../creatures/*.dat\rFinding Unique Entries To find unique species in CSV files, where the species is the second data field, use a loop to process each file:\nfor file in \u0026#34;$@\u0026#34; do echo \u0026#34;Unique species in $file:\u0026#34; # Extract species names cut -d , -f 2 \u0026#34;$file\u0026#34; | sort | uniq done\rThis script loops through all provided filenames and extracts unique species from each.\n","date":"2024-12-29","id":141,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-shell-scripting/","summary":"\u003ch3 id=\"objectives\"\u003eObjectives\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a shell script that runs a command or a series of commands for a fixed set of files.\u003c/li\u003e\n\u003cli\u003eRun a shell script from the command line.\u003c/li\u003e\n\u003cli\u003eCreate a shell script that operates on a set of files defined by the user on the command line.\u003c/li\u003e\n\u003cli\u003eBuild a pipeline that includes shell scripts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"shell-script\"\u003eShell Script\u003c/h2\u003e\n\u003cp\u003eShell scripts allow us to automate frequently used commands by saving them in a file, enabling us to execute them later with a single command. In essence, \u003cstrong\u003eshell scripts\u003c/strong\u003e are small programs.\u003c/p\u003e","tags":[],"title":"Bash - Shell Scripting"},{"content":"Objectives Write a loop that applies to one or more commands separately to each file in a set of files. Trace the values taken by a loop variable during the execution of the loop. Explain the difference between a variable\u0026rsquo;s name and its value. Explain why spaces and some punctuation characters shouldn\u0026rsquo;t be used in filenames. Demonstrate how to see what commands have recently been executed. Run recently executed commands without retyping them. Loops Loops are programming constructs that allow us to repeat a command or set of commands for each item in a list.\nBasic Loop Structure for filename in basilisk.dat minotaur.dat unicorn.dat do echo $filename head -n 2 $filename | tail -n 1 done\rfor indicates the start of the loop. do begins the block of commands to execute. done marks the end of the loop. $ is used to denote a variable that will be replaced by its value. Example: Echoing Numbers for number in 0 1 2 3 4 5 6 7 8 9 do echo $number done\rCommon Mistakes Incorrect Method:\nfor data in *.pdb do ls *.pdb done\rThis prints all .pdb files repeatedly.\nCorrect Method:\nfor data in *.pdb do ls $data done\rThis prints each file individually.\nFiltering Files To print only specific files:\nfor filename in c* # to print cubane.pdb do ls $filename done\rThis prints files starting with \u0026lsquo;c\u0026rsquo;.\nTo print files that contain \u0026lsquo;c\u0026rsquo;:\nfor filename in *c* do ls $filename done\rSaving Output to a File in a Loop for alkanes in *.pdb do echo $alkanes cat $alkanes \u0026gt;\u0026gt; alkanes.pdb done\rThis appends the contents of all .pdb files into alkanes.pdb. Using \u0026gt; would overwrite the file each time.\nPiping You can combine commands using a pipe (|):\nfor filename in *.dat do echo $filename head -n 100 $filename | tail -n 20 done\rThis outputs the last 20 lines from the first 100 lines of each .dat file. So gives lines from 81 to 100.\nHandling Spaces in Filenames When dealing with filenames that contain spaces, enclose them in quotes:\nfor filename in \u0026#34;red dragon.dat\u0026#34; \u0026#34;purple unicorn.dat\u0026#34; do head -n 100 \u0026#34;$filename\u0026#34; | tail -n 20 done\rNote: Do not enclose $filename in quotes inside the loop.\nCopying Files into Multiple Files Using a wildcard directly with cp may raise errors:\ncp *.dat original-*.dat\rThis fails if there are multiple files or last argument is not a directory.\nUsing a loop:\nfor filename in *.dat do cp \u0026#34;$filename\u0026#34; \u0026#34;original-$filename\u0026#34; done\rThis copies each .dat file with a prefix of original-. Now each of .dat file come one by one and in the cp there will be only two files,\nso will be copied into the other.\nScripting Example of a loop in a script:\nfor datafile in NENE*A.txt NENE*B.txt do bash goostat.sh \u0026#34;$datafile\u0026#34; \u0026#34;stats-$datafile\u0026#34; done\rThis runs a script for each specified file.\nTo echo commands without executing them:\nfor datafile in *.dat do echo \u0026#34;cat $datafile \u0026gt;\u0026gt; all.pdb\u0026#34; done\rUsing quotes here prevents the command from executing immediately.\nNested Loops You can nest loops to perform more complex tasks:\nfor species in cubane ethane methane do for temp in 25 30 37 40 do mkdir \u0026#34;$species-$temp\u0026#34; done done\rThis creates directories named after each species combined with the temperature.\n","date":"2024-12-29","id":142,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-loop/","summary":"\u003ch3 id=\"objectives\"\u003eObjectives\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWrite a loop that applies to one or more commands separately to each file in a set of files.\u003c/li\u003e\n\u003cli\u003eTrace the values taken by a loop variable during the execution of the loop.\u003c/li\u003e\n\u003cli\u003eExplain the difference between a variable\u0026rsquo;s name and its value.\u003c/li\u003e\n\u003cli\u003eExplain why spaces and some punctuation characters shouldn\u0026rsquo;t be used in filenames.\u003c/li\u003e\n\u003cli\u003eDemonstrate how to see what commands have recently been executed.\u003c/li\u003e\n\u003cli\u003eRun recently executed commands without retyping them.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"loops\"\u003eLoops\u003c/h2\u003e\n\u003cp\u003eLoops are programming constructs that allow us to repeat a command or set of commands for each item in a list.\u003c/p\u003e","tags":[],"title":"Bash - loop"},{"content":"","date":"2024-12-29","id":143,"permalink":"/personal-site/docs/bash-linux/linux_bash/bash-sed/","summary":"","tags":[],"title":"Bash - sed"},{"content":"","date":"2024-12-29","id":144,"permalink":"/personal-site/docs/bash-linux/linux_os/","summary":"","tags":[],"title":"Linux_os"},{"content":"","date":"2024-12-17","id":145,"permalink":"/personal-site/docs/python/1data-types/","summary":"","tags":[],"title":"Data Types"},{"content":"","date":"2024-10-22","id":146,"permalink":"/personal-site/docs/bash-linux/command-docs/","summary":"Docs for the commonly used commands in bash","tags":[],"title":"Bash Commands"},{"content":"","date":"2023-09-07","id":147,"permalink":"/personal-site/docs/","summary":"","tags":[],"title":"All Notes Articles"},{"content":"","date":"2024-10-07","id":148,"permalink":"/personal-site/","summary":"","tags":[],"title":"Sujith's Library"},{"content":"Surprised!! Why are you even here?? ","date":"2023-09-07","id":149,"permalink":"/personal-site/privacy/","summary":"\u003ch1 id=\"surprised\"\u003eSurprised!!\u003c/h1\u003e\n\u003ch2 id=\"why-are-you-even-here\"\u003eWhy are you even here??\u003c/h2\u003e","tags":[],"title":"Privacy Policy"},{"content":"","date":"0001-01-01","id":150,"permalink":"/personal-site/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":151,"permalink":"/personal-site/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":152,"permalink":"/personal-site/tags/","summary":"","tags":[],"title":"Tags"}]