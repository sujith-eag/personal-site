<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sujith&#39;s Library</title>
    <link>http://localhost:1313/personal-site/</link>
    <description>Recent content on Sujith&#39;s Library</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Thulite</copyright>
    <lastBuildDate>Sun, 16 Feb 2025 18:53:59 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/personal-site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01 PDT - 01 Variables</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-01-variables/</link>
      <pubDate>Tue, 17 Dec 2024 22:32:32 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-01-variables/</guid>
      <description>&lt;p&gt;In languages like Java, C, and others, variables are directly tied to memory allocation. A specific memory &amp;ldquo;box&amp;rdquo; is created for the variable, and the value is stored within it. If the value changes, the box is updated with the new value.&lt;br&gt;&#xA;When one variable is assigned to another, the value is copied into a new memory &amp;ldquo;box.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 PDT - 02 Datatypes</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-02-datatypes/</link>
      <pubDate>Tue, 17 Dec 2024 22:33:48 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-02-datatypes/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;datatype&lt;/strong&gt; represents the type of data stored in a variable or memory location.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Built-in datatypes&lt;/strong&gt;: These are the pre-defined data types provided by Python.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;User-defined datatypes&lt;/strong&gt;: These are custom data types created by programmers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;built-in-data-types&#34;&gt;Built-in Data Types&lt;/h3&gt;&#xA;&lt;p&gt;The built-in data types in Python can be broadly categorized into:&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 PDT - 03 Operators</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-03-operators/</link>
      <pubDate>Tue, 17 Dec 2024 22:33:59 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-03-operators/</guid>
      <description>&lt;p&gt;An &lt;strong&gt;operator&lt;/strong&gt; is a symbol that performs an operation on one or more operands (variables or values). Operators can be classified based on the number of operands they work with (Unary, Binary and Ternary operator) and their functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 PDT - 04 int &amp; float</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-04-int-float/</link>
      <pubDate>Tue, 17 Dec 2024 22:34:15 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-04-int-float/</guid>
      <description>&lt;h2 id=&#34;int&#34;&gt;Int&lt;/h2&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;expressive-code&#34;&gt;&#xD;&#xA;  &lt;figure class=&#34;frame not-content&#34;&gt;&#xD;&#xA;  &lt;figcaption class=&#34;header&#34;&gt;&#xD;&#xA;    &lt;span class=&#34;title&#34;&gt;&lt;/span&gt;&#xD;&#xA;  &lt;/figcaption&gt;&#xD;&#xA;  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; Â &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;  &lt;/figure&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;p&gt;Making it interactive with &lt;code&gt;input()&lt;/code&gt;&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;expressive-code&#34;&gt;&#xD;&#xA;  &lt;figure class=&#34;frame not-content&#34;&gt;&#xD;&#xA;  &lt;figcaption class=&#34;header&#34;&gt;&#xD;&#xA;    &lt;span class=&#34;title&#34;&gt;&lt;/span&gt;&#xD;&#xA;  &lt;/figcaption&gt;&#xD;&#xA;  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;whats x? &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;whats y? &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;  &lt;/figure&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;p&gt;Any input from keyboard is treated as a string.&#xA;For input 2 and 2, output will be 22 as + is concatenating both numbers because they are treated as strings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 PDT - 05 String Manipulation</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-05-string-manipulation/</link>
      <pubDate>Tue, 17 Dec 2024 22:34:58 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-05-string-manipulation/</guid>
      <description>&lt;p&gt;The &lt;code&gt;str&lt;/code&gt; datatype represents a &lt;strong&gt;string&lt;/strong&gt;, which is a sequence of characters. Strings in Python are enclosed in &lt;strong&gt;single quotes&lt;/strong&gt; (&lt;code&gt;&#39;&lt;/code&gt;), &lt;strong&gt;double quotes&lt;/strong&gt; (&lt;code&gt;&amp;quot;&lt;/code&gt;), or &lt;strong&gt;triple quotes&lt;/strong&gt; (&lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; or &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;) for multi-line strings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>01 PDT - 06 String Methods</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-06-string-methods/</link>
      <pubDate>Tue, 17 Dec 2024 22:34:58 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/primitive-types/01-pdt-06-string-methods/</guid>
      <description>&lt;p&gt;Method is a function that is built into a function used to perform actions on a piece of data.&#xA;They are followed by a &lt;code&gt;()&lt;/code&gt; parenthesis, as they may need additional data to work.  (need to check documentation for more)&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 01 Lists</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-01-lists/</link>
      <pubDate>Tue, 17 Dec 2024 22:45:42 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-01-lists/</guid>
      <description>&lt;p&gt;Lists are collections of items arranged in a particular order. They allow you to store multiple pieces of information in a single structure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 02 List Updation</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-02-list-updation/</link>
      <pubDate>Tue, 17 Dec 2024 22:46:17 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-02-list-updation/</guid>
      <description>&lt;h3 id=&#34;topics-covered&#34;&gt;Topics covered&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mutable Lists&lt;/strong&gt;: Lists are mutable and can be updated directly.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Equality vs Identity&lt;/strong&gt;: &lt;code&gt;==&lt;/code&gt; compares values, &lt;code&gt;is&lt;/code&gt; compares memory references.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;List Slicing&lt;/strong&gt;: &lt;code&gt;list[start:stop:step]&lt;/code&gt; to extract sublists. Supports reverse and step slicing.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Copying Lists&lt;/strong&gt;: Use slicing &lt;code&gt;[:]&lt;/code&gt; to copy a list.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Index Errors&lt;/strong&gt;: Out-of-range slices return empty lists, and negative indexing avoids errors.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Concatenation&lt;/strong&gt;: Use &lt;code&gt;+&lt;/code&gt; to combine lists.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;f-strings&lt;/strong&gt;: Embed list elements into strings using f-strings.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;updating-lists-mutable&#34;&gt;Updating Lists (Mutable)&lt;/h3&gt;&#xA;&lt;p&gt;Unlike strings, lists in Python are &lt;strong&gt;mutable&lt;/strong&gt;, meaning you can change their contents directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 03 List Methods</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-03-list-methods/</link>
      <pubDate>Tue, 17 Dec 2024 22:46:00 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-03-list-methods/</guid>
      <description>&lt;p&gt;Index and short summary of the list methods and functions in this page:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Basic Statistics:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;min()&lt;/code&gt;: Returns the smallest value in the list.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;max()&lt;/code&gt;: Returns the largest value in the list.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sum()&lt;/code&gt;: Returns the sum of all values in the list.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Adding Elements:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 04 Map and Filter Operations</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-04-map-and-filter-operations/</link>
      <pubDate>Sun, 16 Feb 2025 18:53:59 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/4list/02-cdt-04-map-and-filter-operations/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;map(f, l)&lt;/code&gt;&lt;/strong&gt;: Transforms each element of &lt;code&gt;l&lt;/code&gt; using function &lt;code&gt;f&lt;/code&gt;. Returns an iterable, which can be converted into a list using &lt;code&gt;list()&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;filter(p, l)&lt;/code&gt;&lt;/strong&gt;: Filters elements of &lt;code&gt;l&lt;/code&gt; based on function &lt;code&gt;p&lt;/code&gt;. Returns an iterable with only the elements for which &lt;code&gt;p&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Combining &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt;&lt;/strong&gt;: Chaining &lt;code&gt;map()&lt;/code&gt; and &lt;code&gt;filter()&lt;/code&gt; to first filter and then transform data.&lt;/li&gt;&#xA;&lt;li&gt;This is useful for complex transformations like filtering even numbers and then squaring them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By using these higher-order functions, clean and efficient code can be written that works directly with iterables without the need for explicit loops or list comprehensions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
