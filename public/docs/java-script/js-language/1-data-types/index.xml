<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Types on Sujith&#39;s Library</title>
    <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/</link>
    <description>Recent content in Data Types on Sujith&#39;s Library</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Thulite</copyright>
    <lastBuildDate>Thu, 07 Nov 2024 14:47:36 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Variables</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/variables/</link>
      <pubDate>Thu, 07 Nov 2024 14:42:23 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/variables/</guid>
      <description>&lt;p&gt;In JavaScript, &lt;em&gt;bindings&lt;/em&gt; (also known as &lt;em&gt;variables&lt;/em&gt;) are used to maintain the internal state and store values.&lt;/p&gt;&#xA;&lt;h2 id=&#34;rules-for-naming-variables&#34;&gt;Rules for naming variables:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;No keywords or reserved words&lt;/strong&gt; (e.g., &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, etc.).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cannot start with a number&lt;/strong&gt; (e.g., &lt;code&gt;123variable&lt;/code&gt; is invalid).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;No spaces or hyphens (&lt;code&gt;-&lt;/code&gt;)&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;No special characters&lt;/strong&gt;, except for &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;naming-variables-properly&#34;&gt;Naming Variables Properly&lt;/h2&gt;&#xA;&lt;p&gt;A good variable name should be &lt;strong&gt;descriptive&lt;/strong&gt; and &lt;strong&gt;easy to understand&lt;/strong&gt;. It should clearly represent the value or data that it holds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Values and Types</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/values-and-types/</link>
      <pubDate>Thu, 07 Nov 2024 14:43:05 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/values-and-types/</guid>
      <description>&lt;p&gt;In JavaScript, &lt;strong&gt;values&lt;/strong&gt; are chunks of information.&lt;br&gt;&#xA;Each value has a specific &lt;strong&gt;type&lt;/strong&gt; that defines how it behaves and interacts with other values.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Number Types</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/number-types/</link>
      <pubDate>Thu, 07 Nov 2024 14:43:35 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/number-types/</guid>
      <description>&lt;p&gt;In JavaScript, there are two types of numbers: &lt;strong&gt;Regular Numbers&lt;/strong&gt; and &lt;strong&gt;BigInt Numbers&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;types-of-numbers&#34;&gt;Types of Numbers&lt;/h2&gt;&#xA;&lt;h3 id=&#34;regular-numbers&#34;&gt;Regular Numbers&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Regular Numbers&lt;/strong&gt; are stored in &lt;strong&gt;64-bit&lt;/strong&gt; memory, with some bits representing the sign (positive or negative), and others representing the value of the number (including the decimal point for floating-point numbers).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Number Methods</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/number-methods/</link>
      <pubDate>Thu, 07 Nov 2024 14:44:18 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/number-methods/</guid>
      <description>&lt;p&gt;Notes on common number methods: &lt;strong&gt;Rounding&lt;/strong&gt;, &lt;strong&gt;Tests with &lt;code&gt;isNaN&lt;/code&gt; and &lt;code&gt;isFinite&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;parseInt()&lt;/code&gt;/&lt;code&gt;parseFloat()&lt;/code&gt;&lt;/strong&gt; functions and &lt;strong&gt;Math object&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;rounding-in-javascript&#34;&gt;Rounding in JavaScript&lt;/h2&gt;&#xA;&lt;p&gt;JavaScript provides several methods for rounding numbers to the nearest integer or a specific number of digits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>String Type</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/string-type/</link>
      <pubDate>Thu, 07 Nov 2024 14:44:54 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/string-type/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;string&lt;/strong&gt; is a sequence of text characters enclosed in either single quotes (&lt;code&gt;&#39; &#39;&lt;/code&gt;), double quotes (&lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;), or backticks (&lt;code&gt;`&lt;/code&gt;). Strings are one of the most commonly used data types in JavaScript.&lt;/p&gt;</description>
    </item>
    <item>
      <title>String Methods</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/string-methods/</link>
      <pubDate>Thu, 07 Nov 2024 14:45:28 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/string-methods/</guid>
      <description>&lt;p&gt;Strings in JavaScript are &lt;strong&gt;primitive values&lt;/strong&gt; and are immutable, meaning their content cannot be modified after they are created. However, they come with built-in properties and methods that allow manipulation and examination of string data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modifying String</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/modifying-string/</link>
      <pubDate>Thu, 07 Nov 2024 14:46:14 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/modifying-string/</guid>
      <description>&lt;div class=&#34;expressive-code&#34;&gt;&#xD;&#xA;  &lt;figure class=&#34;frame not-content&#34;&gt;&#xD;&#xA;  &lt;figcaption class=&#34;header&#34;&gt;&#xD;&#xA;    &lt;span class=&#34;title&#34;&gt;&lt;/span&gt;&#xD;&#xA;  &lt;/figcaption&gt;&#xD;&#xA;  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Getting a substring&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// extract part and new string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;substring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nx&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// slices on length given&#x9;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;concat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toJoin&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;trimStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;trimEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;padEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toReplace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;replacedWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;replaceAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toReplace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;replacedWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;  &lt;/figure&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;h3 id=&#34;string-manipulation-methods-in-javascript&#34;&gt;String Manipulation Methods in JavaScript&lt;/h3&gt;&#xA;&lt;h3 id=&#34;1-extracting-substrings&#34;&gt;1. &lt;strong&gt;Extracting Substrings&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;slicestart--end&#34;&gt;&lt;code&gt;slice(start [, end])&lt;/code&gt;&lt;/h4&gt;&#xA;&lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method extracts a portion of a string and returns a new string. If the &lt;code&gt;end&lt;/code&gt; parameter is omitted, it slices from the &lt;code&gt;start&lt;/code&gt; to the end of the string.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boolean Type</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/boolean-type/</link>
      <pubDate>Thu, 07 Nov 2024 14:46:45 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/boolean-type/</guid>
      <description>&lt;p&gt;Booleans are a primitive data type with only two possible values: &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;. They are commonly used to represent binary states such as &amp;ldquo;yes/no&amp;rdquo; or &amp;ldquo;on/off&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Operators</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/operators/</link>
      <pubDate>Thu, 07 Nov 2024 14:47:05 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/operators/</guid>
      <description>&lt;h3 id=&#34;unary-binary-operators-and-operands&#34;&gt;Unary, Binary Operators, and Operands&lt;/h3&gt;&#xA;&lt;h4 id=&#34;operand&#34;&gt;Operand&lt;/h4&gt;&#xA;&lt;p&gt;An &lt;strong&gt;operand&lt;/strong&gt; is the value or entity that an operator acts upon. In simple terms, it is the input for an operation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auto Type Conversions</title>
      <link>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/auto-type-conversions/</link>
      <pubDate>Thu, 07 Nov 2024 14:47:36 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/java-script/js-language/1-data-types/auto-type-conversions/</guid>
      <description>&lt;p&gt;JavaScript automatically converts values between different types when necessary. This is commonly known as &lt;strong&gt;type coercion&lt;/strong&gt;. It happens in a variety of scenarios, such as when performing mathematical operations or comparisons.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
