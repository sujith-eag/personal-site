<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures Using C on Sujith&#39;s Library</title>
    <link>http://localhost:1313/personal-site/docs/c/ds_using_c/</link>
    <description>Recent content in Data Structures Using C on Sujith&#39;s Library</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Thulite</copyright>
    <lastBuildDate>Wed, 01 Jan 2025 16:00:44 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/personal-site/docs/c/ds_using_c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01 - Tower of Hanoi</title>
      <link>http://localhost:1313/personal-site/docs/c/ds_using_c/01-tower-of-hanoi/</link>
      <pubDate>Wed, 01 Jan 2025 16:00:11 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/c/ds_using_c/01-tower-of-hanoi/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;n&lt;/code&gt;&lt;/strong&gt;: The number of disks to move.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Poles &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;&lt;/strong&gt;: Representing the three rods (source, auxiliary, and destination).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Function signature&lt;/strong&gt;: The function takes four parameters â€” the number of disks (&lt;code&gt;n&lt;/code&gt;), and three characters representing the poles (&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;approach&#34;&gt;Approach:&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Base Case&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 - Stack Operations</title>
      <link>http://localhost:1313/personal-site/docs/c/ds_using_c/02-stack-operations/</link>
      <pubDate>Wed, 01 Jan 2025 16:00:28 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/c/ds_using_c/02-stack-operations/</guid>
      <description>&lt;h3 id=&#34;variables-logic&#34;&gt;Variables Logic&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;int n&lt;/code&gt;: The size of the stack (input by the user).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;int top=-1&lt;/code&gt;: A variable to track the top of the stack. Initially set to &lt;code&gt;-1&lt;/code&gt; to represent an empty stack.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The variables &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; are declared globally so they can be accessed by all functions for stack operations and for condition verification.&lt;/p&gt;</description>
    </item>
    <item>
      <title>03 - Infix to Postfix Conversion</title>
      <link>http://localhost:1313/personal-site/docs/c/ds_using_c/03-infix-to-postfix-conversion/</link>
      <pubDate>Wed, 01 Jan 2025 16:00:34 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/c/ds_using_c/03-infix-to-postfix-conversion/</guid>
      <description>&lt;p&gt;&lt;code&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/code&gt; to get the &lt;code&gt;isalnum()&lt;/code&gt; function to check alphabets and numbers which returns false for any special characters.&lt;/p&gt;&#xA;&lt;h3 id=&#34;logic-for-variables&#34;&gt;Logic for Variables&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;char stack[100]&lt;/code&gt;: A fixed-size array to store operators and operands for conversion.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;int top = -1&lt;/code&gt;: This variable points to the top of the stack.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;char exp[100]&lt;/code&gt;: Another array to store the user input expression.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;char *e&lt;/code&gt;: A pointer used to traverse the &lt;code&gt;exp[]&lt;/code&gt; array.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;char x&lt;/code&gt;: A variable to store the element popped from the stack.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;implementation-logic&#34;&gt;Implementation Logic&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Declare a global stack (&lt;code&gt;stack[100]&lt;/code&gt;) with &lt;code&gt;top = -1&lt;/code&gt; to track the top of the stack.&lt;/li&gt;&#xA;&lt;li&gt;In the &lt;code&gt;main&lt;/code&gt; function, declare the &lt;code&gt;exp[100]&lt;/code&gt; array to capture the user input expression. Use &lt;code&gt;scanf(&amp;quot;%s&amp;quot;, exp)&lt;/code&gt; to capture the entire expression (&lt;code&gt;%c&lt;/code&gt; is for single &lt;code&gt;char&lt;/code&gt;) (&lt;code&gt;&amp;amp;exp&lt;/code&gt; is not needed as it is an array).&lt;/li&gt;&#xA;&lt;li&gt;Declare &lt;code&gt;e&lt;/code&gt; and Set &lt;code&gt;e = exp&lt;/code&gt; to point to the start of the expression, enabling traversal.&lt;/li&gt;&#xA;&lt;li&gt;Use &lt;code&gt;x&lt;/code&gt; in the main function to capture popped elements.&lt;/li&gt;&#xA;&lt;li&gt;Use a &lt;code&gt;while&lt;/code&gt; loop (&lt;code&gt;while(*e != &#39;\0&#39;)&lt;/code&gt;) to traverse the expression by incrementing pointer &lt;code&gt;e++&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Each iteration processes one character in &lt;code&gt;exp[]&lt;/code&gt; and ends when the end of the array is reached which is signaled by &lt;code&gt;*e == &#39;\0&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;conversion-logic&#34;&gt;Conversion Logic&lt;/h3&gt;&#xA;&lt;p&gt;As the &lt;code&gt;while&lt;/code&gt; loop runs, &lt;code&gt;e&lt;/code&gt; is incremented and it traverses the &lt;code&gt;exp&lt;/code&gt; array elements.&lt;br&gt;&#xA;&lt;code&gt;e&lt;/code&gt; points at the location within the array and &lt;code&gt;*e&lt;/code&gt; is element in that array location.&lt;/p&gt;</description>
    </item>
    <item>
      <title>04 - Postfix Expression Evaluation</title>
      <link>http://localhost:1313/personal-site/docs/c/ds_using_c/04-postfix-expression-evaluation/</link>
      <pubDate>Wed, 01 Jan 2025 16:00:40 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/c/ds_using_c/04-postfix-expression-evaluation/</guid>
      <description>&lt;p&gt;&lt;code&gt;isdigit()&lt;/code&gt; is needed to check the numbers, which will be available in &lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;logic-for-variables&#34;&gt;Logic for Variables&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;int stack[100]&lt;/code&gt;: A fixed-size stack to hold the operands and results of operations.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;int top = -1&lt;/code&gt;: This variable points to the top of the stack.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;char exp[100]&lt;/code&gt;: Array to store the input postfix expression.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;char *e&lt;/code&gt;: Pointer used to traverse the &lt;code&gt;exp[]&lt;/code&gt; array.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;int conv&lt;/code&gt;: Variable used to hold the converted integer value from the character.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;int n1, n2, n3&lt;/code&gt;: Variables to hold the popped values from the stack and the result of operations.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;logic-for-implementation&#34;&gt;Logic for Implementation&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Global Variables &lt;code&gt;int stack[100]&lt;/code&gt; and &lt;code&gt;int top = -1&lt;/code&gt; to manage stack.&lt;/li&gt;&#xA;&lt;li&gt;In &lt;code&gt;main&lt;/code&gt; function Declaring &lt;code&gt;char exp[100]&lt;/code&gt; and &lt;code&gt;char *e&lt;/code&gt; to hold the prefix expression and pointer to traverse it.&lt;/li&gt;&#xA;&lt;li&gt;Taking the expression from input and passing to array, &lt;code&gt;scanf(&amp;quot;%s&amp;quot;, exp)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Assigning the address of array starting location to the pointer, &lt;code&gt;e = exp&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Declaring &lt;code&gt;int conv&lt;/code&gt; to hold converted value of the character in &lt;code&gt;*e&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Declaring &lt;code&gt;int n1, n2, n3&lt;/code&gt; to hold the values in the popped values and new result.&lt;/li&gt;&#xA;&lt;li&gt;Starting a &lt;code&gt;while&lt;/code&gt; loop to traverse through the &lt;code&gt;exp&lt;/code&gt; array while incrementing &lt;code&gt;e&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Loop ending condition when &lt;code&gt;*e == &#39;\0&#39;&lt;/code&gt;, So runs when &lt;code&gt;while ( *e != &#39;\0&#39; )&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Within the loop checking if the &lt;code&gt;*e&lt;/code&gt; is a number by passing to &lt;code&gt;isdigit()&lt;/code&gt; from &lt;code&gt;&amp;lt;ctype.h&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;If it is a digit, convert to &lt;code&gt;int&lt;/code&gt; by subtracting its ASCII value with &lt;code&gt;48&lt;/code&gt; as number &lt;code&gt;0&lt;/code&gt; has value of &lt;code&gt;48&lt;/code&gt;, then storing it in &lt;code&gt;conv&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Pushing &lt;code&gt;conv&lt;/code&gt; to the &lt;code&gt;stack&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;If it is not a digit, then it is an operator, then two &lt;code&gt;int&lt;/code&gt; from the stack has to be popped and operated on. (there will be no &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;)&lt;/code&gt; in postfix evaluation)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;logic-for-operation&#34;&gt;Logic for operation&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The popped values are stored in &lt;code&gt;n1&lt;/code&gt; and &lt;code&gt;n2&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The operator is a &lt;code&gt;char&lt;/code&gt; and direct operation cannot happen.&lt;/li&gt;&#xA;&lt;li&gt;Check the character in &lt;code&gt;*e&lt;/code&gt; using &lt;code&gt;switch case&lt;/code&gt; or &lt;code&gt;if else&lt;/code&gt; and perform the relevant operation on &lt;code&gt;n2&lt;/code&gt; and &lt;code&gt;n1&lt;/code&gt;. Store result in &lt;code&gt;n3&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The resultant &lt;code&gt;n3&lt;/code&gt; is pushed into the stack.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Once the iteration of the &lt;code&gt;exp[]&lt;/code&gt; is done, the &lt;code&gt;stack&lt;/code&gt; will have the last value which will be the result. It can be accessed as &lt;code&gt;stack[top]&lt;/code&gt; as top will be &lt;code&gt;0&lt;/code&gt; or by using &lt;code&gt;pop()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>05 - Queue</title>
      <link>http://localhost:1313/personal-site/docs/c/ds_using_c/05-queue/</link>
      <pubDate>Wed, 01 Jan 2025 16:00:44 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/c/ds_using_c/05-queue/</guid>
      <description>&lt;h4 id=&#34;basic-logic&#34;&gt;&lt;strong&gt;Basic Logic&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;Queue Structure&lt;/strong&gt;: The queue is a data structure where elements are added at the &lt;strong&gt;back&lt;/strong&gt; and removed from the &lt;strong&gt;front&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
