<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Complex Data Types on Sujith&#39;s Library</title>
    <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/</link>
    <description>Recent content in Complex Data Types on Sujith&#39;s Library</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Thulite</copyright>
    <lastBuildDate>Tue, 17 Dec 2024 22:47:04 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/personal-site/docs/python/1data-types/complex-types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>02 CDT - 01 Lists</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-01-lists/</link>
      <pubDate>Tue, 17 Dec 2024 22:45:42 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-01-lists/</guid>
      <description>&lt;p&gt;Lists are collections of items arranged in a particular order. They allow you to store multiple pieces of information in a single structure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 02 List Methods</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-02-list-methods/</link>
      <pubDate>Tue, 17 Dec 2024 22:46:00 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-02-list-methods/</guid>
      <description>&lt;p&gt;Index and short summary of the list methods and functions in this page:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Basic Statistics:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;min()&lt;/code&gt;: Returns the smallest value in the list.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;max()&lt;/code&gt;: Returns the largest value in the list.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sum()&lt;/code&gt;: Returns the sum of all values in the list.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Adding Elements:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 03 List Operators</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-03-list-operators/</link>
      <pubDate>Tue, 17 Dec 2024 22:46:17 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-03-list-operators/</guid>
      <description>&lt;h2 id=&#34;operations-on-lists&#34;&gt;Operations on lists&lt;/h2&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;expressive-code&#34;&gt;&#xD;&#xA;  &lt;figure class=&#34;frame not-content&#34;&gt;&#xD;&#xA;  &lt;figcaption class=&#34;header&#34;&gt;&#xD;&#xA;    &lt;span class=&#34;title&#34;&gt;&lt;/span&gt;&#xD;&#xA;  &lt;/figcaption&gt;&#xD;&#xA;  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;applylist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xD;&#xA;  &lt;/figure&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;h3 id=&#34;map-&#34;&gt;&lt;code&gt;map( )&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Built in function to apply something to all the elements of &lt;code&gt;l&lt;/code&gt;.&#xA;&lt;code&gt;map(f, l)&lt;/code&gt; applies &lt;code&gt;f&lt;/code&gt; to each element of &lt;code&gt;l&lt;/code&gt; (entire list)&#xA;output of &lt;code&gt;map(f, l)&lt;/code&gt; is not a list but a sequence like &lt;code&gt;range(i, j)&lt;/code&gt; and &lt;code&gt;dict.keys( )&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 04 List Vs Arrays</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-04-list-vs-arrays/</link>
      <pubDate>Tue, 17 Dec 2024 22:46:32 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-04-list-vs-arrays/</guid>
      <description>&lt;h3 id=&#34;arrays-vs-lists-in-python&#34;&gt;Arrays vs. Lists in Python&lt;/h3&gt;&#xA;&lt;p&gt;Python offers two primary ways to store a collection of data: &lt;strong&gt;arrays&lt;/strong&gt; and &lt;strong&gt;lists&lt;/strong&gt;. While they may seem similar, they have key differences in how they are implemented, how they behave, and their performance characteristics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 05 Tuples</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-05-tuples/</link>
      <pubDate>Tue, 17 Dec 2024 22:46:50 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-05-tuples/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;tuple&lt;/strong&gt; is similar to a list in that it contains a collection of elements, which can be of different types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 06 Sets</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-06-sets/</link>
      <pubDate>Tue, 17 Dec 2024 22:47:04 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-06-sets/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;set&lt;/strong&gt; is an unordered collection of unique elements. Unlike sequences (such as lists or tuples), sets are &lt;strong&gt;unordered&lt;/strong&gt; and do not store duplicate elements. Since sets are unordered, they do not support indexing, slicing, or other sequence-like behavior.&lt;/p&gt;</description>
    </item>
    <item>
      <title>02 CDT - 07 Dictinaries</title>
      <link>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-07-dictinaries/</link>
      <pubDate>Tue, 17 Dec 2024 22:47:04 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/python/1data-types/complex-types/02-cdt-07-dictinaries/</guid>
      <description>&lt;p&gt;Dictionary is a collection of key-value pairs. each key is connected to a value, and key can be used to access a value.&#xA;It is wrapped in &lt;code&gt;{}&lt;/code&gt; ,  key connected to value by colon &lt;code&gt;:&lt;/code&gt; , and each key-value pair is separated by &lt;code&gt;,&lt;/code&gt;&#xA;&lt;code&gt;a = {&amp;quot;colour&amp;quot; : &amp;quot;green&amp;quot;, &amp;quot;points&amp;quot; : 5 }&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
