<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter 05 - Process Scheduling on Sujith&#39;s Library</title>
    <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/</link>
    <description>Recent content in Chapter 05 - Process Scheduling on Sujith&#39;s Library</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright (c) 2020-2024 Thulite</copyright>
    <lastBuildDate>Sun, 12 Jan 2025 21:27:49 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/personal-site/docs/os/c05_process_scheduling/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OS 5.01 - Process Scheduling</title>
      <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.01-process-scheduling/</link>
      <pubDate>Sun, 12 Jan 2025 21:27:49 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.01-process-scheduling/</guid>
      <description>&lt;p&gt;In multiprogrammed OS, the aim of CPU scheduling is to maximize CPU utilization by switching between processes and have some process running all the time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OS 5.03 - Scheduling Algorithms</title>
      <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03-scheduling-algorithms/</link>
      <pubDate>Sun, 12 Jan 2025 21:27:49 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03-scheduling-algorithms/</guid>
      <description>&lt;p&gt;CPU scheduling deals with the problem of deciding which of the processes in the ready queue is to be allocated the CPU. There are many different CPU-scheduling algorithms.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OS 5.03.02 - Shortest Job First</title>
      <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.02-shortest-job-first/</link>
      <pubDate>Sun, 12 Jan 2025 21:27:49 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.02-shortest-job-first/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Shortest Job First (SJF)&lt;/strong&gt; scheduling algorithm assigns the CPU to the process with the shortest next CPU burst. The process with the smallest next burst time is given priority when the CPU becomes available.&lt;br&gt;&#xA;If two processes have the same next CPU burst, &lt;strong&gt;FCFS (First-Come, First-Served)&lt;/strong&gt; is used to break the tie.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OS 5.03.03 - Priority Scheduling</title>
      <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.03-priority-scheduling/</link>
      <pubDate>Sun, 12 Jan 2025 21:27:49 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.03-priority-scheduling/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Priority Scheduling&lt;/strong&gt; algorithm assigns a priority to each process, and the CPU is allocated to the process with the highest priority. If two processes have the same priority, &lt;strong&gt;First-Come, First-Served (FCFS)&lt;/strong&gt; scheduling is used to break the tie.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OS 5.03.04 - Round-Robin Scheduling</title>
      <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.04-round-robin-scheduling/</link>
      <pubDate>Sun, 12 Jan 2025 21:27:49 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.04-round-robin-scheduling/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Round-Robin (RR)&lt;/strong&gt; scheduling algorithm is similar to &lt;strong&gt;FCFS (First-Come, First-Served)&lt;/strong&gt; scheduling, with the key difference being &lt;strong&gt;preemption&lt;/strong&gt;, which allows the system to switch between processes. Primarily designed for time-sharing systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OS 5.03.05 - Multi-Level Queue Scheduling</title>
      <link>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.05-multi-level-queue-scheduling/</link>
      <pubDate>Sun, 12 Jan 2025 21:27:49 +0530</pubDate>
      <guid>http://localhost:1313/personal-site/docs/os/c05_process_scheduling/os-5.03.05-multi-level-queue-scheduling/</guid>
      <description>&lt;p&gt;Multilevel Queue Scheduling is used in situations where processes can be easily classified into different groups.&lt;/p&gt;&#xA;&lt;p&gt;A common division is made between &lt;strong&gt;foreground (interactive)&lt;/strong&gt; processes and &lt;strong&gt;background (batch)&lt;/strong&gt; processes. These two types of processes have different response-time requirements and, therefore, may have different scheduling needs. Additionally, &lt;strong&gt;foreground processes&lt;/strong&gt; may have higher priority (externally defined) over &lt;strong&gt;background processes&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
